
Tension_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000790c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007aa0  08007aa0  00017aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007edc  08007edc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007edc  08007edc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007edc  08007edc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001e0  080080c0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080080c0  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e3e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203d  00000000  00000000  0003204a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00034088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00034e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c939  00000000  00000000  00035bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd2f  00000000  00000000  000524f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a883c  00000000  00000000  00062228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010aa64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cec  00000000  00000000  0010aab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a84 	.word	0x08007a84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007a84 	.word	0x08007a84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fdf5 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f8bf 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 f9b1 	bl	8000fbc <MX_GPIO_Init>
  MX_CAN_Init();
 8000c5a:	f000 f8fb 	bl	8000e54 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000c5e:	f000 f97d 	bl	8000f5c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c62:	f000 f92d 	bl	8000ec0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f000 fe4e 	bl	8001908 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);
 8000c6c:	484e      	ldr	r0, [pc, #312]	; (8000da8 <main+0x160>)
 8000c6e:	f003 f86f 	bl	8003d50 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8000c72:	484e      	ldr	r0, [pc, #312]	; (8000dac <main+0x164>)
 8000c74:	f000 ff67 	bl	8001b46 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c78:	2102      	movs	r1, #2
 8000c7a:	484c      	ldr	r0, [pc, #304]	; (8000dac <main+0x164>)
 8000c7c:	f001 f9c9 	bl	8002012 <HAL_CAN_ActivateNotification>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <main+0x42>
		  != HAL_OK) {
	  Error_Handler();
 8000c86:	f000 fb87 	bl	8001398 <Error_Handler>
  }

  AE_HX711_Reset();
 8000c8a:	f000 fa45 	bl	8001118 <AE_HX711_Reset>
  offset = AE_HX711_getGram(30);
 8000c8e:	201e      	movs	r0, #30
 8000c90:	f000 fac6 	bl	8001220 <AE_HX711_getGram>
 8000c94:	eef0 7a40 	vmov.f32	s15, s0
 8000c98:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <main+0x168>)
 8000c9a:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  weight  = weight *0.8 + (AE_HX711_getGram(1) - offset) *0.2;
 8000c9e:	4b45      	ldr	r3, [pc, #276]	; (8000db4 <main+0x16c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc50 	bl	8000548 <__aeabi_f2d>
 8000ca8:	a339      	add	r3, pc, #228	; (adr r3, 8000d90 <main+0x148>)
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	f7ff fca3 	bl	80005f8 <__aeabi_dmul>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	4614      	mov	r4, r2
 8000cb8:	461d      	mov	r5, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 fab0 	bl	8001220 <AE_HX711_getGram>
 8000cc0:	eeb0 7a40 	vmov.f32	s14, s0
 8000cc4:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <main+0x168>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cce:	ee17 0a90 	vmov	r0, s15
 8000cd2:	f7ff fc39 	bl	8000548 <__aeabi_f2d>
 8000cd6:	a330      	add	r3, pc, #192	; (adr r3, 8000d98 <main+0x150>)
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	f7ff fc8c 	bl	80005f8 <__aeabi_dmul>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	f7ff fad0 	bl	800028c <__adddf3>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f7ff ff58 	bl	8000ba8 <__aeabi_d2f>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a2e      	ldr	r2, [pc, #184]	; (8000db4 <main+0x16c>)
 8000cfc:	6013      	str	r3, [r2, #0]
	  uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 8000cfe:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <main+0x170>)
 8000d00:	463b      	mov	r3, r7
 8000d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d06:	e883 0003 	stmia.w	r3, {r0, r1}
	  tension = weight*9.8/1000.0;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <main+0x16c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fc1a 	bl	8000548 <__aeabi_f2d>
 8000d14:	a322      	add	r3, pc, #136	; (adr r3, 8000da0 <main+0x158>)
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	f7ff fc6d 	bl	80005f8 <__aeabi_dmul>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <main+0x174>)
 8000d2c:	f7ff fd8e 	bl	800084c <__aeabi_ddiv>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff ff36 	bl	8000ba8 <__aeabi_d2f>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <main+0x178>)
 8000d40:	6013      	str	r3, [r2, #0]
	  sprintf(scnt, "Tension:%9f[N],%6.2f[sec]\r\n", tension, tim);
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <main+0x178>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fbfe 	bl	8000548 <__aeabi_f2d>
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <main+0x17c>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	e9cd 2300 	strd	r2, r3, [sp]
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	491b      	ldr	r1, [pc, #108]	; (8000dc8 <main+0x180>)
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <main+0x184>)
 8000d5e:	f004 fc65 	bl	800562c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)scnt, strlen(scnt), 0xFFFF);
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <main+0x184>)
 8000d64:	f7ff fa34 	bl	80001d0 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d70:	4916      	ldr	r1, [pc, #88]	; (8000dcc <main+0x184>)
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <main+0x188>)
 8000d74:	f003 fc44 	bl	8004600 <HAL_UART_Transmit>
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <main+0x178>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
	  memcpy(send_data, &tension, 4);
 8000d7c:	603b      	str	r3, [r7, #0]
	  CAN_Send( CUR_TENSION_ID, send_data);
 8000d7e:	2304      	movs	r3, #4
 8000d80:	461a      	mov	r2, r3
 8000d82:	463b      	mov	r3, r7
 8000d84:	4619      	mov	r1, r3
 8000d86:	4610      	mov	r0, r2
 8000d88:	f000 faa8 	bl	80012dc <CAN_Send>
  {
 8000d8c:	e787      	b.n	8000c9e <main+0x56>
 8000d8e:	bf00      	nop
 8000d90:	9999999a 	.word	0x9999999a
 8000d94:	3fe99999 	.word	0x3fe99999
 8000d98:	9999999a 	.word	0x9999999a
 8000d9c:	3fc99999 	.word	0x3fc99999
 8000da0:	9999999a 	.word	0x9999999a
 8000da4:	40239999 	.word	0x40239999
 8000da8:	200002bc 	.word	0x200002bc
 8000dac:	20000278 	.word	0x20000278
 8000db0:	200002b0 	.word	0x200002b0
 8000db4:	200001fc 	.word	0x200001fc
 8000db8:	08007abc 	.word	0x08007abc
 8000dbc:	408f4000 	.word	0x408f4000
 8000dc0:	200002a0 	.word	0x200002a0
 8000dc4:	20000200 	.word	0x20000200
 8000dc8:	08007aa0 	.word	0x08007aa0
 8000dcc:	20000214 	.word	0x20000214
 8000dd0:	20000308 	.word	0x20000308

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 ffb0 	bl	8004d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fe05 	bl	8002a24 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e20:	f000 faba 	bl	8001398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fcf9 	bl	8003834 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e48:	f000 faa6 	bl	8001398 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3740      	adds	r7, #64	; 0x40
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e5a:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <MX_CAN_Init+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e76:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e7e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_CAN_Init+0x64>)
 8000ea6:	f000 fd53 	bl	8001950 <HAL_CAN_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000eb0:	f000 fa72 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000278 	.word	0x20000278
 8000ebc:	40006400 	.word	0x40006400

08000ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000ee8:	2223      	movs	r2, #35	; 0x23
 8000eea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000ef4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f08:	f002 feca 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f12:	f000 fa41 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f24:	f003 f88f 	bl	8004046 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f2e:	f000 fa33 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_TIM2_Init+0x98>)
 8000f40:	f003 fa84 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f4a:	f000 fa25 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002bc 	.word	0x200002bc

08000f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_USART2_UART_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	f003 fae0 	bl	8004564 <HAL_UART_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 f9f5 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000308 	.word	0x20000308
 8000fb8:	40004400 	.word	0x40004400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8000fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fdc:	6153      	str	r3, [r2, #20]
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_GPIO_Init+0xe4>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_PD_SCK_GPIO_Port, HX711_PD_SCK_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	4821      	ldr	r0, [pc, #132]	; (80010a4 <MX_GPIO_Init+0xe8>)
 8001020:	f001 fce8 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2108      	movs	r1, #8
 8001028:	481f      	ldr	r0, [pc, #124]	; (80010a8 <MX_GPIO_Init+0xec>)
 800102a:	f001 fce3 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HX711_DOUT_Pin */
  GPIO_InitStruct.Pin = HX711_DOUT_Pin;
 800102e:	2301      	movs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX711_DOUT_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4619      	mov	r1, r3
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_GPIO_Init+0xe8>)
 8001042:	f001 fb4d 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_PD_SCK_Pin */
  GPIO_InitStruct.Pin = HX711_PD_SCK_Pin;
 8001046:	2302      	movs	r3, #2
 8001048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX711_PD_SCK_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_GPIO_Init+0xe8>)
 800105e:	f001 fb3f 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001062:	2308      	movs	r3, #8
 8001064:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106a:	2301      	movs	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <MX_GPIO_Init+0xec>)
 800107a:	f001 fb31 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_SW1_Pin */
  GPIO_InitStruct.Pin = User_SW1_Pin;
 800107e:	2320      	movs	r3, #32
 8001080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_SW1_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_GPIO_Init+0xec>)
 8001092:	f001 fb25 	bl	80026e0 <HAL_GPIO_Init>

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48001400 	.word	0x48001400
 80010a8:	48000400 	.word	0x48000400

080010ac <Delay_us>:

/* USER CODE BEGIN 4 */
void Delay_us(uint32_t Delay)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  while(Delay > 0)
 80010b4:	e026      	b.n	8001104 <Delay_us+0x58>
  {
	  asm volatile(
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
			  "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t"
			  "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t"
			  "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" "NOP\n\t" );	//System clock: 36MHz -> "NOP" x36
	  Delay--;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3b01      	subs	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
  while(Delay > 0)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1d5      	bne.n	80010b6 <Delay_us+0xa>
  }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <AE_HX711_Reset>:

void AE_HX711_Reset(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HX711_PD_SCK_GPIO_Port, HX711_PD_SCK_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2102      	movs	r1, #2
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <AE_HX711_Reset+0x28>)
 8001122:	f001 fc67 	bl	80029f4 <HAL_GPIO_WritePin>
	Delay_us(100);
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f7ff ffc0 	bl	80010ac <Delay_us>
	HAL_GPIO_WritePin(HX711_PD_SCK_GPIO_Port, HX711_PD_SCK_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <AE_HX711_Reset+0x28>)
 8001132:	f001 fc5f 	bl	80029f4 <HAL_GPIO_WritePin>
	Delay_us(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f7ff ffb8 	bl	80010ac <Delay_us>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	48001400 	.word	0x48001400

08001144 <AE_HX711_Read>:

long AE_HX711_Read(void)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  long data=0;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  while(HAL_GPIO_ReadPin(HX711_DOUT_GPIO_Port, HX711_DOUT_Pin)!=0);
 800114e:	bf00      	nop
 8001150:	2101      	movs	r1, #1
 8001152:	4821      	ldr	r0, [pc, #132]	; (80011d8 <AE_HX711_Read+0x94>)
 8001154:	f001 fc36 	bl	80029c4 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f8      	bne.n	8001150 <AE_HX711_Read+0xc>
  Delay_us(10);
 800115e:	200a      	movs	r0, #10
 8001160:	f7ff ffa4 	bl	80010ac <Delay_us>
  for(int i=0;i<24;i++)
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	e01b      	b.n	80011a2 <AE_HX711_Read+0x5e>
  {
	  HAL_GPIO_WritePin(HX711_PD_SCK_GPIO_Port, HX711_PD_SCK_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	481a      	ldr	r0, [pc, #104]	; (80011d8 <AE_HX711_Read+0x94>)
 8001170:	f001 fc40 	bl	80029f4 <HAL_GPIO_WritePin>
	  Delay_us(5);
 8001174:	2005      	movs	r0, #5
 8001176:	f7ff ff99 	bl	80010ac <Delay_us>
      HAL_GPIO_WritePin(HX711_PD_SCK_GPIO_Port, HX711_PD_SCK_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <AE_HX711_Read+0x94>)
 8001180:	f001 fc38 	bl	80029f4 <HAL_GPIO_WritePin>
	  Delay_us(5);
 8001184:	2005      	movs	r0, #5
 8001186:	f7ff ff91 	bl	80010ac <Delay_us>
	  data = (data<<1)|(HAL_GPIO_ReadPin(HX711_DOUT_GPIO_Port, HX711_DOUT_Pin));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	005c      	lsls	r4, r3, #1
 800118e:	2101      	movs	r1, #1
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <AE_HX711_Read+0x94>)
 8001192:	f001 fc17 	bl	80029c4 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	4323      	orrs	r3, r4
 800119a:	607b      	str	r3, [r7, #4]
  for(int i=0;i<24;i++)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b17      	cmp	r3, #23
 80011a6:	dde0      	ble.n	800116a <AE_HX711_Read+0x26>
  }
  HAL_GPIO_WritePin(HX711_PD_SCK_GPIO_Port, HX711_PD_SCK_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	480a      	ldr	r0, [pc, #40]	; (80011d8 <AE_HX711_Read+0x94>)
 80011ae:	f001 fc21 	bl	80029f4 <HAL_GPIO_WritePin>
  Delay_us(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f7ff ff7a 	bl	80010ac <Delay_us>
  HAL_GPIO_WritePin(HX711_PD_SCK_GPIO_Port, HX711_PD_SCK_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2102      	movs	r1, #2
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <AE_HX711_Read+0x94>)
 80011be:	f001 fc19 	bl	80029f4 <HAL_GPIO_WritePin>
  Delay_us(10);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f7ff ff72 	bl	80010ac <Delay_us>
  return data^0x800000;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	48001400 	.word	0x48001400

080011dc <AE_HX711_Averaging>:


long AE_HX711_Averaging(long adc,char num)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
  long sum = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < num; i++) sum += AE_HX711_Read();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	e008      	b.n	8001204 <AE_HX711_Averaging+0x28>
 80011f2:	f7ff ffa7 	bl	8001144 <AE_HX711_Read>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3301      	adds	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	429a      	cmp	r2, r3
 800120a:	dbf2      	blt.n	80011f2 <AE_HX711_Averaging+0x16>
  return sum / num;
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0000      	movs	r0, r0
	...

08001220 <AE_HX711_getGram>:

float AE_HX711_getGram(char num)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  #define HX711_PGA 128
  #define HX711_SCALE     (OUT_VOL * HX711_AVDD / LOAD *HX711_PGA)

  float data;

  data = AE_HX711_Averaging(AE_HX711_Read(),num)*HX711_ADC1bit;
 800122a:	f7ff ff8b 	bl	8001144 <AE_HX711_Read>
 800122e:	4602      	mov	r2, r0
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4619      	mov	r1, r3
 8001234:	4610      	mov	r0, r2
 8001236:	f7ff ffd1 	bl	80011dc <AE_HX711_Averaging>
 800123a:	ee07 0a90 	vmov	s15, r0
 800123e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001242:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80012a0 <AE_HX711_getGram+0x80>
 8001246:	ee27 7a87 	vmul.f32	s14, s15, s14
 800124a:	eddf 6a16 	vldr	s13, [pc, #88]	; 80012a4 <AE_HX711_getGram+0x84>
 800124e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001252:	edc7 7a03 	vstr	s15, [r7, #12]
  data =  data / HX711_SCALE * scale;
 8001256:	edd7 7a03 	vldr	s15, [r7, #12]
 800125a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80012a8 <AE_HX711_getGram+0x88>
 800125e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001262:	ee16 0a90 	vmov	r0, s13
 8001266:	f7ff f96f 	bl	8000548 <__aeabi_f2d>
 800126a:	a30b      	add	r3, pc, #44	; (adr r3, 8001298 <AE_HX711_getGram+0x78>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f9c2 	bl	80005f8 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fc94 	bl	8000ba8 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	60fb      	str	r3, [r7, #12]

  return data;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	ee07 3a90 	vmov	s15, r3
}
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	f3af 8000 	nop.w
 8001298:	5907d912 	.word	0x5907d912
 800129c:	3fee4c16 	.word	0x3fee4c16
 80012a0:	40898ef3 	.word	0x40898ef3
 80012a4:	4b800000 	.word	0x4b800000
 80012a8:	38e6c8e2 	.word	0x38e6c8e2

080012ac <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80012b8:	2100      	movs	r1, #0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 fd97 	bl	8001dee <HAL_CAN_GetRxMessage>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 80012c6:	f000 f867 	bl	8001398 <Error_Handler>
	}
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002b4 	.word	0x200002b4
 80012d8:	200003a4 	.word	0x200003a4

080012dc <CAN_Send>:

void CAN_Send(uint32_t _id, uint8_t *_data) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	TxHeader.StdId = _id;					// Tx CAN ID
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <CAN_Send+0x64>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <CAN_Send+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <CAN_Send+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <CAN_Send+0x64>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <CAN_Send+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	751a      	strb	r2, [r3, #20]
	memcpy(TxData, _data, 8);
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <CAN_Send+0x68>)
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	6852      	ldr	r2, [r2, #4]
 800130c:	6019      	str	r1, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <CAN_Send+0x6c>)
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <CAN_Send+0x68>)
 8001314:	490a      	ldr	r1, [pc, #40]	; (8001340 <CAN_Send+0x64>)
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <CAN_Send+0x70>)
 8001318:	f000 fc59 	bl	8001bce <HAL_CAN_AddTxMessage>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <CAN_Send+0x4a>
		Error_Handler();
 8001322:	f000 f839 	bl	8001398 <Error_Handler>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {
 8001326:	bf00      	nop
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <CAN_Send+0x70>)
 800132a:	f000 fd2b 	bl	8001d84 <HAL_CAN_GetTxMailboxesFreeLevel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f9      	beq.n	8001328 <CAN_Send+0x4c>
	}
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000038c 	.word	0x2000038c
 8001344:	200002a4 	.word	0x200002a4
 8001348:	200002ac 	.word	0x200002ac
 800134c:	20000278 	.word	0x20000278

08001350 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d10c      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x2a>
		tim += 0.01;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001366:	a308      	add	r3, pc, #32	; (adr r3, 8001388 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7fe ff8e 	bl	800028c <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001376:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	47ae147b 	.word	0x47ae147b
 800138c:	3f847ae1 	.word	0x3f847ae1
 8001390:	200002bc 	.word	0x200002bc
 8001394:	20000200 	.word	0x20000200

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x44>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_MspInit+0x44>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_MspInit+0x44>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x44>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x44>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x44>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a28      	ldr	r2, [pc, #160]	; (80014ac <HAL_CAN_MspInit+0xc0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d149      	bne.n	80014a2 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_CAN_MspInit+0xc4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_CAN_MspInit+0xc4>)
 8001414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <HAL_CAN_MspInit+0xc4>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_CAN_MspInit+0xc4>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_CAN_MspInit+0xc4>)
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	6153      	str	r3, [r2, #20]
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_CAN_MspInit+0xc4>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800143e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001450:	2309      	movs	r3, #9
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f001 f93f 	bl	80026e0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2013      	movs	r0, #19
 8001468:	f001 f903 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 800146c:	2013      	movs	r0, #19
 800146e:	f001 f91c 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2014      	movs	r0, #20
 8001478:	f001 f8fb 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800147c:	2014      	movs	r0, #20
 800147e:	f001 f914 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2015      	movs	r0, #21
 8001488:	f001 f8f3 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800148c:	2015      	movs	r0, #21
 800148e:	f001 f90c 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2016      	movs	r0, #22
 8001498:	f001 f8eb 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800149c:	2016      	movs	r0, #22
 800149e:	f001 f904 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40006400 	.word	0x40006400
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d113      	bne.n	80014ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_TIM_Base_MspInit+0x44>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_TIM_Base_MspInit+0x44>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_TIM_Base_MspInit+0x44>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	201c      	movs	r0, #28
 80014e4:	f001 f8c5 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e8:	201c      	movs	r0, #28
 80014ea:	f001 f8de 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_UART_MspInit+0x7c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d128      	bne.n	8001570 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_UART_MspInit+0x80>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_UART_MspInit+0x80>)
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_UART_MspInit+0x80>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_UART_MspInit+0x80>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_UART_MspInit+0x80>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_UART_MspInit+0x80>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154e:	230c      	movs	r3, #12
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f001 f8b8 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40004400 	.word	0x40004400
 800157c:	40021000 	.word	0x40021000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 f97c 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <CAN_TX_IRQHandler+0x10>)
 80015da:	f000 fd40 	bl	800205e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000278 	.word	0x20000278

080015e8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <CAN_RX0_IRQHandler+0x10>)
 80015ee:	f000 fd36 	bl	800205e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000278 	.word	0x20000278

080015fc <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <CAN_RX1_IRQHandler+0x10>)
 8001602:	f000 fd2c 	bl	800205e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000278 	.word	0x20000278

08001610 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <CAN_SCE_IRQHandler+0x10>)
 8001616:	f000 fd22 	bl	800205e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000278 	.word	0x20000278

08001624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM2_IRQHandler+0x10>)
 800162a:	f002 fbed 	bl	8003e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002bc 	.word	0x200002bc

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
	return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_kill>:

int _kill(int pid, int sig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001652:	f003 fb4f 	bl	8004cf4 <__errno>
 8001656:	4603      	mov	r3, r0
 8001658:	2216      	movs	r2, #22
 800165a:	601a      	str	r2, [r3, #0]
	return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_exit>:

void _exit (int status)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffe7 	bl	8001648 <_kill>
	while (1) {}		/* Make sure we hang here */
 800167a:	e7fe      	b.n	800167a <_exit+0x12>

0800167c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
	}

return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
	}
	return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
	return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f003 fab4 	bl	8004cf4 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20003000 	.word	0x20003000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	20000208 	.word	0x20000208
 80017c0:	200003d8 	.word	0x200003d8

080017c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f003 fa73 	bl	8004d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fa15 	bl	8000c48 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001820:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800182c:	08007ee4 	.word	0x08007ee4
  ldr r2, =_sbss
 8001830:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001834:	200003d4 	.word	0x200003d4

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x28>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 ff05 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fda4 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 ff1d 	bl	80026c6 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 fee5 	bl	8002672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	200003c0 	.word	0x200003c0

080018f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200003c0 	.word	0x200003c0

08001908 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0ed      	b.n	8001b3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fd3c 	bl	80013ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001984:	f7ff ffb4 	bl	80018f0 <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800198a:	e012      	b.n	80019b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800198c:	f7ff ffb0 	bl	80018f0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b0a      	cmp	r3, #10
 8001998:	d90b      	bls.n	80019b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2205      	movs	r2, #5
 80019aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0c5      	b.n	8001b3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0e5      	beq.n	800198c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0202 	bic.w	r2, r2, #2
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d0:	f7ff ff8e 	bl	80018f0 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019d6:	e012      	b.n	80019fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d8:	f7ff ff8a 	bl	80018f0 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b0a      	cmp	r3, #10
 80019e4:	d90b      	bls.n	80019fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2205      	movs	r2, #5
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e09f      	b.n	8001b3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e5      	bne.n	80019d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e1b      	ldrb	r3, [r3, #24]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7e5b      	ldrb	r3, [r3, #25]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7e9b      	ldrb	r3, [r3, #26]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0220 	bic.w	r2, r2, #32
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7edb      	ldrb	r3, [r3, #27]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0210 	bic.w	r2, r2, #16
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e007      	b.n	8001ab4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0210 	orr.w	r2, r2, #16
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7f1b      	ldrb	r3, [r3, #28]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d108      	bne.n	8001ace <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0208 	orr.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e007      	b.n	8001ade <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0208 	bic.w	r2, r2, #8
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7f5b      	ldrb	r3, [r3, #29]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d108      	bne.n	8001af8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0204 	orr.w	r2, r2, #4
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e007      	b.n	8001b08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	ea42 0103 	orr.w	r1, r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d12e      	bne.n	8001bb8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b72:	f7ff febd 	bl	80018f0 <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b78:	e012      	b.n	8001ba0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b7a:	f7ff feb9 	bl	80018f0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b0a      	cmp	r3, #10
 8001b86:	d90b      	bls.n	8001ba0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2205      	movs	r2, #5
 8001b98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e012      	b.n	8001bc6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1e5      	bne.n	8001b7a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e006      	b.n	8001bc6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
  }
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b089      	sub	sp, #36	; 0x24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bec:	7ffb      	ldrb	r3, [r7, #31]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d003      	beq.n	8001bfa <HAL_CAN_AddTxMessage+0x2c>
 8001bf2:	7ffb      	ldrb	r3, [r7, #31]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	f040 80b8 	bne.w	8001d6a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a0 	beq.w	8001d5a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	0e1b      	lsrs	r3, r3, #24
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d907      	bls.n	8001c3a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e09e      	b.n	8001d78 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c56:	68f9      	ldr	r1, [r7, #12]
 8001c58:	6809      	ldr	r1, [r1, #0]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3318      	adds	r3, #24
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	440b      	add	r3, r1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e00f      	b.n	8001c88 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c72:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c7c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3318      	adds	r3, #24
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	440b      	add	r3, r1
 8001c86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3318      	adds	r3, #24
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	440b      	add	r3, r1
 8001c98:	3304      	adds	r3, #4
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	7d1b      	ldrb	r3, [r3, #20]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d111      	bne.n	8001cc8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3318      	adds	r3, #24
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	6811      	ldr	r1, [r2, #0]
 8001cb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3307      	adds	r3, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	061a      	lsls	r2, r3, #24
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3306      	adds	r3, #6
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3305      	adds	r3, #5
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	3204      	adds	r2, #4
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	4610      	mov	r0, r2
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	6811      	ldr	r1, [r2, #0]
 8001cf0:	ea43 0200 	orr.w	r2, r3, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001cfe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3303      	adds	r3, #3
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	061a      	lsls	r2, r3, #24
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3301      	adds	r3, #1
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	7812      	ldrb	r2, [r2, #0]
 8001d20:	4610      	mov	r0, r2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6811      	ldr	r1, [r2, #0]
 8001d26:	ea43 0200 	orr.w	r2, r3, r0
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	440b      	add	r3, r1
 8001d30:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	6811      	ldr	r1, [r2, #0]
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3318      	adds	r3, #24
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	440b      	add	r3, r1
 8001d54:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e00e      	b.n	8001d78 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e006      	b.n	8001d78 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
  }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3724      	adds	r7, #36	; 0x24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d96:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d98:	7afb      	ldrb	r3, [r7, #11]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d002      	beq.n	8001da4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d11d      	bne.n	8001de0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3301      	adds	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001de0:	68fb      	ldr	r3, [r7, #12]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001dee:	b480      	push	{r7}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e02:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d003      	beq.n	8001e12 <HAL_CAN_GetRxMessage+0x24>
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	f040 80f3 	bne.w	8001ff8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10e      	bne.n	8001e36 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0e7      	b.n	8002006 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0d8      	b.n	8002006 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	331b      	adds	r3, #27
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	4413      	add	r3, r2
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0204 	and.w	r2, r3, #4
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	331b      	adds	r3, #27
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0d5b      	lsrs	r3, r3, #21
 8001e82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	331b      	adds	r3, #27
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	331b      	adds	r3, #27
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0202 	and.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	331b      	adds	r3, #27
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	331b      	adds	r3, #27
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	331b      	adds	r3, #27
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0a1a      	lsrs	r2, r3, #8
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0c1a      	lsrs	r2, r3, #16
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3302      	adds	r3, #2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e1a      	lsrs	r2, r3, #24
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3303      	adds	r3, #3
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0a1a      	lsrs	r2, r3, #8
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	3305      	adds	r3, #5
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0c1a      	lsrs	r2, r3, #16
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3306      	adds	r3, #6
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0e1a      	lsrs	r2, r3, #24
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	3307      	adds	r3, #7
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d108      	bne.n	8001fe4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	e007      	b.n	8001ff4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e006      	b.n	8002006 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002022:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d002      	beq.n	8002030 <HAL_CAN_ActivateNotification+0x1e>
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d109      	bne.n	8002044 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6959      	ldr	r1, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e006      	b.n	8002052 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b08a      	sub	sp, #40	; 0x28
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d07c      	beq.n	800219e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d023      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f983 	bl	80023cc <HAL_CAN_TxMailbox0CompleteCallback>
 80020c6:	e016      	b.n	80020f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e00c      	b.n	80020f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	e002      	b.n	80020f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f989 	bl	8002408 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d024      	beq.n	800214a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f963 	bl	80023e0 <HAL_CAN_TxMailbox1CompleteCallback>
 800211a:	e016      	b.n	800214a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e00c      	b.n	800214a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	e002      	b.n	800214a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f969 	bl	800241c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d024      	beq.n	800219e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800215c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f943 	bl	80023f4 <HAL_CAN_TxMailbox2CompleteCallback>
 800216e:	e016      	b.n	800219e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e00c      	b.n	800219e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e002      	b.n	800219e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f949 	bl	8002430 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00c      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2210      	movs	r2, #16
 80021c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00b      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2208      	movs	r2, #8
 80021dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f930 	bl	8002444 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff f855 	bl	80012ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00c      	beq.n	8002226 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2210      	movs	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2208      	movs	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f912 	bl	800246c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8f9 	bl	8002458 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2210      	movs	r2, #16
 8002280:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8fc 	bl	8002480 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2208      	movs	r2, #8
 80022a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8f5 	bl	8002494 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d07b      	beq.n	80023ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d072      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002318:	2b00      	cmp	r3, #0
 800231a:	d043      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03e      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d02b      	beq.n	8002388 <HAL_CAN_IRQHandler+0x32a>
 8002330:	2b60      	cmp	r3, #96	; 0x60
 8002332:	d82e      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 8002334:	2b50      	cmp	r3, #80	; 0x50
 8002336:	d022      	beq.n	800237e <HAL_CAN_IRQHandler+0x320>
 8002338:	2b50      	cmp	r3, #80	; 0x50
 800233a:	d82a      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d019      	beq.n	8002374 <HAL_CAN_IRQHandler+0x316>
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d826      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 8002344:	2b30      	cmp	r3, #48	; 0x30
 8002346:	d010      	beq.n	800236a <HAL_CAN_IRQHandler+0x30c>
 8002348:	2b30      	cmp	r3, #48	; 0x30
 800234a:	d822      	bhi.n	8002392 <HAL_CAN_IRQHandler+0x334>
 800234c:	2b10      	cmp	r3, #16
 800234e:	d002      	beq.n	8002356 <HAL_CAN_IRQHandler+0x2f8>
 8002350:	2b20      	cmp	r3, #32
 8002352:	d005      	beq.n	8002360 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002354:	e01d      	b.n	8002392 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800235e:	e019      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	f043 0310 	orr.w	r3, r3, #16
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002368:	e014      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	f043 0320 	orr.w	r3, r3, #32
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002372:	e00f      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800237c:	e00a      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002386:	e005      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002390:	e000      	b.n	8002394 <HAL_CAN_IRQHandler+0x336>
            break;
 8002392:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2204      	movs	r2, #4
 80023aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f872 	bl	80024a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7ff ff8e 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff29 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff3e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff8e 	bl	80025b0 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff31 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	e14e      	b.n	800298e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8140 	beq.w	8002988 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d005      	beq.n	8002720 <HAL_GPIO_Init+0x40>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d130      	bne.n	8002782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002756:	2201      	movs	r2, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 0201 	and.w	r2, r3, #1
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b03      	cmp	r3, #3
 800278c:	d017      	beq.n	80027be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d123      	bne.n	8002812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	6939      	ldr	r1, [r7, #16]
 800280e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0203 	and.w	r2, r3, #3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 809a 	beq.w	8002988 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <HAL_GPIO_Init+0x2cc>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a54      	ldr	r2, [pc, #336]	; (80029ac <HAL_GPIO_Init+0x2cc>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b52      	ldr	r3, [pc, #328]	; (80029ac <HAL_GPIO_Init+0x2cc>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800286c:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_GPIO_Init+0x2d0>)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	220f      	movs	r2, #15
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002896:	d013      	beq.n	80028c0 <HAL_GPIO_Init+0x1e0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a46      	ldr	r2, [pc, #280]	; (80029b4 <HAL_GPIO_Init+0x2d4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00d      	beq.n	80028bc <HAL_GPIO_Init+0x1dc>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a45      	ldr	r2, [pc, #276]	; (80029b8 <HAL_GPIO_Init+0x2d8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <HAL_GPIO_Init+0x1d8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a44      	ldr	r2, [pc, #272]	; (80029bc <HAL_GPIO_Init+0x2dc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_GPIO_Init+0x1d4>
 80028b0:	2303      	movs	r3, #3
 80028b2:	e006      	b.n	80028c2 <HAL_GPIO_Init+0x1e2>
 80028b4:	2305      	movs	r3, #5
 80028b6:	e004      	b.n	80028c2 <HAL_GPIO_Init+0x1e2>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e002      	b.n	80028c2 <HAL_GPIO_Init+0x1e2>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_GPIO_Init+0x1e2>
 80028c0:	2300      	movs	r3, #0
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	f002 0203 	and.w	r2, r2, #3
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	4093      	lsls	r3, r2
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028d2:	4937      	ldr	r1, [pc, #220]	; (80029b0 <HAL_GPIO_Init+0x2d0>)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e0:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002904:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800292e:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <HAL_GPIO_Init+0x2e0>)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3301      	adds	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f aea9 	bne.w	80026f0 <HAL_GPIO_Init+0x10>
  }
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010000 	.word	0x40010000
 80029b4:	48000400 	.word	0x48000400
 80029b8:	48000800 	.word	0x48000800
 80029bc:	48000c00 	.word	0x48000c00
 80029c0:	40010400 	.word	0x40010400

080029c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e001      	b.n	80029e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f000 bef4 	b.w	8003826 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 816a 	beq.w	8002d22 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a4e:	4bb3      	ldr	r3, [pc, #716]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d00c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5a:	4bb0      	ldr	r3, [pc, #704]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d159      	bne.n	8002b1a <HAL_RCC_OscConfig+0xf6>
 8002a66:	4bad      	ldr	r3, [pc, #692]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a72:	d152      	bne.n	8002b1a <HAL_RCC_OscConfig+0xf6>
 8002a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a78:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x82>
 8002aa0:	4b9e      	ldr	r3, [pc, #632]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCC_OscConfig+0xae>
 8002aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aaa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ac2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ace:	4b93      	ldr	r3, [pc, #588]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ad6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ada:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ade:	fa92 f2a2 	rbit	r2, r2
 8002ae2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ae6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002aea:	fab2 f282 	clz	r2, r2
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f002 021f 	and.w	r2, r2, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 810c 	beq.w	8002d20 <HAL_RCC_OscConfig+0x2fc>
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8106 	bne.w	8002d20 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f000 be86 	b.w	8003826 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x110>
 8002b26:	4b7d      	ldr	r3, [pc, #500]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7c      	ldr	r2, [pc, #496]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e030      	b.n	8002b96 <HAL_RCC_OscConfig+0x172>
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x134>
 8002b3e:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a76      	ldr	r2, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01e      	b.n	8002b96 <HAL_RCC_OscConfig+0x172>
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x15a>
 8002b64:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x172>
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a66      	ldr	r2, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b96:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f023 020f 	bic.w	r2, r3, #15
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	495d      	ldr	r1, [pc, #372]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d059      	beq.n	8002c68 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fe9c 	bl	80018f0 <HAL_GetTick>
 8002bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fe97 	bl	80018f0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d902      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f000 be29 	b.w	8003826 <HAL_RCC_OscConfig+0xe02>
 8002bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002be8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_OscConfig+0x1e2>
 8002c00:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x20e>
 8002c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c22:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c36:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c3e:	fa92 f2a2 	rbit	r2, r2
 8002c42:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c46:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f042 0220 	orr.w	r2, r2, #32
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f002 021f 	and.w	r2, r2, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ab      	beq.n	8002bbe <HAL_RCC_OscConfig+0x19a>
 8002c66:	e05c      	b.n	8002d22 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fe42 	bl	80018f0 <HAL_GetTick>
 8002c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c72:	f7fe fe3d 	bl	80018f0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d902      	bls.n	8002c88 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	f000 bdcf 	b.w	8003826 <HAL_RCC_OscConfig+0xe02>
 8002c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c8c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c9c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0x296>
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	e015      	b.n	8002ce6 <HAL_RCC_OscConfig+0x2c2>
 8002cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cbe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002cd6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <HAL_RCC_OscConfig+0x2f8>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cfa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ab      	bne.n	8002c72 <HAL_RCC_OscConfig+0x24e>
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_OscConfig+0x2fe>
 8002d1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 816f 	beq.w	8003010 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d32:	4bd0      	ldr	r3, [pc, #832]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d3e:	4bcd      	ldr	r3, [pc, #820]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d16c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x400>
 8002d4a:	4bca      	ldr	r3, [pc, #808]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d166      	bne.n	8002e24 <HAL_RCC_OscConfig+0x400>
 8002d56:	2302      	movs	r3, #2
 8002d58:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d68:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x362>
 8002d80:	4bbc      	ldr	r3, [pc, #752]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e013      	b.n	8002dae <HAL_RCC_OscConfig+0x38a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002daa:	4bb2      	ldr	r3, [pc, #712]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2202      	movs	r2, #2
 8002db0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002db4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002dc0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f042 0220 	orr.w	r2, r2, #32
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f002 021f 	and.w	r2, r2, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d002      	beq.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f000 bd1b 	b.w	8003826 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4ba0      	ldr	r3, [pc, #640]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	21f8      	movs	r1, #248	; 0xf8
 8002e00:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e08:	fa91 f1a1 	rbit	r1, r1
 8002e0c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e10:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e14:	fab1 f181 	clz	r1, r1
 8002e18:	b2c9      	uxtb	r1, r1
 8002e1a:	408b      	lsls	r3, r1
 8002e1c:	4995      	ldr	r1, [pc, #596]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e0f5      	b.n	8003010 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8085 	beq.w	8002f3a <HAL_RCC_OscConfig+0x516>
 8002e30:	2301      	movs	r3, #1
 8002e32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	461a      	mov	r2, r3
 8002e58:	2301      	movs	r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fd48 	bl	80018f0 <HAL_GetTick>
 8002e60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fd43 	bl	80018f0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d902      	bls.n	8002e7c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	f000 bcd5 	b.w	8003826 <HAL_RCC_OscConfig+0xe02>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_RCC_OscConfig+0x488>
 8002ea6:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e013      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4b0>
 8002eac:	2302      	movs	r3, #2
 8002eae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ec4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002eda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ee6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eea:	fab2 f282 	clz	r2, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f042 0220 	orr.w	r2, r2, #32
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f002 021f 	and.w	r2, r2, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0af      	beq.n	8002e66 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	21f8      	movs	r1, #248	; 0xf8
 8002f16:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f1e:	fa91 f1a1 	rbit	r1, r1
 8002f22:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f26:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f2a:	fab1 f181 	clz	r1, r1
 8002f2e:	b2c9      	uxtb	r1, r1
 8002f30:	408b      	lsls	r3, r1
 8002f32:	4950      	ldr	r1, [pc, #320]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
 8002f38:	e06a      	b.n	8003010 <HAL_RCC_OscConfig+0x5ec>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	461a      	mov	r2, r3
 8002f62:	2300      	movs	r3, #0
 8002f64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fcc3 	bl	80018f0 <HAL_GetTick>
 8002f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe fcbe 	bl	80018f0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d902      	bls.n	8002f86 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	f000 bc50 	b.w	8003826 <HAL_RCC_OscConfig+0xe02>
 8002f86:	2302      	movs	r3, #2
 8002f88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x592>
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	e013      	b.n	8002fde <HAL_RCC_OscConfig+0x5ba>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002fc8:	2302      	movs	r3, #2
 8002fca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002fce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_RCC_OscConfig+0x650>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fe4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fe8:	fa92 f2a2 	rbit	r2, r2
 8002fec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ff0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ff4:	fab2 f282 	clz	r2, r2
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f042 0220 	orr.w	r2, r2, #32
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	f002 021f 	and.w	r2, r2, #31
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1af      	bne.n	8002f70 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80da 	beq.w	80031d4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d069      	beq.n	80030fe <HAL_RCC_OscConfig+0x6da>
 800302a:	2301      	movs	r3, #1
 800302c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800303c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x654>)
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	461a      	mov	r2, r3
 8003050:	2301      	movs	r3, #1
 8003052:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fe fc4c 	bl	80018f0 <HAL_GetTick>
 8003058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305c:	e00e      	b.n	800307c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305e:	f7fe fc47 	bl	80018f0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d906      	bls.n	800307c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e3d9      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	10908120 	.word	0x10908120
 800307c:	2302      	movs	r3, #2
 800307e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800308e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003092:	2202      	movs	r2, #2
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80030aa:	2202      	movs	r2, #2
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	fa93 f2a3 	rbit	r2, r3
 80030b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80030bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4ba5      	ldr	r3, [pc, #660]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80030c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80030c6:	2102      	movs	r1, #2
 80030c8:	6019      	str	r1, [r3, #0]
 80030ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f1a3 	rbit	r1, r3
 80030d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030d8:	6019      	str	r1, [r3, #0]
  return result;
 80030da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0b0      	beq.n	800305e <HAL_RCC_OscConfig+0x63a>
 80030fc:	e06a      	b.n	80031d4 <HAL_RCC_OscConfig+0x7b0>
 80030fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003114:	601a      	str	r2, [r3, #0]
  return result;
 8003116:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800311a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	4b8c      	ldr	r3, [pc, #560]	; (8003358 <HAL_RCC_OscConfig+0x934>)
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7fe fbde 	bl	80018f0 <HAL_GetTick>
 8003134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	e009      	b.n	800314e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313a:	f7fe fbd9 	bl	80018f0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e36b      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
 800314e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003152:	2202      	movs	r2, #2
 8003154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	fa93 f2a3 	rbit	r2, r3
 8003160:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800316a:	2202      	movs	r2, #2
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003182:	2202      	movs	r2, #2
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003194:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003196:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 8003198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800319e:	2102      	movs	r1, #2
 80031a0:	6019      	str	r1, [r3, #0]
 80031a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f1a3 	rbit	r1, r3
 80031ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031b0:	6019      	str	r1, [r3, #0]
  return result;
 80031b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1b2      	bne.n	800313a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8158 	beq.w	8003494 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a56      	ldr	r2, [pc, #344]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800320a:	f107 0308 	add.w	r3, r7, #8
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f107 0308 	add.w	r3, r7, #8
 8003214:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b4f      	ldr	r3, [pc, #316]	; (800335c <HAL_RCC_OscConfig+0x938>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d11a      	bne.n	800325e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003228:	4b4c      	ldr	r3, [pc, #304]	; (800335c <HAL_RCC_OscConfig+0x938>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4b      	ldr	r2, [pc, #300]	; (800335c <HAL_RCC_OscConfig+0x938>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003234:	f7fe fb5c 	bl	80018f0 <HAL_GetTick>
 8003238:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	e009      	b.n	8003252 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fe fb57 	bl	80018f0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e2e9      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	4b42      	ldr	r3, [pc, #264]	; (800335c <HAL_RCC_OscConfig+0x938>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0ef      	beq.n	800323e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x852>
 8003268:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a39      	ldr	r2, [pc, #228]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	e02f      	b.n	80032d6 <HAL_RCC_OscConfig+0x8b2>
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10c      	bne.n	800329a <HAL_RCC_OscConfig+0x876>
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4a33      	ldr	r2, [pc, #204]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	6213      	str	r3, [r2, #32]
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4a30      	ldr	r2, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 8003292:	f023 0304 	bic.w	r3, r3, #4
 8003296:	6213      	str	r3, [r2, #32]
 8003298:	e01d      	b.n	80032d6 <HAL_RCC_OscConfig+0x8b2>
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x89a>
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a2a      	ldr	r2, [pc, #168]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6213      	str	r3, [r2, #32]
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0x8b2>
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a24      	ldr	r2, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d06b      	beq.n	80033b8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fb06 	bl	80018f0 <HAL_GetTick>
 80032e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	e00b      	b.n	8003302 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fb01 	bl	80018f0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e291      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
 8003302:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003306:	2202      	movs	r2, #2
 8003308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800331e:	2202      	movs	r2, #2
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003330:	601a      	str	r2, [r3, #0]
  return result;
 8003332:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003336:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d109      	bne.n	8003360 <HAL_RCC_OscConfig+0x93c>
 800334c:	4b01      	ldr	r3, [pc, #4]	; (8003354 <HAL_RCC_OscConfig+0x930>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	e014      	b.n	800337c <HAL_RCC_OscConfig+0x958>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	10908120 	.word	0x10908120
 800335c:	40007000 	.word	0x40007000
 8003360:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003364:	2202      	movs	r2, #2
 8003366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	4bbb      	ldr	r3, [pc, #748]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003380:	2102      	movs	r1, #2
 8003382:	6011      	str	r1, [r2, #0]
 8003384:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	fa92 f1a2 	rbit	r1, r2
 800338e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003392:	6011      	str	r1, [r2, #0]
  return result;
 8003394:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	fab2 f282 	clz	r2, r2
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f002 021f 	and.w	r2, r2, #31
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f202 	lsl.w	r2, r1, r2
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d099      	beq.n	80032ea <HAL_RCC_OscConfig+0x8c6>
 80033b6:	e063      	b.n	8003480 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe fa9a 	bl	80018f0 <HAL_GetTick>
 80033bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c0:	e00b      	b.n	80033da <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fa95 	bl	80018f0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e225      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
 80033da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033de:	2202      	movs	r2, #2
 80033e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	fa93 f2a3 	rbit	r2, r3
 80033ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033f6:	2202      	movs	r2, #2
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003408:	601a      	str	r2, [r3, #0]
  return result;
 800340a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800340e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d102      	bne.n	800342a <HAL_RCC_OscConfig+0xa06>
 8003424:	4b90      	ldr	r3, [pc, #576]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	e00d      	b.n	8003446 <HAL_RCC_OscConfig+0xa22>
 800342a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800342e:	2202      	movs	r2, #2
 8003430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f2a3 	rbit	r2, r3
 800343c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	4b89      	ldr	r3, [pc, #548]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800344a:	2102      	movs	r1, #2
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	fa92 f1a2 	rbit	r1, r2
 8003458:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800345c:	6011      	str	r1, [r2, #0]
  return result;
 800345e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	fab2 f282 	clz	r2, r2
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	f002 021f 	and.w	r2, r2, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1a0      	bne.n	80033c2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003480:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003488:	4b77      	ldr	r3, [pc, #476]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	4a76      	ldr	r2, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 800348e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003492:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 81c2 	beq.w	8003824 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a0:	4b71      	ldr	r3, [pc, #452]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	f000 819c 	beq.w	80037e6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f040 8114 	bne.w	80036e2 <HAL_RCC_OscConfig+0xcbe>
 80034ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fa93 f2a3 	rbit	r2, r3
 80034ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034d2:	601a      	str	r2, [r3, #0]
  return result;
 80034d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe f9fe 	bl	80018f0 <HAL_GetTick>
 80034f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	e009      	b.n	800350e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe f9f9 	bl	80018f0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e18b      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
 800350e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003526:	601a      	str	r2, [r3, #0]
  return result;
 8003528:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800352c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_RCC_OscConfig+0xb24>
 8003542:	4b49      	ldr	r3, [pc, #292]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	e01b      	b.n	8003580 <HAL_RCC_OscConfig+0xb5c>
 8003548:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800354c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	fa93 f2a3 	rbit	r2, r3
 8003576:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fa92 f1a2 	rbit	r1, r2
 8003594:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003598:	6011      	str	r1, [r2, #0]
  return result;
 800359a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	f042 0220 	orr.w	r2, r2, #32
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	f002 021f 	and.w	r2, r2, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f202 	lsl.w	r2, r1, r2
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d19e      	bne.n	80034fa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	4925      	ldr	r1, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
 80035d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035f0:	601a      	str	r2, [r3, #0]
  return result;
 80035f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035f6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003602:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	2301      	movs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe f96f 	bl	80018f0 <HAL_GetTick>
 8003612:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003616:	e009      	b.n	800362c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe f96a 	bl	80018f0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e0fc      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
 800362c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003644:	601a      	str	r2, [r3, #0]
  return result;
 8003646:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800364a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <HAL_RCC_OscConfig+0xc48>
 8003660:	4b01      	ldr	r3, [pc, #4]	; (8003668 <HAL_RCC_OscConfig+0xc44>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	e01e      	b.n	80036a4 <HAL_RCC_OscConfig+0xc80>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	fa93 f2a3 	rbit	r2, r3
 8003680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800368a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_OscConfig+0xe0c>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036ac:	6011      	str	r1, [r2, #0]
 80036ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	fa92 f1a2 	rbit	r1, r2
 80036b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80036bc:	6011      	str	r1, [r2, #0]
  return result;
 80036be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	fab2 f282 	clz	r2, r2
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f042 0220 	orr.w	r2, r2, #32
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f002 021f 	and.w	r2, r2, #31
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d09b      	beq.n	8003618 <HAL_RCC_OscConfig+0xbf4>
 80036e0:	e0a0      	b.n	8003824 <HAL_RCC_OscConfig+0xe00>
 80036e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	fa93 f2a3 	rbit	r2, r3
 80036f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036fa:	601a      	str	r2, [r3, #0]
  return result;
 80036fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003700:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800370c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	461a      	mov	r2, r3
 8003714:	2300      	movs	r3, #0
 8003716:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe f8ea 	bl	80018f0 <HAL_GetTick>
 800371c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003720:	e009      	b.n	8003736 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003722:	f7fe f8e5 	bl	80018f0 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e077      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
 8003736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800373a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374e:	601a      	str	r2, [r3, #0]
  return result;
 8003750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003754:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_RCC_OscConfig+0xd4c>
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_OscConfig+0xe0c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	e01b      	b.n	80037a8 <HAL_RCC_OscConfig+0xd84>
 8003770:	f107 0320 	add.w	r3, r7, #32
 8003774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f107 0320 	add.w	r3, r7, #32
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f107 0318 	add.w	r3, r7, #24
 800378e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f107 0318 	add.w	r3, r7, #24
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_OscConfig+0xe0c>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f107 0210 	add.w	r2, r7, #16
 80037ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	f107 0210 	add.w	r2, r7, #16
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	fa92 f1a2 	rbit	r1, r2
 80037bc:	f107 020c 	add.w	r2, r7, #12
 80037c0:	6011      	str	r1, [r2, #0]
  return result;
 80037c2:	f107 020c 	add.w	r2, r7, #12
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f002 021f 	and.w	r2, r2, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d19e      	bne.n	8003722 <HAL_RCC_OscConfig+0xcfe>
 80037e4:	e01e      	b.n	8003824 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e018      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_RCC_OscConfig+0xe0c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	429a      	cmp	r2, r3
 800380c:	d108      	bne.n	8003820 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800380e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b09e      	sub	sp, #120	; 0x78
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e162      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0207 	bic.w	r2, r3, #7
 8003862:	498b      	ldr	r1, [pc, #556]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b89      	ldr	r3, [pc, #548]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e14a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b82      	ldr	r3, [pc, #520]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	497f      	ldr	r1, [pc, #508]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80dc 	beq.w	8003a60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d13c      	bne.n	800392a <HAL_RCC_ClockConfig+0xf6>
 80038b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d102      	bne.n	80038da <HAL_RCC_ClockConfig+0xa6>
 80038d4:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	e00f      	b.n	80038fa <HAL_RCC_ClockConfig+0xc6>
 80038da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	667b      	str	r3, [r7, #100]	; 0x64
 80038e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ec:	663b      	str	r3, [r7, #96]	; 0x60
 80038ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f6:	4b67      	ldr	r3, [pc, #412]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003902:	fa92 f2a2 	rbit	r2, r2
 8003906:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800390a:	fab2 f282 	clz	r2, r2
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f042 0220 	orr.w	r2, r2, #32
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f002 021f 	and.w	r2, r2, #31
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d17b      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0f3      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d13c      	bne.n	80039ac <HAL_RCC_ClockConfig+0x178>
 8003932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003936:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_RCC_ClockConfig+0x128>
 8003956:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	e00f      	b.n	800397c <HAL_RCC_ClockConfig+0x148>
 800395c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	647b      	str	r3, [r7, #68]	; 0x44
 800396a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396e:	643b      	str	r3, [r7, #64]	; 0x40
 8003970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003978:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003980:	63ba      	str	r2, [r7, #56]	; 0x38
 8003982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003984:	fa92 f2a2 	rbit	r2, r2
 8003988:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800398a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398c:	fab2 f282 	clz	r2, r2
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f042 0220 	orr.w	r2, r2, #32
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f002 021f 	and.w	r2, r2, #31
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d13a      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b2      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2de>
 80039ac:	2302      	movs	r3, #2
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x1a0>
 80039ce:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	e00d      	b.n	80039f0 <HAL_RCC_ClockConfig+0x1bc>
 80039d4:	2302      	movs	r3, #2
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
 80039e0:	2302      	movs	r3, #2
 80039e2:	623b      	str	r3, [r7, #32]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	2202      	movs	r2, #2
 80039f2:	61ba      	str	r2, [r7, #24]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	fa92 f2a2 	rbit	r2, r2
 80039fa:	617a      	str	r2, [r7, #20]
  return result;
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	fab2 f282 	clz	r2, r2
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f042 0220 	orr.w	r2, r2, #32
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f002 021f 	and.w	r2, r2, #31
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f202 	lsl.w	r2, r1, r2
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e079      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 0203 	bic.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	491a      	ldr	r1, [pc, #104]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a30:	f7fd ff5e 	bl	80018f0 <HAL_GetTick>
 8003a34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a38:	f7fd ff5a 	bl	80018f0 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e061      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 020c 	and.w	r2, r3, #12
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d1eb      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d214      	bcs.n	8003a98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 0207 	bic.w	r2, r3, #7
 8003a76:	4906      	ldr	r1, [pc, #24]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <HAL_RCC_ClockConfig+0x25c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e040      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2de>
 8003a90:	40022000 	.word	0x40022000
 8003a94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_ClockConfig+0x2e8>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	491a      	ldr	r1, [pc, #104]	; (8003b1c <HAL_RCC_ClockConfig+0x2e8>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_RCC_ClockConfig+0x2e8>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4912      	ldr	r1, [pc, #72]	; (8003b1c <HAL_RCC_ClockConfig+0x2e8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ad6:	f000 f829 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003ada:	4601      	mov	r1, r0
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <HAL_RCC_ClockConfig+0x2e8>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae4:	22f0      	movs	r2, #240	; 0xf0
 8003ae6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	fa92 f2a2 	rbit	r2, r2
 8003aee:	60fa      	str	r2, [r7, #12]
  return result;
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	fab2 f282 	clz	r2, r2
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	40d3      	lsrs	r3, r2
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x2ec>)
 8003afc:	5cd3      	ldrb	r3, [r2, r3]
 8003afe:	fa21 f303 	lsr.w	r3, r1, r3
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <HAL_RCC_ClockConfig+0x2f0>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RCC_ClockConfig+0x2f4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd feac 	bl	8001868 <HAL_InitTick>
  
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3778      	adds	r7, #120	; 0x78
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	08007ac4 	.word	0x08007ac4
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b08b      	sub	sp, #44	; 0x2c
 8003b30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b46:	4b29      	ldr	r3, [pc, #164]	; (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d002      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x30>
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x36>
 8003b5a:	e03c      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b5e:	623b      	str	r3, [r7, #32]
      break;
 8003b60:	e03c      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b68:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b6c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	fa92 f2a2 	rbit	r2, r2
 8003b74:	607a      	str	r2, [r7, #4]
  return result;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	fab2 f282 	clz	r2, r2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	40d3      	lsrs	r3, r2
 8003b80:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	220f      	movs	r2, #15
 8003b90:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	fa92 f2a2 	rbit	r2, r2
 8003b98:	60fa      	str	r2, [r7, #12]
  return result;
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	40d3      	lsrs	r3, r2
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	623b      	str	r3, [r7, #32]
      break;
 8003bd4:	e002      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bd8:	623b      	str	r3, [r7, #32]
      break;
 8003bda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	372c      	adds	r7, #44	; 0x2c
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	007a1200 	.word	0x007a1200
 8003bf4:	08007adc 	.word	0x08007adc
 8003bf8:	08007aec 	.word	0x08007aec
 8003bfc:	003d0900 	.word	0x003d0900

08003c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000000 	.word	0x20000000

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c1e:	f7ff ffef 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c22:	4601      	mov	r1, r0
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	fa92 f2a2 	rbit	r2, r2
 8003c38:	603a      	str	r2, [r7, #0]
  return result;
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	fab2 f282 	clz	r2, r2
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	40d3      	lsrs	r3, r2
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	08007ad4 	.word	0x08007ad4

08003c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c62:	f7ff ffcd 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c66:	4601      	mov	r1, r0
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	fa92 f2a2 	rbit	r2, r2
 8003c7c:	603a      	str	r2, [r7, #0]
  return result;
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	fab2 f282 	clz	r2, r2
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	40d3      	lsrs	r3, r2
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c8a:	5cd3      	ldrb	r3, [r2, r3]
 8003c8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08007ad4 	.word	0x08007ad4

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e049      	b.n	8003d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fbf4 	bl	80014b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 faa2 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d001      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e040      	b.n	8003dea <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x58>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d009      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x58>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_TIM_Base_Start_IT+0xac>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x58>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_TIM_Base_Start_IT+0xb0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d115      	bne.n	8003dd4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <HAL_TIM_Base_Start_IT+0xb4>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d015      	beq.n	8003de6 <HAL_TIM_Base_Start_IT+0x96>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc0:	d011      	beq.n	8003de6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	e008      	b.n	8003de6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e000      	b.n	8003de8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40014000 	.word	0x40014000
 8003e04:	00010007 	.word	0x00010007

08003e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0202 	mvn.w	r2, #2
 8003e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9ce 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9c0 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f9d1 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0204 	mvn.w	r2, #4
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9a4 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f996 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f9a7 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0208 	mvn.w	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f97a 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f96c 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f97d 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0210 	mvn.w	r2, #16
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2208      	movs	r2, #8
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f950 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f942 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f953 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0201 	mvn.w	r2, #1
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f9e2 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fac2 	bl	800453c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d10e      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b80      	cmp	r3, #128	; 0x80
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fab5 	bl	8004550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d10e      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d107      	bne.n	8004012 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800400a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f901 	bl	8004214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d10e      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b20      	cmp	r3, #32
 800402c:	d107      	bne.n	800403e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f06f 0220 	mvn.w	r2, #32
 8004036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fa75 	bl	8004528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_TIM_ConfigClockSource+0x1c>
 800405e:	2302      	movs	r3, #2
 8004060:	e0b6      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x18a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004084:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	d03e      	beq.n	800411e <HAL_TIM_ConfigClockSource+0xd8>
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	f200 8087 	bhi.w	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	f000 8086 	beq.w	80041bc <HAL_TIM_ConfigClockSource+0x176>
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d87f      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040b6:	2b70      	cmp	r3, #112	; 0x70
 80040b8:	d01a      	beq.n	80040f0 <HAL_TIM_ConfigClockSource+0xaa>
 80040ba:	2b70      	cmp	r3, #112	; 0x70
 80040bc:	d87b      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040be:	2b60      	cmp	r3, #96	; 0x60
 80040c0:	d050      	beq.n	8004164 <HAL_TIM_ConfigClockSource+0x11e>
 80040c2:	2b60      	cmp	r3, #96	; 0x60
 80040c4:	d877      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040c6:	2b50      	cmp	r3, #80	; 0x50
 80040c8:	d03c      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0xfe>
 80040ca:	2b50      	cmp	r3, #80	; 0x50
 80040cc:	d873      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	d058      	beq.n	8004184 <HAL_TIM_ConfigClockSource+0x13e>
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d86f      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040d6:	2b30      	cmp	r3, #48	; 0x30
 80040d8:	d064      	beq.n	80041a4 <HAL_TIM_ConfigClockSource+0x15e>
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d86b      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d060      	beq.n	80041a4 <HAL_TIM_ConfigClockSource+0x15e>
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d867      	bhi.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d05c      	beq.n	80041a4 <HAL_TIM_ConfigClockSource+0x15e>
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d05a      	beq.n	80041a4 <HAL_TIM_ConfigClockSource+0x15e>
 80040ee:	e062      	b.n	80041b6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f000 f984 	bl	800440c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004112:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	609a      	str	r2, [r3, #8]
      break;
 800411c:	e04f      	b.n	80041be <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6899      	ldr	r1, [r3, #8]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f000 f96d 	bl	800440c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004140:	609a      	str	r2, [r3, #8]
      break;
 8004142:	e03c      	b.n	80041be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	461a      	mov	r2, r3
 8004152:	f000 f8e1 	bl	8004318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2150      	movs	r1, #80	; 0x50
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f93a 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8004162:	e02c      	b.n	80041be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	461a      	mov	r2, r3
 8004172:	f000 f900 	bl	8004376 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2160      	movs	r1, #96	; 0x60
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f92a 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8004182:	e01c      	b.n	80041be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	461a      	mov	r2, r3
 8004192:	f000 f8c1 	bl	8004318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2140      	movs	r1, #64	; 0x40
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f91a 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 80041a2:	e00c      	b.n	80041be <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 f911 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 80041b4:	e003      	b.n	80041be <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      break;
 80041ba:	e000      	b.n	80041be <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a32      	ldr	r2, [pc, #200]	; (8004304 <TIM_Base_SetConfig+0xdc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <TIM_Base_SetConfig+0x28>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d003      	beq.n	8004250 <TIM_Base_SetConfig+0x28>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a2f      	ldr	r2, [pc, #188]	; (8004308 <TIM_Base_SetConfig+0xe0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d108      	bne.n	8004262 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <TIM_Base_SetConfig+0xdc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <TIM_Base_SetConfig+0x6a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0x6a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <TIM_Base_SetConfig+0xe0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x6a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a23      	ldr	r2, [pc, #140]	; (800430c <TIM_Base_SetConfig+0xe4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x6a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a22      	ldr	r2, [pc, #136]	; (8004310 <TIM_Base_SetConfig+0xe8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x6a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a21      	ldr	r2, [pc, #132]	; (8004314 <TIM_Base_SetConfig+0xec>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <TIM_Base_SetConfig+0xdc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_Base_SetConfig+0xc0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <TIM_Base_SetConfig+0xe4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_Base_SetConfig+0xc0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <TIM_Base_SetConfig+0xe8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_Base_SetConfig+0xc0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a0c      	ldr	r2, [pc, #48]	; (8004314 <TIM_Base_SetConfig+0xec>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	615a      	str	r2, [r3, #20]
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40000400 	.word	0x40000400
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800

08004318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f023 0201 	bic.w	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 030a 	bic.w	r3, r3, #10
 8004354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004376:	b480      	push	{r7}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0210 	bic.w	r2, r3, #16
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	031b      	lsls	r3, r3, #12
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f043 0307 	orr.w	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	021a      	lsls	r2, r3, #8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	431a      	orrs	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e054      	b.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a24      	ldr	r2, [pc, #144]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004494:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d009      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a13      	ldr	r2, [pc, #76]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a11      	ldr	r2, [pc, #68]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10c      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40000400 	.word	0x40000400
 8004524:	40014000 	.word	0x40014000

08004528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e040      	b.n	80045f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc ffb8 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8c0 	bl	8004728 <UART_SetConfig>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e022      	b.n	80045f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f9ea 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa71 	bl	8004ad8 <UART_CheckIdleState>
 80045f6:	4603      	mov	r3, r0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004614:	2b20      	cmp	r3, #32
 8004616:	f040 8082 	bne.w	800471e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_UART_Transmit+0x26>
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07a      	b.n	8004720 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_UART_Transmit+0x38>
 8004634:	2302      	movs	r3, #2
 8004636:	e073      	b.n	8004720 <HAL_UART_Transmit+0x120>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2221      	movs	r2, #33	; 0x21
 800464c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464e:	f7fd f94f 	bl	80018f0 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d108      	bne.n	8004680 <HAL_UART_Transmit+0x80>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e003      	b.n	8004688 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004690:	e02d      	b.n	80046ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fa64 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e039      	b.n	8004720 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	881a      	ldrh	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046be:	b292      	uxth	r2, r2
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3302      	adds	r3, #2
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e008      	b.n	80046dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	b292      	uxth	r2, r2
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3301      	adds	r3, #1
 80046da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1cb      	bne.n	8004692 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2140      	movs	r1, #64	; 0x40
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fa30 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e005      	b.n	8004720 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
  }
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b8a      	ldr	r3, [pc, #552]	; (800497c <UART_SetConfig+0x254>)
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	6979      	ldr	r1, [r7, #20]
 800475c:	430b      	orrs	r3, r1
 800475e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a78      	ldr	r2, [pc, #480]	; (8004980 <UART_SetConfig+0x258>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d120      	bne.n	80047e6 <UART_SetConfig+0xbe>
 80047a4:	4b77      	ldr	r3, [pc, #476]	; (8004984 <UART_SetConfig+0x25c>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d817      	bhi.n	80047e0 <UART_SetConfig+0xb8>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0x90>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047d5 	.word	0x080047d5
 80047c0:	080047db 	.word	0x080047db
 80047c4:	080047cf 	.word	0x080047cf
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e01d      	b.n	800480a <UART_SetConfig+0xe2>
 80047ce:	2302      	movs	r3, #2
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e01a      	b.n	800480a <UART_SetConfig+0xe2>
 80047d4:	2304      	movs	r3, #4
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e017      	b.n	800480a <UART_SetConfig+0xe2>
 80047da:	2308      	movs	r3, #8
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e014      	b.n	800480a <UART_SetConfig+0xe2>
 80047e0:	2310      	movs	r3, #16
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e011      	b.n	800480a <UART_SetConfig+0xe2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a67      	ldr	r2, [pc, #412]	; (8004988 <UART_SetConfig+0x260>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d102      	bne.n	80047f6 <UART_SetConfig+0xce>
 80047f0:	2300      	movs	r3, #0
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e009      	b.n	800480a <UART_SetConfig+0xe2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a64      	ldr	r2, [pc, #400]	; (800498c <UART_SetConfig+0x264>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d102      	bne.n	8004806 <UART_SetConfig+0xde>
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e001      	b.n	800480a <UART_SetConfig+0xe2>
 8004806:	2310      	movs	r3, #16
 8004808:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004812:	d15b      	bne.n	80048cc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004814:	7ffb      	ldrb	r3, [r7, #31]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d827      	bhi.n	800486a <UART_SetConfig+0x142>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0xf8>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004845 	.word	0x08004845
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004855 	.word	0x08004855
 800482c:	0800486b 	.word	0x0800486b
 8004830:	0800485b 	.word	0x0800485b
 8004834:	0800486b 	.word	0x0800486b
 8004838:	0800486b 	.word	0x0800486b
 800483c:	0800486b 	.word	0x0800486b
 8004840:	08004863 	.word	0x08004863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7ff f9e8 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8004848:	61b8      	str	r0, [r7, #24]
        break;
 800484a:	e013      	b.n	8004874 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7ff fa06 	bl	8003c5c <HAL_RCC_GetPCLK2Freq>
 8004850:	61b8      	str	r0, [r7, #24]
        break;
 8004852:	e00f      	b.n	8004874 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004854:	4b4e      	ldr	r3, [pc, #312]	; (8004990 <UART_SetConfig+0x268>)
 8004856:	61bb      	str	r3, [r7, #24]
        break;
 8004858:	e00c      	b.n	8004874 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485a:	f7ff f967 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 800485e:	61b8      	str	r0, [r7, #24]
        break;
 8004860:	e008      	b.n	8004874 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004866:	61bb      	str	r3, [r7, #24]
        break;
 8004868:	e004      	b.n	8004874 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	77bb      	strb	r3, [r7, #30]
        break;
 8004872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d074      	beq.n	8004964 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	005a      	lsls	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	b29b      	uxth	r3, r3
 8004890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b0f      	cmp	r3, #15
 8004896:	d916      	bls.n	80048c6 <UART_SetConfig+0x19e>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489e:	d212      	bcs.n	80048c6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	89fb      	ldrh	r3, [r7, #14]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	89fa      	ldrh	r2, [r7, #14]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e04e      	b.n	8004964 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	77bb      	strb	r3, [r7, #30]
 80048ca:	e04b      	b.n	8004964 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d827      	bhi.n	8004922 <UART_SetConfig+0x1fa>
 80048d2:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <UART_SetConfig+0x1b0>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	08004905 	.word	0x08004905
 80048e0:	0800490d 	.word	0x0800490d
 80048e4:	08004923 	.word	0x08004923
 80048e8:	08004913 	.word	0x08004913
 80048ec:	08004923 	.word	0x08004923
 80048f0:	08004923 	.word	0x08004923
 80048f4:	08004923 	.word	0x08004923
 80048f8:	0800491b 	.word	0x0800491b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048fc:	f7ff f98c 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8004900:	61b8      	str	r0, [r7, #24]
        break;
 8004902:	e013      	b.n	800492c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004904:	f7ff f9aa 	bl	8003c5c <HAL_RCC_GetPCLK2Freq>
 8004908:	61b8      	str	r0, [r7, #24]
        break;
 800490a:	e00f      	b.n	800492c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800490c:	4b20      	ldr	r3, [pc, #128]	; (8004990 <UART_SetConfig+0x268>)
 800490e:	61bb      	str	r3, [r7, #24]
        break;
 8004910:	e00c      	b.n	800492c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004912:	f7ff f90b 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8004916:	61b8      	str	r0, [r7, #24]
        break;
 8004918:	e008      	b.n	800492c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491e:	61bb      	str	r3, [r7, #24]
        break;
 8004920:	e004      	b.n	800492c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	77bb      	strb	r3, [r7, #30]
        break;
 800492a:	bf00      	nop
    }

    if (pclk != 0U)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	085a      	lsrs	r2, r3, #1
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	441a      	add	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	b29b      	uxth	r3, r3
 8004946:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d908      	bls.n	8004960 <UART_SetConfig+0x238>
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d204      	bcs.n	8004960 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	e001      	b.n	8004964 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004970:	7fbb      	ldrb	r3, [r7, #30]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	efff69f3 	.word	0xefff69f3
 8004980:	40013800 	.word	0x40013800
 8004984:	40021000 	.word	0x40021000
 8004988:	40004400 	.word	0x40004400
 800498c:	40004800 	.word	0x40004800
 8004990:	007a1200 	.word	0x007a1200

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc ff02 	bl	80018f0 <HAL_GetTick>
 8004aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10e      	bne.n	8004b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f82d 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e023      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d10e      	bne.n	8004b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f817 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00d      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b09c      	sub	sp, #112	; 0x70
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	e0a5      	b.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	f000 80a1 	beq.w	8004cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fc feb3 	bl	80018f0 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x32>
 8004b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d13e      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	663b      	str	r3, [r7, #96]	; 0x60
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bee:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e067      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d04f      	beq.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c36:	d147      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
 8004c62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e6      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	613b      	str	r3, [r7, #16]
   return(result);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3308      	adds	r3, #8
 8004c92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c94:	623a      	str	r2, [r7, #32]
 8004c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	69f9      	ldr	r1, [r7, #28]
 8004c9a:	6a3a      	ldr	r2, [r7, #32]
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e5      	bne.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e010      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	f43f af4a 	beq.w	8004b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3770      	adds	r7, #112	; 0x70
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <__errno>:
 8004cf4:	4b01      	ldr	r3, [pc, #4]	; (8004cfc <__errno+0x8>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	2000000c 	.word	0x2000000c

08004d00 <__libc_init_array>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4d0d      	ldr	r5, [pc, #52]	; (8004d38 <__libc_init_array+0x38>)
 8004d04:	4c0d      	ldr	r4, [pc, #52]	; (8004d3c <__libc_init_array+0x3c>)
 8004d06:	1b64      	subs	r4, r4, r5
 8004d08:	10a4      	asrs	r4, r4, #2
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	42a6      	cmp	r6, r4
 8004d0e:	d109      	bne.n	8004d24 <__libc_init_array+0x24>
 8004d10:	4d0b      	ldr	r5, [pc, #44]	; (8004d40 <__libc_init_array+0x40>)
 8004d12:	4c0c      	ldr	r4, [pc, #48]	; (8004d44 <__libc_init_array+0x44>)
 8004d14:	f002 feb6 	bl	8007a84 <_init>
 8004d18:	1b64      	subs	r4, r4, r5
 8004d1a:	10a4      	asrs	r4, r4, #2
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	42a6      	cmp	r6, r4
 8004d20:	d105      	bne.n	8004d2e <__libc_init_array+0x2e>
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d28:	4798      	blx	r3
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	e7ee      	b.n	8004d0c <__libc_init_array+0xc>
 8004d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d32:	4798      	blx	r3
 8004d34:	3601      	adds	r6, #1
 8004d36:	e7f2      	b.n	8004d1e <__libc_init_array+0x1e>
 8004d38:	08007edc 	.word	0x08007edc
 8004d3c:	08007edc 	.word	0x08007edc
 8004d40:	08007edc 	.word	0x08007edc
 8004d44:	08007ee0 	.word	0x08007ee0

08004d48 <memset>:
 8004d48:	4402      	add	r2, r0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <__cvt>:
 8004d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	ec55 4b10 	vmov	r4, r5, d0
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	460e      	mov	r6, r1
 8004d64:	4619      	mov	r1, r3
 8004d66:	462b      	mov	r3, r5
 8004d68:	bfbb      	ittet	lt
 8004d6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d6e:	461d      	movlt	r5, r3
 8004d70:	2300      	movge	r3, #0
 8004d72:	232d      	movlt	r3, #45	; 0x2d
 8004d74:	700b      	strb	r3, [r1, #0]
 8004d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d7c:	4691      	mov	r9, r2
 8004d7e:	f023 0820 	bic.w	r8, r3, #32
 8004d82:	bfbc      	itt	lt
 8004d84:	4622      	movlt	r2, r4
 8004d86:	4614      	movlt	r4, r2
 8004d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d8c:	d005      	beq.n	8004d9a <__cvt+0x42>
 8004d8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d92:	d100      	bne.n	8004d96 <__cvt+0x3e>
 8004d94:	3601      	adds	r6, #1
 8004d96:	2102      	movs	r1, #2
 8004d98:	e000      	b.n	8004d9c <__cvt+0x44>
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	ab03      	add	r3, sp, #12
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	ab02      	add	r3, sp, #8
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	ec45 4b10 	vmov	d0, r4, r5
 8004da8:	4653      	mov	r3, sl
 8004daa:	4632      	mov	r2, r6
 8004dac:	f000 fcec 	bl	8005788 <_dtoa_r>
 8004db0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004db4:	4607      	mov	r7, r0
 8004db6:	d102      	bne.n	8004dbe <__cvt+0x66>
 8004db8:	f019 0f01 	tst.w	r9, #1
 8004dbc:	d022      	beq.n	8004e04 <__cvt+0xac>
 8004dbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dc2:	eb07 0906 	add.w	r9, r7, r6
 8004dc6:	d110      	bne.n	8004dea <__cvt+0x92>
 8004dc8:	783b      	ldrb	r3, [r7, #0]
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d10a      	bne.n	8004de4 <__cvt+0x8c>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7fb fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dda:	b918      	cbnz	r0, 8004de4 <__cvt+0x8c>
 8004ddc:	f1c6 0601 	rsb	r6, r6, #1
 8004de0:	f8ca 6000 	str.w	r6, [sl]
 8004de4:	f8da 3000 	ldr.w	r3, [sl]
 8004de8:	4499      	add	r9, r3
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8004df6:	b108      	cbz	r0, 8004dfc <__cvt+0xa4>
 8004df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dfc:	2230      	movs	r2, #48	; 0x30
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	454b      	cmp	r3, r9
 8004e02:	d307      	bcc.n	8004e14 <__cvt+0xbc>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e08:	1bdb      	subs	r3, r3, r7
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	b004      	add	sp, #16
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	1c59      	adds	r1, r3, #1
 8004e16:	9103      	str	r1, [sp, #12]
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e7f0      	b.n	8004dfe <__cvt+0xa6>

08004e1c <__exponent>:
 8004e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2900      	cmp	r1, #0
 8004e22:	bfb8      	it	lt
 8004e24:	4249      	neglt	r1, r1
 8004e26:	f803 2b02 	strb.w	r2, [r3], #2
 8004e2a:	bfb4      	ite	lt
 8004e2c:	222d      	movlt	r2, #45	; 0x2d
 8004e2e:	222b      	movge	r2, #43	; 0x2b
 8004e30:	2909      	cmp	r1, #9
 8004e32:	7042      	strb	r2, [r0, #1]
 8004e34:	dd2a      	ble.n	8004e8c <__exponent+0x70>
 8004e36:	f10d 0407 	add.w	r4, sp, #7
 8004e3a:	46a4      	mov	ip, r4
 8004e3c:	270a      	movs	r7, #10
 8004e3e:	46a6      	mov	lr, r4
 8004e40:	460a      	mov	r2, r1
 8004e42:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e46:	fb07 1516 	mls	r5, r7, r6, r1
 8004e4a:	3530      	adds	r5, #48	; 0x30
 8004e4c:	2a63      	cmp	r2, #99	; 0x63
 8004e4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e56:	4631      	mov	r1, r6
 8004e58:	dcf1      	bgt.n	8004e3e <__exponent+0x22>
 8004e5a:	3130      	adds	r1, #48	; 0x30
 8004e5c:	f1ae 0502 	sub.w	r5, lr, #2
 8004e60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e64:	1c44      	adds	r4, r0, #1
 8004e66:	4629      	mov	r1, r5
 8004e68:	4561      	cmp	r1, ip
 8004e6a:	d30a      	bcc.n	8004e82 <__exponent+0x66>
 8004e6c:	f10d 0209 	add.w	r2, sp, #9
 8004e70:	eba2 020e 	sub.w	r2, r2, lr
 8004e74:	4565      	cmp	r5, ip
 8004e76:	bf88      	it	hi
 8004e78:	2200      	movhi	r2, #0
 8004e7a:	4413      	add	r3, r2
 8004e7c:	1a18      	subs	r0, r3, r0
 8004e7e:	b003      	add	sp, #12
 8004e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e8a:	e7ed      	b.n	8004e68 <__exponent+0x4c>
 8004e8c:	2330      	movs	r3, #48	; 0x30
 8004e8e:	3130      	adds	r1, #48	; 0x30
 8004e90:	7083      	strb	r3, [r0, #2]
 8004e92:	70c1      	strb	r1, [r0, #3]
 8004e94:	1d03      	adds	r3, r0, #4
 8004e96:	e7f1      	b.n	8004e7c <__exponent+0x60>

08004e98 <_printf_float>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	ed2d 8b02 	vpush	{d8}
 8004ea0:	b08d      	sub	sp, #52	; 0x34
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	461f      	mov	r7, r3
 8004eac:	4605      	mov	r5, r0
 8004eae:	f001 fa57 	bl	8006360 <_localeconv_r>
 8004eb2:	f8d0 a000 	ldr.w	sl, [r0]
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	f7fb f98a 	bl	80001d0 <strlen>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ecc:	3307      	adds	r3, #7
 8004ece:	f023 0307 	bic.w	r3, r3, #7
 8004ed2:	f103 0208 	add.w	r2, r3, #8
 8004ed6:	f8c8 2000 	str.w	r2, [r8]
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ee2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ee6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004eea:	9307      	str	r3, [sp, #28]
 8004eec:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ef0:	ee08 0a10 	vmov	s16, r0
 8004ef4:	4b9f      	ldr	r3, [pc, #636]	; (8005174 <_printf_float+0x2dc>)
 8004ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	f7fb fe15 	bl	8000b2c <__aeabi_dcmpun>
 8004f02:	bb88      	cbnz	r0, 8004f68 <_printf_float+0xd0>
 8004f04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f08:	4b9a      	ldr	r3, [pc, #616]	; (8005174 <_printf_float+0x2dc>)
 8004f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0e:	f7fb fdef 	bl	8000af0 <__aeabi_dcmple>
 8004f12:	bb48      	cbnz	r0, 8004f68 <_printf_float+0xd0>
 8004f14:	2200      	movs	r2, #0
 8004f16:	2300      	movs	r3, #0
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	f7fb fdde 	bl	8000adc <__aeabi_dcmplt>
 8004f20:	b110      	cbz	r0, 8004f28 <_printf_float+0x90>
 8004f22:	232d      	movs	r3, #45	; 0x2d
 8004f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f28:	4b93      	ldr	r3, [pc, #588]	; (8005178 <_printf_float+0x2e0>)
 8004f2a:	4894      	ldr	r0, [pc, #592]	; (800517c <_printf_float+0x2e4>)
 8004f2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f30:	bf94      	ite	ls
 8004f32:	4698      	movls	r8, r3
 8004f34:	4680      	movhi	r8, r0
 8004f36:	2303      	movs	r3, #3
 8004f38:	6123      	str	r3, [r4, #16]
 8004f3a:	9b05      	ldr	r3, [sp, #20]
 8004f3c:	f023 0204 	bic.w	r2, r3, #4
 8004f40:	6022      	str	r2, [r4, #0]
 8004f42:	f04f 0900 	mov.w	r9, #0
 8004f46:	9700      	str	r7, [sp, #0]
 8004f48:	4633      	mov	r3, r6
 8004f4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 f9d8 	bl	8005304 <_printf_common>
 8004f54:	3001      	adds	r0, #1
 8004f56:	f040 8090 	bne.w	800507a <_printf_float+0x1e2>
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	b00d      	add	sp, #52	; 0x34
 8004f60:	ecbd 8b02 	vpop	{d8}
 8004f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	4649      	mov	r1, r9
 8004f70:	f7fb fddc 	bl	8000b2c <__aeabi_dcmpun>
 8004f74:	b140      	cbz	r0, 8004f88 <_printf_float+0xf0>
 8004f76:	464b      	mov	r3, r9
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bfbc      	itt	lt
 8004f7c:	232d      	movlt	r3, #45	; 0x2d
 8004f7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f82:	487f      	ldr	r0, [pc, #508]	; (8005180 <_printf_float+0x2e8>)
 8004f84:	4b7f      	ldr	r3, [pc, #508]	; (8005184 <_printf_float+0x2ec>)
 8004f86:	e7d1      	b.n	8004f2c <_printf_float+0x94>
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f8e:	9206      	str	r2, [sp, #24]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	d13f      	bne.n	8005014 <_printf_float+0x17c>
 8004f94:	2306      	movs	r3, #6
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	9b05      	ldr	r3, [sp, #20]
 8004f9a:	6861      	ldr	r1, [r4, #4]
 8004f9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	9303      	str	r3, [sp, #12]
 8004fa4:	ab0a      	add	r3, sp, #40	; 0x28
 8004fa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004faa:	ab09      	add	r3, sp, #36	; 0x24
 8004fac:	ec49 8b10 	vmov	d0, r8, r9
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	6022      	str	r2, [r4, #0]
 8004fb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f7ff fecd 	bl	8004d58 <__cvt>
 8004fbe:	9b06      	ldr	r3, [sp, #24]
 8004fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fc2:	2b47      	cmp	r3, #71	; 0x47
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	d108      	bne.n	8004fda <_printf_float+0x142>
 8004fc8:	1cc8      	adds	r0, r1, #3
 8004fca:	db02      	blt.n	8004fd2 <_printf_float+0x13a>
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	dd41      	ble.n	8005056 <_printf_float+0x1be>
 8004fd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004fd6:	fa5f fb8b 	uxtb.w	fp, fp
 8004fda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fde:	d820      	bhi.n	8005022 <_printf_float+0x18a>
 8004fe0:	3901      	subs	r1, #1
 8004fe2:	465a      	mov	r2, fp
 8004fe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fe8:	9109      	str	r1, [sp, #36]	; 0x24
 8004fea:	f7ff ff17 	bl	8004e1c <__exponent>
 8004fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ff0:	1813      	adds	r3, r2, r0
 8004ff2:	2a01      	cmp	r2, #1
 8004ff4:	4681      	mov	r9, r0
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	dc02      	bgt.n	8005000 <_printf_float+0x168>
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	07d2      	lsls	r2, r2, #31
 8004ffe:	d501      	bpl.n	8005004 <_printf_float+0x16c>
 8005000:	3301      	adds	r3, #1
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005008:	2b00      	cmp	r3, #0
 800500a:	d09c      	beq.n	8004f46 <_printf_float+0xae>
 800500c:	232d      	movs	r3, #45	; 0x2d
 800500e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005012:	e798      	b.n	8004f46 <_printf_float+0xae>
 8005014:	9a06      	ldr	r2, [sp, #24]
 8005016:	2a47      	cmp	r2, #71	; 0x47
 8005018:	d1be      	bne.n	8004f98 <_printf_float+0x100>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1bc      	bne.n	8004f98 <_printf_float+0x100>
 800501e:	2301      	movs	r3, #1
 8005020:	e7b9      	b.n	8004f96 <_printf_float+0xfe>
 8005022:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005026:	d118      	bne.n	800505a <_printf_float+0x1c2>
 8005028:	2900      	cmp	r1, #0
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	dd0b      	ble.n	8005046 <_printf_float+0x1ae>
 800502e:	6121      	str	r1, [r4, #16]
 8005030:	b913      	cbnz	r3, 8005038 <_printf_float+0x1a0>
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	07d0      	lsls	r0, r2, #31
 8005036:	d502      	bpl.n	800503e <_printf_float+0x1a6>
 8005038:	3301      	adds	r3, #1
 800503a:	440b      	add	r3, r1
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005040:	f04f 0900 	mov.w	r9, #0
 8005044:	e7de      	b.n	8005004 <_printf_float+0x16c>
 8005046:	b913      	cbnz	r3, 800504e <_printf_float+0x1b6>
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	07d2      	lsls	r2, r2, #31
 800504c:	d501      	bpl.n	8005052 <_printf_float+0x1ba>
 800504e:	3302      	adds	r3, #2
 8005050:	e7f4      	b.n	800503c <_printf_float+0x1a4>
 8005052:	2301      	movs	r3, #1
 8005054:	e7f2      	b.n	800503c <_printf_float+0x1a4>
 8005056:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800505a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800505c:	4299      	cmp	r1, r3
 800505e:	db05      	blt.n	800506c <_printf_float+0x1d4>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	6121      	str	r1, [r4, #16]
 8005064:	07d8      	lsls	r0, r3, #31
 8005066:	d5ea      	bpl.n	800503e <_printf_float+0x1a6>
 8005068:	1c4b      	adds	r3, r1, #1
 800506a:	e7e7      	b.n	800503c <_printf_float+0x1a4>
 800506c:	2900      	cmp	r1, #0
 800506e:	bfd4      	ite	le
 8005070:	f1c1 0202 	rsble	r2, r1, #2
 8005074:	2201      	movgt	r2, #1
 8005076:	4413      	add	r3, r2
 8005078:	e7e0      	b.n	800503c <_printf_float+0x1a4>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	055a      	lsls	r2, r3, #21
 800507e:	d407      	bmi.n	8005090 <_printf_float+0x1f8>
 8005080:	6923      	ldr	r3, [r4, #16]
 8005082:	4642      	mov	r2, r8
 8005084:	4631      	mov	r1, r6
 8005086:	4628      	mov	r0, r5
 8005088:	47b8      	blx	r7
 800508a:	3001      	adds	r0, #1
 800508c:	d12c      	bne.n	80050e8 <_printf_float+0x250>
 800508e:	e764      	b.n	8004f5a <_printf_float+0xc2>
 8005090:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005094:	f240 80e0 	bls.w	8005258 <_printf_float+0x3c0>
 8005098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800509c:	2200      	movs	r2, #0
 800509e:	2300      	movs	r3, #0
 80050a0:	f7fb fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d034      	beq.n	8005112 <_printf_float+0x27a>
 80050a8:	4a37      	ldr	r2, [pc, #220]	; (8005188 <_printf_float+0x2f0>)
 80050aa:	2301      	movs	r3, #1
 80050ac:	4631      	mov	r1, r6
 80050ae:	4628      	mov	r0, r5
 80050b0:	47b8      	blx	r7
 80050b2:	3001      	adds	r0, #1
 80050b4:	f43f af51 	beq.w	8004f5a <_printf_float+0xc2>
 80050b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050bc:	429a      	cmp	r2, r3
 80050be:	db02      	blt.n	80050c6 <_printf_float+0x22e>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	07d8      	lsls	r0, r3, #31
 80050c4:	d510      	bpl.n	80050e8 <_printf_float+0x250>
 80050c6:	ee18 3a10 	vmov	r3, s16
 80050ca:	4652      	mov	r2, sl
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	f43f af41 	beq.w	8004f5a <_printf_float+0xc2>
 80050d8:	f04f 0800 	mov.w	r8, #0
 80050dc:	f104 091a 	add.w	r9, r4, #26
 80050e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e2:	3b01      	subs	r3, #1
 80050e4:	4543      	cmp	r3, r8
 80050e6:	dc09      	bgt.n	80050fc <_printf_float+0x264>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	079b      	lsls	r3, r3, #30
 80050ec:	f100 8105 	bmi.w	80052fa <_printf_float+0x462>
 80050f0:	68e0      	ldr	r0, [r4, #12]
 80050f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f4:	4298      	cmp	r0, r3
 80050f6:	bfb8      	it	lt
 80050f8:	4618      	movlt	r0, r3
 80050fa:	e730      	b.n	8004f5e <_printf_float+0xc6>
 80050fc:	2301      	movs	r3, #1
 80050fe:	464a      	mov	r2, r9
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f af27 	beq.w	8004f5a <_printf_float+0xc2>
 800510c:	f108 0801 	add.w	r8, r8, #1
 8005110:	e7e6      	b.n	80050e0 <_printf_float+0x248>
 8005112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	dc39      	bgt.n	800518c <_printf_float+0x2f4>
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <_printf_float+0x2f0>)
 800511a:	2301      	movs	r3, #1
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f af19 	beq.w	8004f5a <_printf_float+0xc2>
 8005128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800512c:	4313      	orrs	r3, r2
 800512e:	d102      	bne.n	8005136 <_printf_float+0x29e>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	07d9      	lsls	r1, r3, #31
 8005134:	d5d8      	bpl.n	80050e8 <_printf_float+0x250>
 8005136:	ee18 3a10 	vmov	r3, s16
 800513a:	4652      	mov	r2, sl
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f af09 	beq.w	8004f5a <_printf_float+0xc2>
 8005148:	f04f 0900 	mov.w	r9, #0
 800514c:	f104 0a1a 	add.w	sl, r4, #26
 8005150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005152:	425b      	negs	r3, r3
 8005154:	454b      	cmp	r3, r9
 8005156:	dc01      	bgt.n	800515c <_printf_float+0x2c4>
 8005158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515a:	e792      	b.n	8005082 <_printf_float+0x1ea>
 800515c:	2301      	movs	r3, #1
 800515e:	4652      	mov	r2, sl
 8005160:	4631      	mov	r1, r6
 8005162:	4628      	mov	r0, r5
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f aef7 	beq.w	8004f5a <_printf_float+0xc2>
 800516c:	f109 0901 	add.w	r9, r9, #1
 8005170:	e7ee      	b.n	8005150 <_printf_float+0x2b8>
 8005172:	bf00      	nop
 8005174:	7fefffff 	.word	0x7fefffff
 8005178:	08007b00 	.word	0x08007b00
 800517c:	08007b04 	.word	0x08007b04
 8005180:	08007b0c 	.word	0x08007b0c
 8005184:	08007b08 	.word	0x08007b08
 8005188:	08007b10 	.word	0x08007b10
 800518c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800518e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005190:	429a      	cmp	r2, r3
 8005192:	bfa8      	it	ge
 8005194:	461a      	movge	r2, r3
 8005196:	2a00      	cmp	r2, #0
 8005198:	4691      	mov	r9, r2
 800519a:	dc37      	bgt.n	800520c <_printf_float+0x374>
 800519c:	f04f 0b00 	mov.w	fp, #0
 80051a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051a4:	f104 021a 	add.w	r2, r4, #26
 80051a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051aa:	9305      	str	r3, [sp, #20]
 80051ac:	eba3 0309 	sub.w	r3, r3, r9
 80051b0:	455b      	cmp	r3, fp
 80051b2:	dc33      	bgt.n	800521c <_printf_float+0x384>
 80051b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b8:	429a      	cmp	r2, r3
 80051ba:	db3b      	blt.n	8005234 <_printf_float+0x39c>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	07da      	lsls	r2, r3, #31
 80051c0:	d438      	bmi.n	8005234 <_printf_float+0x39c>
 80051c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051c4:	9b05      	ldr	r3, [sp, #20]
 80051c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	eba2 0901 	sub.w	r9, r2, r1
 80051ce:	4599      	cmp	r9, r3
 80051d0:	bfa8      	it	ge
 80051d2:	4699      	movge	r9, r3
 80051d4:	f1b9 0f00 	cmp.w	r9, #0
 80051d8:	dc35      	bgt.n	8005246 <_printf_float+0x3ae>
 80051da:	f04f 0800 	mov.w	r8, #0
 80051de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051e2:	f104 0a1a 	add.w	sl, r4, #26
 80051e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	eba3 0309 	sub.w	r3, r3, r9
 80051f0:	4543      	cmp	r3, r8
 80051f2:	f77f af79 	ble.w	80050e8 <_printf_float+0x250>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4652      	mov	r2, sl
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f aeaa 	beq.w	8004f5a <_printf_float+0xc2>
 8005206:	f108 0801 	add.w	r8, r8, #1
 800520a:	e7ec      	b.n	80051e6 <_printf_float+0x34e>
 800520c:	4613      	mov	r3, r2
 800520e:	4631      	mov	r1, r6
 8005210:	4642      	mov	r2, r8
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	d1c0      	bne.n	800519c <_printf_float+0x304>
 800521a:	e69e      	b.n	8004f5a <_printf_float+0xc2>
 800521c:	2301      	movs	r3, #1
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	9205      	str	r2, [sp, #20]
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f ae97 	beq.w	8004f5a <_printf_float+0xc2>
 800522c:	9a05      	ldr	r2, [sp, #20]
 800522e:	f10b 0b01 	add.w	fp, fp, #1
 8005232:	e7b9      	b.n	80051a8 <_printf_float+0x310>
 8005234:	ee18 3a10 	vmov	r3, s16
 8005238:	4652      	mov	r2, sl
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	d1be      	bne.n	80051c2 <_printf_float+0x32a>
 8005244:	e689      	b.n	8004f5a <_printf_float+0xc2>
 8005246:	9a05      	ldr	r2, [sp, #20]
 8005248:	464b      	mov	r3, r9
 800524a:	4442      	add	r2, r8
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	d1c1      	bne.n	80051da <_printf_float+0x342>
 8005256:	e680      	b.n	8004f5a <_printf_float+0xc2>
 8005258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800525a:	2a01      	cmp	r2, #1
 800525c:	dc01      	bgt.n	8005262 <_printf_float+0x3ca>
 800525e:	07db      	lsls	r3, r3, #31
 8005260:	d538      	bpl.n	80052d4 <_printf_float+0x43c>
 8005262:	2301      	movs	r3, #1
 8005264:	4642      	mov	r2, r8
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f ae74 	beq.w	8004f5a <_printf_float+0xc2>
 8005272:	ee18 3a10 	vmov	r3, s16
 8005276:	4652      	mov	r2, sl
 8005278:	4631      	mov	r1, r6
 800527a:	4628      	mov	r0, r5
 800527c:	47b8      	blx	r7
 800527e:	3001      	adds	r0, #1
 8005280:	f43f ae6b 	beq.w	8004f5a <_printf_float+0xc2>
 8005284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005288:	2200      	movs	r2, #0
 800528a:	2300      	movs	r3, #0
 800528c:	f7fb fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005290:	b9d8      	cbnz	r0, 80052ca <_printf_float+0x432>
 8005292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005294:	f108 0201 	add.w	r2, r8, #1
 8005298:	3b01      	subs	r3, #1
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d10e      	bne.n	80052c2 <_printf_float+0x42a>
 80052a4:	e659      	b.n	8004f5a <_printf_float+0xc2>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4652      	mov	r2, sl
 80052aa:	4631      	mov	r1, r6
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	f43f ae52 	beq.w	8004f5a <_printf_float+0xc2>
 80052b6:	f108 0801 	add.w	r8, r8, #1
 80052ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	4543      	cmp	r3, r8
 80052c0:	dcf1      	bgt.n	80052a6 <_printf_float+0x40e>
 80052c2:	464b      	mov	r3, r9
 80052c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052c8:	e6dc      	b.n	8005084 <_printf_float+0x1ec>
 80052ca:	f04f 0800 	mov.w	r8, #0
 80052ce:	f104 0a1a 	add.w	sl, r4, #26
 80052d2:	e7f2      	b.n	80052ba <_printf_float+0x422>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4642      	mov	r2, r8
 80052d8:	e7df      	b.n	800529a <_printf_float+0x402>
 80052da:	2301      	movs	r3, #1
 80052dc:	464a      	mov	r2, r9
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f ae38 	beq.w	8004f5a <_printf_float+0xc2>
 80052ea:	f108 0801 	add.w	r8, r8, #1
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	4543      	cmp	r3, r8
 80052f6:	dcf0      	bgt.n	80052da <_printf_float+0x442>
 80052f8:	e6fa      	b.n	80050f0 <_printf_float+0x258>
 80052fa:	f04f 0800 	mov.w	r8, #0
 80052fe:	f104 0919 	add.w	r9, r4, #25
 8005302:	e7f4      	b.n	80052ee <_printf_float+0x456>

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4616      	mov	r6, r2
 800530a:	4699      	mov	r9, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005314:	4293      	cmp	r3, r2
 8005316:	bfb8      	it	lt
 8005318:	4613      	movlt	r3, r2
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005320:	4607      	mov	r7, r0
 8005322:	460c      	mov	r4, r1
 8005324:	b10a      	cbz	r2, 800532a <_printf_common+0x26>
 8005326:	3301      	adds	r3, #1
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	6833      	ldrmi	r3, [r6, #0]
 8005332:	3302      	addmi	r3, #2
 8005334:	6033      	strmi	r3, [r6, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d106      	bne.n	800534c <_printf_common+0x48>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	6832      	ldr	r2, [r6, #0]
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc26      	bgt.n	800539a <_printf_common+0x96>
 800534c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005350:	1e13      	subs	r3, r2, #0
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	bf18      	it	ne
 8005356:	2301      	movne	r3, #1
 8005358:	0692      	lsls	r2, r2, #26
 800535a:	d42b      	bmi.n	80053b4 <_printf_common+0xb0>
 800535c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d01e      	beq.n	80053a8 <_printf_common+0xa4>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	68e5      	ldr	r5, [r4, #12]
 800536e:	6832      	ldr	r2, [r6, #0]
 8005370:	f003 0306 	and.w	r3, r3, #6
 8005374:	2b04      	cmp	r3, #4
 8005376:	bf08      	it	eq
 8005378:	1aad      	subeq	r5, r5, r2
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	6922      	ldr	r2, [r4, #16]
 800537e:	bf0c      	ite	eq
 8005380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005384:	2500      	movne	r5, #0
 8005386:	4293      	cmp	r3, r2
 8005388:	bfc4      	itt	gt
 800538a:	1a9b      	subgt	r3, r3, r2
 800538c:	18ed      	addgt	r5, r5, r3
 800538e:	2600      	movs	r6, #0
 8005390:	341a      	adds	r4, #26
 8005392:	42b5      	cmp	r5, r6
 8005394:	d11a      	bne.n	80053cc <_printf_common+0xc8>
 8005396:	2000      	movs	r0, #0
 8005398:	e008      	b.n	80053ac <_printf_common+0xa8>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4649      	mov	r1, r9
 80053a0:	4638      	mov	r0, r7
 80053a2:	47c0      	blx	r8
 80053a4:	3001      	adds	r0, #1
 80053a6:	d103      	bne.n	80053b0 <_printf_common+0xac>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7c6      	b.n	8005342 <_printf_common+0x3e>
 80053b4:	18e1      	adds	r1, r4, r3
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	2030      	movs	r0, #48	; 0x30
 80053ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053be:	4422      	add	r2, r4
 80053c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c8:	3302      	adds	r3, #2
 80053ca:	e7c7      	b.n	800535c <_printf_common+0x58>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4622      	mov	r2, r4
 80053d0:	4649      	mov	r1, r9
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d0e6      	beq.n	80053a8 <_printf_common+0xa4>
 80053da:	3601      	adds	r6, #1
 80053dc:	e7d9      	b.n	8005392 <_printf_common+0x8e>
	...

080053e0 <_printf_i>:
 80053e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	460c      	mov	r4, r1
 80053e6:	4691      	mov	r9, r2
 80053e8:	7e27      	ldrb	r7, [r4, #24]
 80053ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053ec:	2f78      	cmp	r7, #120	; 0x78
 80053ee:	4680      	mov	r8, r0
 80053f0:	469a      	mov	sl, r3
 80053f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f6:	d807      	bhi.n	8005408 <_printf_i+0x28>
 80053f8:	2f62      	cmp	r7, #98	; 0x62
 80053fa:	d80a      	bhi.n	8005412 <_printf_i+0x32>
 80053fc:	2f00      	cmp	r7, #0
 80053fe:	f000 80d8 	beq.w	80055b2 <_printf_i+0x1d2>
 8005402:	2f58      	cmp	r7, #88	; 0x58
 8005404:	f000 80a3 	beq.w	800554e <_printf_i+0x16e>
 8005408:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800540c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005410:	e03a      	b.n	8005488 <_printf_i+0xa8>
 8005412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005416:	2b15      	cmp	r3, #21
 8005418:	d8f6      	bhi.n	8005408 <_printf_i+0x28>
 800541a:	a001      	add	r0, pc, #4	; (adr r0, 8005420 <_printf_i+0x40>)
 800541c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005420:	08005479 	.word	0x08005479
 8005424:	0800548d 	.word	0x0800548d
 8005428:	08005409 	.word	0x08005409
 800542c:	08005409 	.word	0x08005409
 8005430:	08005409 	.word	0x08005409
 8005434:	08005409 	.word	0x08005409
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005409 	.word	0x08005409
 8005440:	08005409 	.word	0x08005409
 8005444:	08005409 	.word	0x08005409
 8005448:	08005409 	.word	0x08005409
 800544c:	08005599 	.word	0x08005599
 8005450:	080054bd 	.word	0x080054bd
 8005454:	0800557b 	.word	0x0800557b
 8005458:	08005409 	.word	0x08005409
 800545c:	08005409 	.word	0x08005409
 8005460:	080055bb 	.word	0x080055bb
 8005464:	08005409 	.word	0x08005409
 8005468:	080054bd 	.word	0x080054bd
 800546c:	08005409 	.word	0x08005409
 8005470:	08005409 	.word	0x08005409
 8005474:	08005583 	.word	0x08005583
 8005478:	680b      	ldr	r3, [r1, #0]
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	600a      	str	r2, [r1, #0]
 8005480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005488:	2301      	movs	r3, #1
 800548a:	e0a3      	b.n	80055d4 <_printf_i+0x1f4>
 800548c:	6825      	ldr	r5, [r4, #0]
 800548e:	6808      	ldr	r0, [r1, #0]
 8005490:	062e      	lsls	r6, r5, #24
 8005492:	f100 0304 	add.w	r3, r0, #4
 8005496:	d50a      	bpl.n	80054ae <_printf_i+0xce>
 8005498:	6805      	ldr	r5, [r0, #0]
 800549a:	600b      	str	r3, [r1, #0]
 800549c:	2d00      	cmp	r5, #0
 800549e:	da03      	bge.n	80054a8 <_printf_i+0xc8>
 80054a0:	232d      	movs	r3, #45	; 0x2d
 80054a2:	426d      	negs	r5, r5
 80054a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a8:	485e      	ldr	r0, [pc, #376]	; (8005624 <_printf_i+0x244>)
 80054aa:	230a      	movs	r3, #10
 80054ac:	e019      	b.n	80054e2 <_printf_i+0x102>
 80054ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054b2:	6805      	ldr	r5, [r0, #0]
 80054b4:	600b      	str	r3, [r1, #0]
 80054b6:	bf18      	it	ne
 80054b8:	b22d      	sxthne	r5, r5
 80054ba:	e7ef      	b.n	800549c <_printf_i+0xbc>
 80054bc:	680b      	ldr	r3, [r1, #0]
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	1d18      	adds	r0, r3, #4
 80054c2:	6008      	str	r0, [r1, #0]
 80054c4:	0628      	lsls	r0, r5, #24
 80054c6:	d501      	bpl.n	80054cc <_printf_i+0xec>
 80054c8:	681d      	ldr	r5, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <_printf_i+0xf2>
 80054cc:	0669      	lsls	r1, r5, #25
 80054ce:	d5fb      	bpl.n	80054c8 <_printf_i+0xe8>
 80054d0:	881d      	ldrh	r5, [r3, #0]
 80054d2:	4854      	ldr	r0, [pc, #336]	; (8005624 <_printf_i+0x244>)
 80054d4:	2f6f      	cmp	r7, #111	; 0x6f
 80054d6:	bf0c      	ite	eq
 80054d8:	2308      	moveq	r3, #8
 80054da:	230a      	movne	r3, #10
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054e2:	6866      	ldr	r6, [r4, #4]
 80054e4:	60a6      	str	r6, [r4, #8]
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	bfa2      	ittt	ge
 80054ea:	6821      	ldrge	r1, [r4, #0]
 80054ec:	f021 0104 	bicge.w	r1, r1, #4
 80054f0:	6021      	strge	r1, [r4, #0]
 80054f2:	b90d      	cbnz	r5, 80054f8 <_printf_i+0x118>
 80054f4:	2e00      	cmp	r6, #0
 80054f6:	d04d      	beq.n	8005594 <_printf_i+0x1b4>
 80054f8:	4616      	mov	r6, r2
 80054fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005502:	5dc7      	ldrb	r7, [r0, r7]
 8005504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005508:	462f      	mov	r7, r5
 800550a:	42bb      	cmp	r3, r7
 800550c:	460d      	mov	r5, r1
 800550e:	d9f4      	bls.n	80054fa <_printf_i+0x11a>
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10b      	bne.n	800552c <_printf_i+0x14c>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	07df      	lsls	r7, r3, #31
 8005518:	d508      	bpl.n	800552c <_printf_i+0x14c>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	6861      	ldr	r1, [r4, #4]
 800551e:	4299      	cmp	r1, r3
 8005520:	bfde      	ittt	le
 8005522:	2330      	movle	r3, #48	; 0x30
 8005524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552c:	1b92      	subs	r2, r2, r6
 800552e:	6122      	str	r2, [r4, #16]
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	464b      	mov	r3, r9
 8005536:	aa03      	add	r2, sp, #12
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7ff fee2 	bl	8005304 <_printf_common>
 8005540:	3001      	adds	r0, #1
 8005542:	d14c      	bne.n	80055de <_printf_i+0x1fe>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	b004      	add	sp, #16
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	4835      	ldr	r0, [pc, #212]	; (8005624 <_printf_i+0x244>)
 8005550:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	680e      	ldr	r6, [r1, #0]
 8005558:	061f      	lsls	r7, r3, #24
 800555a:	f856 5b04 	ldr.w	r5, [r6], #4
 800555e:	600e      	str	r6, [r1, #0]
 8005560:	d514      	bpl.n	800558c <_printf_i+0x1ac>
 8005562:	07d9      	lsls	r1, r3, #31
 8005564:	bf44      	itt	mi
 8005566:	f043 0320 	orrmi.w	r3, r3, #32
 800556a:	6023      	strmi	r3, [r4, #0]
 800556c:	b91d      	cbnz	r5, 8005576 <_printf_i+0x196>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	f023 0320 	bic.w	r3, r3, #32
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	2310      	movs	r3, #16
 8005578:	e7b0      	b.n	80054dc <_printf_i+0xfc>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	f043 0320 	orr.w	r3, r3, #32
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	2378      	movs	r3, #120	; 0x78
 8005584:	4828      	ldr	r0, [pc, #160]	; (8005628 <_printf_i+0x248>)
 8005586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800558a:	e7e3      	b.n	8005554 <_printf_i+0x174>
 800558c:	065e      	lsls	r6, r3, #25
 800558e:	bf48      	it	mi
 8005590:	b2ad      	uxthmi	r5, r5
 8005592:	e7e6      	b.n	8005562 <_printf_i+0x182>
 8005594:	4616      	mov	r6, r2
 8005596:	e7bb      	b.n	8005510 <_printf_i+0x130>
 8005598:	680b      	ldr	r3, [r1, #0]
 800559a:	6826      	ldr	r6, [r4, #0]
 800559c:	6960      	ldr	r0, [r4, #20]
 800559e:	1d1d      	adds	r5, r3, #4
 80055a0:	600d      	str	r5, [r1, #0]
 80055a2:	0635      	lsls	r5, r6, #24
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	d501      	bpl.n	80055ac <_printf_i+0x1cc>
 80055a8:	6018      	str	r0, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <_printf_i+0x1d2>
 80055ac:	0671      	lsls	r1, r6, #25
 80055ae:	d5fb      	bpl.n	80055a8 <_printf_i+0x1c8>
 80055b0:	8018      	strh	r0, [r3, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	4616      	mov	r6, r2
 80055b8:	e7ba      	b.n	8005530 <_printf_i+0x150>
 80055ba:	680b      	ldr	r3, [r1, #0]
 80055bc:	1d1a      	adds	r2, r3, #4
 80055be:	600a      	str	r2, [r1, #0]
 80055c0:	681e      	ldr	r6, [r3, #0]
 80055c2:	6862      	ldr	r2, [r4, #4]
 80055c4:	2100      	movs	r1, #0
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7fa fe0a 	bl	80001e0 <memchr>
 80055cc:	b108      	cbz	r0, 80055d2 <_printf_i+0x1f2>
 80055ce:	1b80      	subs	r0, r0, r6
 80055d0:	6060      	str	r0, [r4, #4]
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	2300      	movs	r3, #0
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	e7a8      	b.n	8005530 <_printf_i+0x150>
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	4632      	mov	r2, r6
 80055e2:	4649      	mov	r1, r9
 80055e4:	4640      	mov	r0, r8
 80055e6:	47d0      	blx	sl
 80055e8:	3001      	adds	r0, #1
 80055ea:	d0ab      	beq.n	8005544 <_printf_i+0x164>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	079b      	lsls	r3, r3, #30
 80055f0:	d413      	bmi.n	800561a <_printf_i+0x23a>
 80055f2:	68e0      	ldr	r0, [r4, #12]
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	4298      	cmp	r0, r3
 80055f8:	bfb8      	it	lt
 80055fa:	4618      	movlt	r0, r3
 80055fc:	e7a4      	b.n	8005548 <_printf_i+0x168>
 80055fe:	2301      	movs	r3, #1
 8005600:	4632      	mov	r2, r6
 8005602:	4649      	mov	r1, r9
 8005604:	4640      	mov	r0, r8
 8005606:	47d0      	blx	sl
 8005608:	3001      	adds	r0, #1
 800560a:	d09b      	beq.n	8005544 <_printf_i+0x164>
 800560c:	3501      	adds	r5, #1
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	9903      	ldr	r1, [sp, #12]
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	42ab      	cmp	r3, r5
 8005616:	dcf2      	bgt.n	80055fe <_printf_i+0x21e>
 8005618:	e7eb      	b.n	80055f2 <_printf_i+0x212>
 800561a:	2500      	movs	r5, #0
 800561c:	f104 0619 	add.w	r6, r4, #25
 8005620:	e7f5      	b.n	800560e <_printf_i+0x22e>
 8005622:	bf00      	nop
 8005624:	08007b12 	.word	0x08007b12
 8005628:	08007b23 	.word	0x08007b23

0800562c <siprintf>:
 800562c:	b40e      	push	{r1, r2, r3}
 800562e:	b500      	push	{lr}
 8005630:	b09c      	sub	sp, #112	; 0x70
 8005632:	ab1d      	add	r3, sp, #116	; 0x74
 8005634:	9002      	str	r0, [sp, #8]
 8005636:	9006      	str	r0, [sp, #24]
 8005638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800563c:	4809      	ldr	r0, [pc, #36]	; (8005664 <siprintf+0x38>)
 800563e:	9107      	str	r1, [sp, #28]
 8005640:	9104      	str	r1, [sp, #16]
 8005642:	4909      	ldr	r1, [pc, #36]	; (8005668 <siprintf+0x3c>)
 8005644:	f853 2b04 	ldr.w	r2, [r3], #4
 8005648:	9105      	str	r1, [sp, #20]
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	a902      	add	r1, sp, #8
 8005650:	f001 fb34 	bl	8006cbc <_svfiprintf_r>
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	b01c      	add	sp, #112	; 0x70
 800565c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005660:	b003      	add	sp, #12
 8005662:	4770      	bx	lr
 8005664:	2000000c 	.word	0x2000000c
 8005668:	ffff0208 	.word	0xffff0208

0800566c <quorem>:
 800566c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005670:	6903      	ldr	r3, [r0, #16]
 8005672:	690c      	ldr	r4, [r1, #16]
 8005674:	42a3      	cmp	r3, r4
 8005676:	4607      	mov	r7, r0
 8005678:	f2c0 8081 	blt.w	800577e <quorem+0x112>
 800567c:	3c01      	subs	r4, #1
 800567e:	f101 0814 	add.w	r8, r1, #20
 8005682:	f100 0514 	add.w	r5, r0, #20
 8005686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005694:	3301      	adds	r3, #1
 8005696:	429a      	cmp	r2, r3
 8005698:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800569c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80056a4:	d331      	bcc.n	800570a <quorem+0x9e>
 80056a6:	f04f 0e00 	mov.w	lr, #0
 80056aa:	4640      	mov	r0, r8
 80056ac:	46ac      	mov	ip, r5
 80056ae:	46f2      	mov	sl, lr
 80056b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80056b4:	b293      	uxth	r3, r2
 80056b6:	fb06 e303 	mla	r3, r6, r3, lr
 80056ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80056be:	b29b      	uxth	r3, r3
 80056c0:	ebaa 0303 	sub.w	r3, sl, r3
 80056c4:	0c12      	lsrs	r2, r2, #16
 80056c6:	f8dc a000 	ldr.w	sl, [ip]
 80056ca:	fb06 e202 	mla	r2, r6, r2, lr
 80056ce:	fa13 f38a 	uxtah	r3, r3, sl
 80056d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056d6:	fa1f fa82 	uxth.w	sl, r2
 80056da:	f8dc 2000 	ldr.w	r2, [ip]
 80056de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80056e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ec:	4581      	cmp	r9, r0
 80056ee:	f84c 3b04 	str.w	r3, [ip], #4
 80056f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056f6:	d2db      	bcs.n	80056b0 <quorem+0x44>
 80056f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80056fc:	b92b      	cbnz	r3, 800570a <quorem+0x9e>
 80056fe:	9b01      	ldr	r3, [sp, #4]
 8005700:	3b04      	subs	r3, #4
 8005702:	429d      	cmp	r5, r3
 8005704:	461a      	mov	r2, r3
 8005706:	d32e      	bcc.n	8005766 <quorem+0xfa>
 8005708:	613c      	str	r4, [r7, #16]
 800570a:	4638      	mov	r0, r7
 800570c:	f001 f8c0 	bl	8006890 <__mcmp>
 8005710:	2800      	cmp	r0, #0
 8005712:	db24      	blt.n	800575e <quorem+0xf2>
 8005714:	3601      	adds	r6, #1
 8005716:	4628      	mov	r0, r5
 8005718:	f04f 0c00 	mov.w	ip, #0
 800571c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005720:	f8d0 e000 	ldr.w	lr, [r0]
 8005724:	b293      	uxth	r3, r2
 8005726:	ebac 0303 	sub.w	r3, ip, r3
 800572a:	0c12      	lsrs	r2, r2, #16
 800572c:	fa13 f38e 	uxtah	r3, r3, lr
 8005730:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005734:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005738:	b29b      	uxth	r3, r3
 800573a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800573e:	45c1      	cmp	r9, r8
 8005740:	f840 3b04 	str.w	r3, [r0], #4
 8005744:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005748:	d2e8      	bcs.n	800571c <quorem+0xb0>
 800574a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800574e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005752:	b922      	cbnz	r2, 800575e <quorem+0xf2>
 8005754:	3b04      	subs	r3, #4
 8005756:	429d      	cmp	r5, r3
 8005758:	461a      	mov	r2, r3
 800575a:	d30a      	bcc.n	8005772 <quorem+0x106>
 800575c:	613c      	str	r4, [r7, #16]
 800575e:	4630      	mov	r0, r6
 8005760:	b003      	add	sp, #12
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	3b04      	subs	r3, #4
 800576a:	2a00      	cmp	r2, #0
 800576c:	d1cc      	bne.n	8005708 <quorem+0x9c>
 800576e:	3c01      	subs	r4, #1
 8005770:	e7c7      	b.n	8005702 <quorem+0x96>
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	3b04      	subs	r3, #4
 8005776:	2a00      	cmp	r2, #0
 8005778:	d1f0      	bne.n	800575c <quorem+0xf0>
 800577a:	3c01      	subs	r4, #1
 800577c:	e7eb      	b.n	8005756 <quorem+0xea>
 800577e:	2000      	movs	r0, #0
 8005780:	e7ee      	b.n	8005760 <quorem+0xf4>
 8005782:	0000      	movs	r0, r0
 8005784:	0000      	movs	r0, r0
	...

08005788 <_dtoa_r>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	ed2d 8b02 	vpush	{d8}
 8005790:	ec57 6b10 	vmov	r6, r7, d0
 8005794:	b095      	sub	sp, #84	; 0x54
 8005796:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005798:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800579c:	9105      	str	r1, [sp, #20]
 800579e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80057a2:	4604      	mov	r4, r0
 80057a4:	9209      	str	r2, [sp, #36]	; 0x24
 80057a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057a8:	b975      	cbnz	r5, 80057c8 <_dtoa_r+0x40>
 80057aa:	2010      	movs	r0, #16
 80057ac:	f000 fddc 	bl	8006368 <malloc>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6260      	str	r0, [r4, #36]	; 0x24
 80057b4:	b920      	cbnz	r0, 80057c0 <_dtoa_r+0x38>
 80057b6:	4bb2      	ldr	r3, [pc, #712]	; (8005a80 <_dtoa_r+0x2f8>)
 80057b8:	21ea      	movs	r1, #234	; 0xea
 80057ba:	48b2      	ldr	r0, [pc, #712]	; (8005a84 <_dtoa_r+0x2fc>)
 80057bc:	f001 fb8e 	bl	8006edc <__assert_func>
 80057c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057c4:	6005      	str	r5, [r0, #0]
 80057c6:	60c5      	str	r5, [r0, #12]
 80057c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	b151      	cbz	r1, 80057e4 <_dtoa_r+0x5c>
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	604a      	str	r2, [r1, #4]
 80057d2:	2301      	movs	r3, #1
 80057d4:	4093      	lsls	r3, r2
 80057d6:	608b      	str	r3, [r1, #8]
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 fe1b 	bl	8006414 <_Bfree>
 80057de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	1e3b      	subs	r3, r7, #0
 80057e6:	bfb9      	ittee	lt
 80057e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057ec:	9303      	strlt	r3, [sp, #12]
 80057ee:	2300      	movge	r3, #0
 80057f0:	f8c8 3000 	strge.w	r3, [r8]
 80057f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80057f8:	4ba3      	ldr	r3, [pc, #652]	; (8005a88 <_dtoa_r+0x300>)
 80057fa:	bfbc      	itt	lt
 80057fc:	2201      	movlt	r2, #1
 80057fe:	f8c8 2000 	strlt.w	r2, [r8]
 8005802:	ea33 0309 	bics.w	r3, r3, r9
 8005806:	d11b      	bne.n	8005840 <_dtoa_r+0xb8>
 8005808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800580a:	f242 730f 	movw	r3, #9999	; 0x270f
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005814:	4333      	orrs	r3, r6
 8005816:	f000 857a 	beq.w	800630e <_dtoa_r+0xb86>
 800581a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800581c:	b963      	cbnz	r3, 8005838 <_dtoa_r+0xb0>
 800581e:	4b9b      	ldr	r3, [pc, #620]	; (8005a8c <_dtoa_r+0x304>)
 8005820:	e024      	b.n	800586c <_dtoa_r+0xe4>
 8005822:	4b9b      	ldr	r3, [pc, #620]	; (8005a90 <_dtoa_r+0x308>)
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	9800      	ldr	r0, [sp, #0]
 800582e:	b015      	add	sp, #84	; 0x54
 8005830:	ecbd 8b02 	vpop	{d8}
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	4b94      	ldr	r3, [pc, #592]	; (8005a8c <_dtoa_r+0x304>)
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	3303      	adds	r3, #3
 800583e:	e7f3      	b.n	8005828 <_dtoa_r+0xa0>
 8005840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005844:	2200      	movs	r2, #0
 8005846:	ec51 0b17 	vmov	r0, r1, d7
 800584a:	2300      	movs	r3, #0
 800584c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005850:	f7fb f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005854:	4680      	mov	r8, r0
 8005856:	b158      	cbz	r0, 8005870 <_dtoa_r+0xe8>
 8005858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800585a:	2301      	movs	r3, #1
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8551 	beq.w	8006308 <_dtoa_r+0xb80>
 8005866:	488b      	ldr	r0, [pc, #556]	; (8005a94 <_dtoa_r+0x30c>)
 8005868:	6018      	str	r0, [r3, #0]
 800586a:	1e43      	subs	r3, r0, #1
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	e7dd      	b.n	800582c <_dtoa_r+0xa4>
 8005870:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005874:	aa12      	add	r2, sp, #72	; 0x48
 8005876:	a913      	add	r1, sp, #76	; 0x4c
 8005878:	4620      	mov	r0, r4
 800587a:	f001 f8ad 	bl	80069d8 <__d2b>
 800587e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005882:	4683      	mov	fp, r0
 8005884:	2d00      	cmp	r5, #0
 8005886:	d07c      	beq.n	8005982 <_dtoa_r+0x1fa>
 8005888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800588a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800588e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005892:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005896:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800589a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800589e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058a2:	4b7d      	ldr	r3, [pc, #500]	; (8005a98 <_dtoa_r+0x310>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fa fced 	bl	8000288 <__aeabi_dsub>
 80058ae:	a36e      	add	r3, pc, #440	; (adr r3, 8005a68 <_dtoa_r+0x2e0>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f7fa fea0 	bl	80005f8 <__aeabi_dmul>
 80058b8:	a36d      	add	r3, pc, #436	; (adr r3, 8005a70 <_dtoa_r+0x2e8>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa fce5 	bl	800028c <__adddf3>
 80058c2:	4606      	mov	r6, r0
 80058c4:	4628      	mov	r0, r5
 80058c6:	460f      	mov	r7, r1
 80058c8:	f7fa fe2c 	bl	8000524 <__aeabi_i2d>
 80058cc:	a36a      	add	r3, pc, #424	; (adr r3, 8005a78 <_dtoa_r+0x2f0>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f7fa fe91 	bl	80005f8 <__aeabi_dmul>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4630      	mov	r0, r6
 80058dc:	4639      	mov	r1, r7
 80058de:	f7fa fcd5 	bl	800028c <__adddf3>
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	f7fb f937 	bl	8000b58 <__aeabi_d2iz>
 80058ea:	2200      	movs	r2, #0
 80058ec:	4682      	mov	sl, r0
 80058ee:	2300      	movs	r3, #0
 80058f0:	4630      	mov	r0, r6
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fb f8f2 	bl	8000adc <__aeabi_dcmplt>
 80058f8:	b148      	cbz	r0, 800590e <_dtoa_r+0x186>
 80058fa:	4650      	mov	r0, sl
 80058fc:	f7fa fe12 	bl	8000524 <__aeabi_i2d>
 8005900:	4632      	mov	r2, r6
 8005902:	463b      	mov	r3, r7
 8005904:	f7fb f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005908:	b908      	cbnz	r0, 800590e <_dtoa_r+0x186>
 800590a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800590e:	f1ba 0f16 	cmp.w	sl, #22
 8005912:	d854      	bhi.n	80059be <_dtoa_r+0x236>
 8005914:	4b61      	ldr	r3, [pc, #388]	; (8005a9c <_dtoa_r+0x314>)
 8005916:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005922:	f7fb f8db 	bl	8000adc <__aeabi_dcmplt>
 8005926:	2800      	cmp	r0, #0
 8005928:	d04b      	beq.n	80059c2 <_dtoa_r+0x23a>
 800592a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800592e:	2300      	movs	r3, #0
 8005930:	930e      	str	r3, [sp, #56]	; 0x38
 8005932:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005934:	1b5d      	subs	r5, r3, r5
 8005936:	1e6b      	subs	r3, r5, #1
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	bf43      	ittte	mi
 800593c:	2300      	movmi	r3, #0
 800593e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005942:	9304      	strmi	r3, [sp, #16]
 8005944:	f04f 0800 	movpl.w	r8, #0
 8005948:	f1ba 0f00 	cmp.w	sl, #0
 800594c:	db3b      	blt.n	80059c6 <_dtoa_r+0x23e>
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005954:	4453      	add	r3, sl
 8005956:	9304      	str	r3, [sp, #16]
 8005958:	2300      	movs	r3, #0
 800595a:	9306      	str	r3, [sp, #24]
 800595c:	9b05      	ldr	r3, [sp, #20]
 800595e:	2b09      	cmp	r3, #9
 8005960:	d869      	bhi.n	8005a36 <_dtoa_r+0x2ae>
 8005962:	2b05      	cmp	r3, #5
 8005964:	bfc4      	itt	gt
 8005966:	3b04      	subgt	r3, #4
 8005968:	9305      	strgt	r3, [sp, #20]
 800596a:	9b05      	ldr	r3, [sp, #20]
 800596c:	f1a3 0302 	sub.w	r3, r3, #2
 8005970:	bfcc      	ite	gt
 8005972:	2500      	movgt	r5, #0
 8005974:	2501      	movle	r5, #1
 8005976:	2b03      	cmp	r3, #3
 8005978:	d869      	bhi.n	8005a4e <_dtoa_r+0x2c6>
 800597a:	e8df f003 	tbb	[pc, r3]
 800597e:	4e2c      	.short	0x4e2c
 8005980:	5a4c      	.short	0x5a4c
 8005982:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005986:	441d      	add	r5, r3
 8005988:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800598c:	2b20      	cmp	r3, #32
 800598e:	bfc1      	itttt	gt
 8005990:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005994:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005998:	fa09 f303 	lslgt.w	r3, r9, r3
 800599c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80059a0:	bfda      	itte	le
 80059a2:	f1c3 0320 	rsble	r3, r3, #32
 80059a6:	fa06 f003 	lslle.w	r0, r6, r3
 80059aa:	4318      	orrgt	r0, r3
 80059ac:	f7fa fdaa 	bl	8000504 <__aeabi_ui2d>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4606      	mov	r6, r0
 80059b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80059b8:	3d01      	subs	r5, #1
 80059ba:	9310      	str	r3, [sp, #64]	; 0x40
 80059bc:	e771      	b.n	80058a2 <_dtoa_r+0x11a>
 80059be:	2301      	movs	r3, #1
 80059c0:	e7b6      	b.n	8005930 <_dtoa_r+0x1a8>
 80059c2:	900e      	str	r0, [sp, #56]	; 0x38
 80059c4:	e7b5      	b.n	8005932 <_dtoa_r+0x1aa>
 80059c6:	f1ca 0300 	rsb	r3, sl, #0
 80059ca:	9306      	str	r3, [sp, #24]
 80059cc:	2300      	movs	r3, #0
 80059ce:	eba8 080a 	sub.w	r8, r8, sl
 80059d2:	930d      	str	r3, [sp, #52]	; 0x34
 80059d4:	e7c2      	b.n	800595c <_dtoa_r+0x1d4>
 80059d6:	2300      	movs	r3, #0
 80059d8:	9308      	str	r3, [sp, #32]
 80059da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dc39      	bgt.n	8005a54 <_dtoa_r+0x2cc>
 80059e0:	f04f 0901 	mov.w	r9, #1
 80059e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80059e8:	464b      	mov	r3, r9
 80059ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059f0:	2200      	movs	r2, #0
 80059f2:	6042      	str	r2, [r0, #4]
 80059f4:	2204      	movs	r2, #4
 80059f6:	f102 0614 	add.w	r6, r2, #20
 80059fa:	429e      	cmp	r6, r3
 80059fc:	6841      	ldr	r1, [r0, #4]
 80059fe:	d92f      	bls.n	8005a60 <_dtoa_r+0x2d8>
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fcc7 	bl	8006394 <_Balloc>
 8005a06:	9000      	str	r0, [sp, #0]
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d14b      	bne.n	8005aa4 <_dtoa_r+0x31c>
 8005a0c:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <_dtoa_r+0x318>)
 8005a0e:	4602      	mov	r2, r0
 8005a10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a14:	e6d1      	b.n	80057ba <_dtoa_r+0x32>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e7de      	b.n	80059d8 <_dtoa_r+0x250>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9308      	str	r3, [sp, #32]
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	eb0a 0903 	add.w	r9, sl, r3
 8005a24:	f109 0301 	add.w	r3, r9, #1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	bfb8      	it	lt
 8005a2e:	2301      	movlt	r3, #1
 8005a30:	e7dd      	b.n	80059ee <_dtoa_r+0x266>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e7f2      	b.n	8005a1c <_dtoa_r+0x294>
 8005a36:	2501      	movs	r5, #1
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	9508      	str	r5, [sp, #32]
 8005a3e:	f04f 39ff 	mov.w	r9, #4294967295
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a48:	2312      	movs	r3, #18
 8005a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4c:	e7cf      	b.n	80059ee <_dtoa_r+0x266>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	9308      	str	r3, [sp, #32]
 8005a52:	e7f4      	b.n	8005a3e <_dtoa_r+0x2b6>
 8005a54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a58:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	e7c6      	b.n	80059ee <_dtoa_r+0x266>
 8005a60:	3101      	adds	r1, #1
 8005a62:	6041      	str	r1, [r0, #4]
 8005a64:	0052      	lsls	r2, r2, #1
 8005a66:	e7c6      	b.n	80059f6 <_dtoa_r+0x26e>
 8005a68:	636f4361 	.word	0x636f4361
 8005a6c:	3fd287a7 	.word	0x3fd287a7
 8005a70:	8b60c8b3 	.word	0x8b60c8b3
 8005a74:	3fc68a28 	.word	0x3fc68a28
 8005a78:	509f79fb 	.word	0x509f79fb
 8005a7c:	3fd34413 	.word	0x3fd34413
 8005a80:	08007b41 	.word	0x08007b41
 8005a84:	08007b58 	.word	0x08007b58
 8005a88:	7ff00000 	.word	0x7ff00000
 8005a8c:	08007b3d 	.word	0x08007b3d
 8005a90:	08007b34 	.word	0x08007b34
 8005a94:	08007b11 	.word	0x08007b11
 8005a98:	3ff80000 	.word	0x3ff80000
 8005a9c:	08007c50 	.word	0x08007c50
 8005aa0:	08007bb7 	.word	0x08007bb7
 8005aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa6:	9a00      	ldr	r2, [sp, #0]
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	9b01      	ldr	r3, [sp, #4]
 8005aac:	2b0e      	cmp	r3, #14
 8005aae:	f200 80ad 	bhi.w	8005c0c <_dtoa_r+0x484>
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	f000 80aa 	beq.w	8005c0c <_dtoa_r+0x484>
 8005ab8:	f1ba 0f00 	cmp.w	sl, #0
 8005abc:	dd36      	ble.n	8005b2c <_dtoa_r+0x3a4>
 8005abe:	4ac3      	ldr	r2, [pc, #780]	; (8005dcc <_dtoa_r+0x644>)
 8005ac0:	f00a 030f 	and.w	r3, sl, #15
 8005ac4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ac8:	ed93 7b00 	vldr	d7, [r3]
 8005acc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005ad0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005ad4:	eeb0 8a47 	vmov.f32	s16, s14
 8005ad8:	eef0 8a67 	vmov.f32	s17, s15
 8005adc:	d016      	beq.n	8005b0c <_dtoa_r+0x384>
 8005ade:	4bbc      	ldr	r3, [pc, #752]	; (8005dd0 <_dtoa_r+0x648>)
 8005ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ae4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ae8:	f7fa feb0 	bl	800084c <__aeabi_ddiv>
 8005aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af0:	f007 070f 	and.w	r7, r7, #15
 8005af4:	2503      	movs	r5, #3
 8005af6:	4eb6      	ldr	r6, [pc, #728]	; (8005dd0 <_dtoa_r+0x648>)
 8005af8:	b957      	cbnz	r7, 8005b10 <_dtoa_r+0x388>
 8005afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afe:	ec53 2b18 	vmov	r2, r3, d8
 8005b02:	f7fa fea3 	bl	800084c <__aeabi_ddiv>
 8005b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b0a:	e029      	b.n	8005b60 <_dtoa_r+0x3d8>
 8005b0c:	2502      	movs	r5, #2
 8005b0e:	e7f2      	b.n	8005af6 <_dtoa_r+0x36e>
 8005b10:	07f9      	lsls	r1, r7, #31
 8005b12:	d508      	bpl.n	8005b26 <_dtoa_r+0x39e>
 8005b14:	ec51 0b18 	vmov	r0, r1, d8
 8005b18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b1c:	f7fa fd6c 	bl	80005f8 <__aeabi_dmul>
 8005b20:	ec41 0b18 	vmov	d8, r0, r1
 8005b24:	3501      	adds	r5, #1
 8005b26:	107f      	asrs	r7, r7, #1
 8005b28:	3608      	adds	r6, #8
 8005b2a:	e7e5      	b.n	8005af8 <_dtoa_r+0x370>
 8005b2c:	f000 80a6 	beq.w	8005c7c <_dtoa_r+0x4f4>
 8005b30:	f1ca 0600 	rsb	r6, sl, #0
 8005b34:	4ba5      	ldr	r3, [pc, #660]	; (8005dcc <_dtoa_r+0x644>)
 8005b36:	4fa6      	ldr	r7, [pc, #664]	; (8005dd0 <_dtoa_r+0x648>)
 8005b38:	f006 020f 	and.w	r2, r6, #15
 8005b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b48:	f7fa fd56 	bl	80005f8 <__aeabi_dmul>
 8005b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b50:	1136      	asrs	r6, r6, #4
 8005b52:	2300      	movs	r3, #0
 8005b54:	2502      	movs	r5, #2
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	f040 8085 	bne.w	8005c66 <_dtoa_r+0x4de>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1d2      	bne.n	8005b06 <_dtoa_r+0x37e>
 8005b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 808c 	beq.w	8005c80 <_dtoa_r+0x4f8>
 8005b68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b6c:	4b99      	ldr	r3, [pc, #612]	; (8005dd4 <_dtoa_r+0x64c>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f7fa ffb2 	bl	8000adc <__aeabi_dcmplt>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	f000 8081 	beq.w	8005c80 <_dtoa_r+0x4f8>
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d07d      	beq.n	8005c80 <_dtoa_r+0x4f8>
 8005b84:	f1b9 0f00 	cmp.w	r9, #0
 8005b88:	dd3c      	ble.n	8005c04 <_dtoa_r+0x47c>
 8005b8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b8e:	9307      	str	r3, [sp, #28]
 8005b90:	2200      	movs	r2, #0
 8005b92:	4b91      	ldr	r3, [pc, #580]	; (8005dd8 <_dtoa_r+0x650>)
 8005b94:	4630      	mov	r0, r6
 8005b96:	4639      	mov	r1, r7
 8005b98:	f7fa fd2e 	bl	80005f8 <__aeabi_dmul>
 8005b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ba6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7fa fcba 	bl	8000524 <__aeabi_i2d>
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	f7fa fd20 	bl	80005f8 <__aeabi_dmul>
 8005bb8:	4b88      	ldr	r3, [pc, #544]	; (8005ddc <_dtoa_r+0x654>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f7fa fb66 	bl	800028c <__adddf3>
 8005bc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d15c      	bne.n	8005c8a <_dtoa_r+0x502>
 8005bd0:	4b83      	ldr	r3, [pc, #524]	; (8005de0 <_dtoa_r+0x658>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f7fa fb56 	bl	8000288 <__aeabi_dsub>
 8005bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005be0:	4606      	mov	r6, r0
 8005be2:	460f      	mov	r7, r1
 8005be4:	f7fa ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f040 8296 	bne.w	800611a <_dtoa_r+0x992>
 8005bee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7fa ff6f 	bl	8000adc <__aeabi_dcmplt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f040 8288 	bne.w	8006114 <_dtoa_r+0x98c>
 8005c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f2c0 8158 	blt.w	8005ec4 <_dtoa_r+0x73c>
 8005c14:	f1ba 0f0e 	cmp.w	sl, #14
 8005c18:	f300 8154 	bgt.w	8005ec4 <_dtoa_r+0x73c>
 8005c1c:	4b6b      	ldr	r3, [pc, #428]	; (8005dcc <_dtoa_r+0x644>)
 8005c1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f280 80e3 	bge.w	8005df4 <_dtoa_r+0x66c>
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f300 80df 	bgt.w	8005df4 <_dtoa_r+0x66c>
 8005c36:	f040 826d 	bne.w	8006114 <_dtoa_r+0x98c>
 8005c3a:	4b69      	ldr	r3, [pc, #420]	; (8005de0 <_dtoa_r+0x658>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fa fcd9 	bl	80005f8 <__aeabi_dmul>
 8005c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c4a:	f7fa ff5b 	bl	8000b04 <__aeabi_dcmpge>
 8005c4e:	9e01      	ldr	r6, [sp, #4]
 8005c50:	4637      	mov	r7, r6
 8005c52:	2800      	cmp	r0, #0
 8005c54:	f040 8243 	bne.w	80060de <_dtoa_r+0x956>
 8005c58:	9d00      	ldr	r5, [sp, #0]
 8005c5a:	2331      	movs	r3, #49	; 0x31
 8005c5c:	f805 3b01 	strb.w	r3, [r5], #1
 8005c60:	f10a 0a01 	add.w	sl, sl, #1
 8005c64:	e23f      	b.n	80060e6 <_dtoa_r+0x95e>
 8005c66:	07f2      	lsls	r2, r6, #31
 8005c68:	d505      	bpl.n	8005c76 <_dtoa_r+0x4ee>
 8005c6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6e:	f7fa fcc3 	bl	80005f8 <__aeabi_dmul>
 8005c72:	3501      	adds	r5, #1
 8005c74:	2301      	movs	r3, #1
 8005c76:	1076      	asrs	r6, r6, #1
 8005c78:	3708      	adds	r7, #8
 8005c7a:	e76c      	b.n	8005b56 <_dtoa_r+0x3ce>
 8005c7c:	2502      	movs	r5, #2
 8005c7e:	e76f      	b.n	8005b60 <_dtoa_r+0x3d8>
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	f8cd a01c 	str.w	sl, [sp, #28]
 8005c86:	930c      	str	r3, [sp, #48]	; 0x30
 8005c88:	e78d      	b.n	8005ba6 <_dtoa_r+0x41e>
 8005c8a:	9900      	ldr	r1, [sp, #0]
 8005c8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c90:	4b4e      	ldr	r3, [pc, #312]	; (8005dcc <_dtoa_r+0x644>)
 8005c92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c96:	4401      	add	r1, r0
 8005c98:	9102      	str	r1, [sp, #8]
 8005c9a:	9908      	ldr	r1, [sp, #32]
 8005c9c:	eeb0 8a47 	vmov.f32	s16, s14
 8005ca0:	eef0 8a67 	vmov.f32	s17, s15
 8005ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d045      	beq.n	8005d3c <_dtoa_r+0x5b4>
 8005cb0:	494c      	ldr	r1, [pc, #304]	; (8005de4 <_dtoa_r+0x65c>)
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f7fa fdca 	bl	800084c <__aeabi_ddiv>
 8005cb8:	ec53 2b18 	vmov	r2, r3, d8
 8005cbc:	f7fa fae4 	bl	8000288 <__aeabi_dsub>
 8005cc0:	9d00      	ldr	r5, [sp, #0]
 8005cc2:	ec41 0b18 	vmov	d8, r0, r1
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7fa ff45 	bl	8000b58 <__aeabi_d2iz>
 8005cce:	900c      	str	r0, [sp, #48]	; 0x30
 8005cd0:	f7fa fc28 	bl	8000524 <__aeabi_i2d>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4630      	mov	r0, r6
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa fad4 	bl	8000288 <__aeabi_dsub>
 8005ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ce2:	3330      	adds	r3, #48	; 0x30
 8005ce4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ce8:	ec53 2b18 	vmov	r2, r3, d8
 8005cec:	4606      	mov	r6, r0
 8005cee:	460f      	mov	r7, r1
 8005cf0:	f7fa fef4 	bl	8000adc <__aeabi_dcmplt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d165      	bne.n	8005dc4 <_dtoa_r+0x63c>
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	4935      	ldr	r1, [pc, #212]	; (8005dd4 <_dtoa_r+0x64c>)
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7fa fac2 	bl	8000288 <__aeabi_dsub>
 8005d04:	ec53 2b18 	vmov	r2, r3, d8
 8005d08:	f7fa fee8 	bl	8000adc <__aeabi_dcmplt>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f040 80b9 	bne.w	8005e84 <_dtoa_r+0x6fc>
 8005d12:	9b02      	ldr	r3, [sp, #8]
 8005d14:	429d      	cmp	r5, r3
 8005d16:	f43f af75 	beq.w	8005c04 <_dtoa_r+0x47c>
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	; (8005dd8 <_dtoa_r+0x650>)
 8005d1c:	ec51 0b18 	vmov	r0, r1, d8
 8005d20:	2200      	movs	r2, #0
 8005d22:	f7fa fc69 	bl	80005f8 <__aeabi_dmul>
 8005d26:	4b2c      	ldr	r3, [pc, #176]	; (8005dd8 <_dtoa_r+0x650>)
 8005d28:	ec41 0b18 	vmov	d8, r0, r1
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4630      	mov	r0, r6
 8005d30:	4639      	mov	r1, r7
 8005d32:	f7fa fc61 	bl	80005f8 <__aeabi_dmul>
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	e7c4      	b.n	8005cc6 <_dtoa_r+0x53e>
 8005d3c:	ec51 0b17 	vmov	r0, r1, d7
 8005d40:	f7fa fc5a 	bl	80005f8 <__aeabi_dmul>
 8005d44:	9b02      	ldr	r3, [sp, #8]
 8005d46:	9d00      	ldr	r5, [sp, #0]
 8005d48:	930c      	str	r3, [sp, #48]	; 0x30
 8005d4a:	ec41 0b18 	vmov	d8, r0, r1
 8005d4e:	4639      	mov	r1, r7
 8005d50:	4630      	mov	r0, r6
 8005d52:	f7fa ff01 	bl	8000b58 <__aeabi_d2iz>
 8005d56:	9011      	str	r0, [sp, #68]	; 0x44
 8005d58:	f7fa fbe4 	bl	8000524 <__aeabi_i2d>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa fa90 	bl	8000288 <__aeabi_dsub>
 8005d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d6a:	3330      	adds	r3, #48	; 0x30
 8005d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	429d      	cmp	r5, r3
 8005d74:	4606      	mov	r6, r0
 8005d76:	460f      	mov	r7, r1
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	d134      	bne.n	8005de8 <_dtoa_r+0x660>
 8005d7e:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <_dtoa_r+0x65c>)
 8005d80:	ec51 0b18 	vmov	r0, r1, d8
 8005d84:	f7fa fa82 	bl	800028c <__adddf3>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	4639      	mov	r1, r7
 8005d90:	f7fa fec2 	bl	8000b18 <__aeabi_dcmpgt>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d175      	bne.n	8005e84 <_dtoa_r+0x6fc>
 8005d98:	ec53 2b18 	vmov	r2, r3, d8
 8005d9c:	4911      	ldr	r1, [pc, #68]	; (8005de4 <_dtoa_r+0x65c>)
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f7fa fa72 	bl	8000288 <__aeabi_dsub>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fe96 	bl	8000adc <__aeabi_dcmplt>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f43f af27 	beq.w	8005c04 <_dtoa_r+0x47c>
 8005db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005db8:	1e6b      	subs	r3, r5, #1
 8005dba:	930c      	str	r3, [sp, #48]	; 0x30
 8005dbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d0f8      	beq.n	8005db6 <_dtoa_r+0x62e>
 8005dc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005dc8:	e04a      	b.n	8005e60 <_dtoa_r+0x6d8>
 8005dca:	bf00      	nop
 8005dcc:	08007c50 	.word	0x08007c50
 8005dd0:	08007c28 	.word	0x08007c28
 8005dd4:	3ff00000 	.word	0x3ff00000
 8005dd8:	40240000 	.word	0x40240000
 8005ddc:	401c0000 	.word	0x401c0000
 8005de0:	40140000 	.word	0x40140000
 8005de4:	3fe00000 	.word	0x3fe00000
 8005de8:	4baf      	ldr	r3, [pc, #700]	; (80060a8 <_dtoa_r+0x920>)
 8005dea:	f7fa fc05 	bl	80005f8 <__aeabi_dmul>
 8005dee:	4606      	mov	r6, r0
 8005df0:	460f      	mov	r7, r1
 8005df2:	e7ac      	b.n	8005d4e <_dtoa_r+0x5c6>
 8005df4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005df8:	9d00      	ldr	r5, [sp, #0]
 8005dfa:	4642      	mov	r2, r8
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	4630      	mov	r0, r6
 8005e00:	4639      	mov	r1, r7
 8005e02:	f7fa fd23 	bl	800084c <__aeabi_ddiv>
 8005e06:	f7fa fea7 	bl	8000b58 <__aeabi_d2iz>
 8005e0a:	9002      	str	r0, [sp, #8]
 8005e0c:	f7fa fb8a 	bl	8000524 <__aeabi_i2d>
 8005e10:	4642      	mov	r2, r8
 8005e12:	464b      	mov	r3, r9
 8005e14:	f7fa fbf0 	bl	80005f8 <__aeabi_dmul>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa fa32 	bl	8000288 <__aeabi_dsub>
 8005e24:	9e02      	ldr	r6, [sp, #8]
 8005e26:	9f01      	ldr	r7, [sp, #4]
 8005e28:	3630      	adds	r6, #48	; 0x30
 8005e2a:	f805 6b01 	strb.w	r6, [r5], #1
 8005e2e:	9e00      	ldr	r6, [sp, #0]
 8005e30:	1bae      	subs	r6, r5, r6
 8005e32:	42b7      	cmp	r7, r6
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	d137      	bne.n	8005eaa <_dtoa_r+0x722>
 8005e3a:	f7fa fa27 	bl	800028c <__adddf3>
 8005e3e:	4642      	mov	r2, r8
 8005e40:	464b      	mov	r3, r9
 8005e42:	4606      	mov	r6, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	f7fa fe67 	bl	8000b18 <__aeabi_dcmpgt>
 8005e4a:	b9c8      	cbnz	r0, 8005e80 <_dtoa_r+0x6f8>
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e58:	b110      	cbz	r0, 8005e60 <_dtoa_r+0x6d8>
 8005e5a:	9b02      	ldr	r3, [sp, #8]
 8005e5c:	07d9      	lsls	r1, r3, #31
 8005e5e:	d40f      	bmi.n	8005e80 <_dtoa_r+0x6f8>
 8005e60:	4620      	mov	r0, r4
 8005e62:	4659      	mov	r1, fp
 8005e64:	f000 fad6 	bl	8006414 <_Bfree>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	702b      	strb	r3, [r5, #0]
 8005e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e6e:	f10a 0001 	add.w	r0, sl, #1
 8005e72:	6018      	str	r0, [r3, #0]
 8005e74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f43f acd8 	beq.w	800582c <_dtoa_r+0xa4>
 8005e7c:	601d      	str	r5, [r3, #0]
 8005e7e:	e4d5      	b.n	800582c <_dtoa_r+0xa4>
 8005e80:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e84:	462b      	mov	r3, r5
 8005e86:	461d      	mov	r5, r3
 8005e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e8c:	2a39      	cmp	r2, #57	; 0x39
 8005e8e:	d108      	bne.n	8005ea2 <_dtoa_r+0x71a>
 8005e90:	9a00      	ldr	r2, [sp, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d1f7      	bne.n	8005e86 <_dtoa_r+0x6fe>
 8005e96:	9a07      	ldr	r2, [sp, #28]
 8005e98:	9900      	ldr	r1, [sp, #0]
 8005e9a:	3201      	adds	r2, #1
 8005e9c:	9207      	str	r2, [sp, #28]
 8005e9e:	2230      	movs	r2, #48	; 0x30
 8005ea0:	700a      	strb	r2, [r1, #0]
 8005ea2:	781a      	ldrb	r2, [r3, #0]
 8005ea4:	3201      	adds	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	e78c      	b.n	8005dc4 <_dtoa_r+0x63c>
 8005eaa:	4b7f      	ldr	r3, [pc, #508]	; (80060a8 <_dtoa_r+0x920>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	f7fa fba3 	bl	80005f8 <__aeabi_dmul>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	f7fa fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d09b      	beq.n	8005dfa <_dtoa_r+0x672>
 8005ec2:	e7cd      	b.n	8005e60 <_dtoa_r+0x6d8>
 8005ec4:	9a08      	ldr	r2, [sp, #32]
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	f000 80c4 	beq.w	8006054 <_dtoa_r+0x8cc>
 8005ecc:	9a05      	ldr	r2, [sp, #20]
 8005ece:	2a01      	cmp	r2, #1
 8005ed0:	f300 80a8 	bgt.w	8006024 <_dtoa_r+0x89c>
 8005ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ed6:	2a00      	cmp	r2, #0
 8005ed8:	f000 80a0 	beq.w	800601c <_dtoa_r+0x894>
 8005edc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ee0:	9e06      	ldr	r6, [sp, #24]
 8005ee2:	4645      	mov	r5, r8
 8005ee4:	9a04      	ldr	r2, [sp, #16]
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	441a      	add	r2, r3
 8005eea:	4620      	mov	r0, r4
 8005eec:	4498      	add	r8, r3
 8005eee:	9204      	str	r2, [sp, #16]
 8005ef0:	f000 fb4c 	bl	800658c <__i2b>
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	dd0b      	ble.n	8005f12 <_dtoa_r+0x78a>
 8005efa:	9b04      	ldr	r3, [sp, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	dd08      	ble.n	8005f12 <_dtoa_r+0x78a>
 8005f00:	42ab      	cmp	r3, r5
 8005f02:	9a04      	ldr	r2, [sp, #16]
 8005f04:	bfa8      	it	ge
 8005f06:	462b      	movge	r3, r5
 8005f08:	eba8 0803 	sub.w	r8, r8, r3
 8005f0c:	1aed      	subs	r5, r5, r3
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	b1fb      	cbz	r3, 8005f56 <_dtoa_r+0x7ce>
 8005f16:	9b08      	ldr	r3, [sp, #32]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 809f 	beq.w	800605c <_dtoa_r+0x8d4>
 8005f1e:	2e00      	cmp	r6, #0
 8005f20:	dd11      	ble.n	8005f46 <_dtoa_r+0x7be>
 8005f22:	4639      	mov	r1, r7
 8005f24:	4632      	mov	r2, r6
 8005f26:	4620      	mov	r0, r4
 8005f28:	f000 fbec 	bl	8006704 <__pow5mult>
 8005f2c:	465a      	mov	r2, fp
 8005f2e:	4601      	mov	r1, r0
 8005f30:	4607      	mov	r7, r0
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fb40 	bl	80065b8 <__multiply>
 8005f38:	4659      	mov	r1, fp
 8005f3a:	9007      	str	r0, [sp, #28]
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 fa69 	bl	8006414 <_Bfree>
 8005f42:	9b07      	ldr	r3, [sp, #28]
 8005f44:	469b      	mov	fp, r3
 8005f46:	9b06      	ldr	r3, [sp, #24]
 8005f48:	1b9a      	subs	r2, r3, r6
 8005f4a:	d004      	beq.n	8005f56 <_dtoa_r+0x7ce>
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 fbd8 	bl	8006704 <__pow5mult>
 8005f54:	4683      	mov	fp, r0
 8005f56:	2101      	movs	r1, #1
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f000 fb17 	bl	800658c <__i2b>
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	4606      	mov	r6, r0
 8005f64:	dd7c      	ble.n	8006060 <_dtoa_r+0x8d8>
 8005f66:	461a      	mov	r2, r3
 8005f68:	4601      	mov	r1, r0
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 fbca 	bl	8006704 <__pow5mult>
 8005f70:	9b05      	ldr	r3, [sp, #20]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	4606      	mov	r6, r0
 8005f76:	dd76      	ble.n	8006066 <_dtoa_r+0x8de>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9306      	str	r3, [sp, #24]
 8005f7c:	6933      	ldr	r3, [r6, #16]
 8005f7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f82:	6918      	ldr	r0, [r3, #16]
 8005f84:	f000 fab2 	bl	80064ec <__hi0bits>
 8005f88:	f1c0 0020 	rsb	r0, r0, #32
 8005f8c:	9b04      	ldr	r3, [sp, #16]
 8005f8e:	4418      	add	r0, r3
 8005f90:	f010 001f 	ands.w	r0, r0, #31
 8005f94:	f000 8086 	beq.w	80060a4 <_dtoa_r+0x91c>
 8005f98:	f1c0 0320 	rsb	r3, r0, #32
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	dd7f      	ble.n	80060a0 <_dtoa_r+0x918>
 8005fa0:	f1c0 001c 	rsb	r0, r0, #28
 8005fa4:	9b04      	ldr	r3, [sp, #16]
 8005fa6:	4403      	add	r3, r0
 8005fa8:	4480      	add	r8, r0
 8005faa:	4405      	add	r5, r0
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	f1b8 0f00 	cmp.w	r8, #0
 8005fb2:	dd05      	ble.n	8005fc0 <_dtoa_r+0x838>
 8005fb4:	4659      	mov	r1, fp
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fbfd 	bl	80067b8 <__lshift>
 8005fbe:	4683      	mov	fp, r0
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dd05      	ble.n	8005fd2 <_dtoa_r+0x84a>
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fbf4 	bl	80067b8 <__lshift>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d069      	beq.n	80060ac <_dtoa_r+0x924>
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4658      	mov	r0, fp
 8005fdc:	f000 fc58 	bl	8006890 <__mcmp>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	da63      	bge.n	80060ac <_dtoa_r+0x924>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4659      	mov	r1, fp
 8005fe8:	220a      	movs	r2, #10
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fa34 	bl	8006458 <__multadd>
 8005ff0:	9b08      	ldr	r3, [sp, #32]
 8005ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ff6:	4683      	mov	fp, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 818f 	beq.w	800631c <_dtoa_r+0xb94>
 8005ffe:	4639      	mov	r1, r7
 8006000:	2300      	movs	r3, #0
 8006002:	220a      	movs	r2, #10
 8006004:	4620      	mov	r0, r4
 8006006:	f000 fa27 	bl	8006458 <__multadd>
 800600a:	f1b9 0f00 	cmp.w	r9, #0
 800600e:	4607      	mov	r7, r0
 8006010:	f300 808e 	bgt.w	8006130 <_dtoa_r+0x9a8>
 8006014:	9b05      	ldr	r3, [sp, #20]
 8006016:	2b02      	cmp	r3, #2
 8006018:	dc50      	bgt.n	80060bc <_dtoa_r+0x934>
 800601a:	e089      	b.n	8006130 <_dtoa_r+0x9a8>
 800601c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800601e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006022:	e75d      	b.n	8005ee0 <_dtoa_r+0x758>
 8006024:	9b01      	ldr	r3, [sp, #4]
 8006026:	1e5e      	subs	r6, r3, #1
 8006028:	9b06      	ldr	r3, [sp, #24]
 800602a:	42b3      	cmp	r3, r6
 800602c:	bfbf      	itttt	lt
 800602e:	9b06      	ldrlt	r3, [sp, #24]
 8006030:	9606      	strlt	r6, [sp, #24]
 8006032:	1af2      	sublt	r2, r6, r3
 8006034:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006036:	bfb6      	itet	lt
 8006038:	189b      	addlt	r3, r3, r2
 800603a:	1b9e      	subge	r6, r3, r6
 800603c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	bfb8      	it	lt
 8006042:	2600      	movlt	r6, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	bfb5      	itete	lt
 8006048:	eba8 0503 	sublt.w	r5, r8, r3
 800604c:	9b01      	ldrge	r3, [sp, #4]
 800604e:	2300      	movlt	r3, #0
 8006050:	4645      	movge	r5, r8
 8006052:	e747      	b.n	8005ee4 <_dtoa_r+0x75c>
 8006054:	9e06      	ldr	r6, [sp, #24]
 8006056:	9f08      	ldr	r7, [sp, #32]
 8006058:	4645      	mov	r5, r8
 800605a:	e74c      	b.n	8005ef6 <_dtoa_r+0x76e>
 800605c:	9a06      	ldr	r2, [sp, #24]
 800605e:	e775      	b.n	8005f4c <_dtoa_r+0x7c4>
 8006060:	9b05      	ldr	r3, [sp, #20]
 8006062:	2b01      	cmp	r3, #1
 8006064:	dc18      	bgt.n	8006098 <_dtoa_r+0x910>
 8006066:	9b02      	ldr	r3, [sp, #8]
 8006068:	b9b3      	cbnz	r3, 8006098 <_dtoa_r+0x910>
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006070:	b9a3      	cbnz	r3, 800609c <_dtoa_r+0x914>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006078:	0d1b      	lsrs	r3, r3, #20
 800607a:	051b      	lsls	r3, r3, #20
 800607c:	b12b      	cbz	r3, 800608a <_dtoa_r+0x902>
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	3301      	adds	r3, #1
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	f108 0801 	add.w	r8, r8, #1
 8006088:	2301      	movs	r3, #1
 800608a:	9306      	str	r3, [sp, #24]
 800608c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800608e:	2b00      	cmp	r3, #0
 8006090:	f47f af74 	bne.w	8005f7c <_dtoa_r+0x7f4>
 8006094:	2001      	movs	r0, #1
 8006096:	e779      	b.n	8005f8c <_dtoa_r+0x804>
 8006098:	2300      	movs	r3, #0
 800609a:	e7f6      	b.n	800608a <_dtoa_r+0x902>
 800609c:	9b02      	ldr	r3, [sp, #8]
 800609e:	e7f4      	b.n	800608a <_dtoa_r+0x902>
 80060a0:	d085      	beq.n	8005fae <_dtoa_r+0x826>
 80060a2:	4618      	mov	r0, r3
 80060a4:	301c      	adds	r0, #28
 80060a6:	e77d      	b.n	8005fa4 <_dtoa_r+0x81c>
 80060a8:	40240000 	.word	0x40240000
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dc38      	bgt.n	8006124 <_dtoa_r+0x99c>
 80060b2:	9b05      	ldr	r3, [sp, #20]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	dd35      	ble.n	8006124 <_dtoa_r+0x99c>
 80060b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80060bc:	f1b9 0f00 	cmp.w	r9, #0
 80060c0:	d10d      	bne.n	80060de <_dtoa_r+0x956>
 80060c2:	4631      	mov	r1, r6
 80060c4:	464b      	mov	r3, r9
 80060c6:	2205      	movs	r2, #5
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 f9c5 	bl	8006458 <__multadd>
 80060ce:	4601      	mov	r1, r0
 80060d0:	4606      	mov	r6, r0
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fbdc 	bl	8006890 <__mcmp>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f73f adbd 	bgt.w	8005c58 <_dtoa_r+0x4d0>
 80060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e0:	9d00      	ldr	r5, [sp, #0]
 80060e2:	ea6f 0a03 	mvn.w	sl, r3
 80060e6:	f04f 0800 	mov.w	r8, #0
 80060ea:	4631      	mov	r1, r6
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 f991 	bl	8006414 <_Bfree>
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	f43f aeb4 	beq.w	8005e60 <_dtoa_r+0x6d8>
 80060f8:	f1b8 0f00 	cmp.w	r8, #0
 80060fc:	d005      	beq.n	800610a <_dtoa_r+0x982>
 80060fe:	45b8      	cmp	r8, r7
 8006100:	d003      	beq.n	800610a <_dtoa_r+0x982>
 8006102:	4641      	mov	r1, r8
 8006104:	4620      	mov	r0, r4
 8006106:	f000 f985 	bl	8006414 <_Bfree>
 800610a:	4639      	mov	r1, r7
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f981 	bl	8006414 <_Bfree>
 8006112:	e6a5      	b.n	8005e60 <_dtoa_r+0x6d8>
 8006114:	2600      	movs	r6, #0
 8006116:	4637      	mov	r7, r6
 8006118:	e7e1      	b.n	80060de <_dtoa_r+0x956>
 800611a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800611c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006120:	4637      	mov	r7, r6
 8006122:	e599      	b.n	8005c58 <_dtoa_r+0x4d0>
 8006124:	9b08      	ldr	r3, [sp, #32]
 8006126:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80fd 	beq.w	800632a <_dtoa_r+0xba2>
 8006130:	2d00      	cmp	r5, #0
 8006132:	dd05      	ble.n	8006140 <_dtoa_r+0x9b8>
 8006134:	4639      	mov	r1, r7
 8006136:	462a      	mov	r2, r5
 8006138:	4620      	mov	r0, r4
 800613a:	f000 fb3d 	bl	80067b8 <__lshift>
 800613e:	4607      	mov	r7, r0
 8006140:	9b06      	ldr	r3, [sp, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d05c      	beq.n	8006200 <_dtoa_r+0xa78>
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4620      	mov	r0, r4
 800614a:	f000 f923 	bl	8006394 <_Balloc>
 800614e:	4605      	mov	r5, r0
 8006150:	b928      	cbnz	r0, 800615e <_dtoa_r+0x9d6>
 8006152:	4b80      	ldr	r3, [pc, #512]	; (8006354 <_dtoa_r+0xbcc>)
 8006154:	4602      	mov	r2, r0
 8006156:	f240 21ea 	movw	r1, #746	; 0x2ea
 800615a:	f7ff bb2e 	b.w	80057ba <_dtoa_r+0x32>
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	3202      	adds	r2, #2
 8006162:	0092      	lsls	r2, r2, #2
 8006164:	f107 010c 	add.w	r1, r7, #12
 8006168:	300c      	adds	r0, #12
 800616a:	f000 f905 	bl	8006378 <memcpy>
 800616e:	2201      	movs	r2, #1
 8006170:	4629      	mov	r1, r5
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fb20 	bl	80067b8 <__lshift>
 8006178:	9b00      	ldr	r3, [sp, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	9b00      	ldr	r3, [sp, #0]
 8006180:	444b      	add	r3, r9
 8006182:	9307      	str	r3, [sp, #28]
 8006184:	9b02      	ldr	r3, [sp, #8]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	46b8      	mov	r8, r7
 800618c:	9306      	str	r3, [sp, #24]
 800618e:	4607      	mov	r7, r0
 8006190:	9b01      	ldr	r3, [sp, #4]
 8006192:	4631      	mov	r1, r6
 8006194:	3b01      	subs	r3, #1
 8006196:	4658      	mov	r0, fp
 8006198:	9302      	str	r3, [sp, #8]
 800619a:	f7ff fa67 	bl	800566c <quorem>
 800619e:	4603      	mov	r3, r0
 80061a0:	3330      	adds	r3, #48	; 0x30
 80061a2:	9004      	str	r0, [sp, #16]
 80061a4:	4641      	mov	r1, r8
 80061a6:	4658      	mov	r0, fp
 80061a8:	9308      	str	r3, [sp, #32]
 80061aa:	f000 fb71 	bl	8006890 <__mcmp>
 80061ae:	463a      	mov	r2, r7
 80061b0:	4681      	mov	r9, r0
 80061b2:	4631      	mov	r1, r6
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fb87 	bl	80068c8 <__mdiff>
 80061ba:	68c2      	ldr	r2, [r0, #12]
 80061bc:	9b08      	ldr	r3, [sp, #32]
 80061be:	4605      	mov	r5, r0
 80061c0:	bb02      	cbnz	r2, 8006204 <_dtoa_r+0xa7c>
 80061c2:	4601      	mov	r1, r0
 80061c4:	4658      	mov	r0, fp
 80061c6:	f000 fb63 	bl	8006890 <__mcmp>
 80061ca:	9b08      	ldr	r3, [sp, #32]
 80061cc:	4602      	mov	r2, r0
 80061ce:	4629      	mov	r1, r5
 80061d0:	4620      	mov	r0, r4
 80061d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80061d6:	f000 f91d 	bl	8006414 <_Bfree>
 80061da:	9b05      	ldr	r3, [sp, #20]
 80061dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061de:	9d01      	ldr	r5, [sp, #4]
 80061e0:	ea43 0102 	orr.w	r1, r3, r2
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	430b      	orrs	r3, r1
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	d10d      	bne.n	8006208 <_dtoa_r+0xa80>
 80061ec:	2b39      	cmp	r3, #57	; 0x39
 80061ee:	d029      	beq.n	8006244 <_dtoa_r+0xabc>
 80061f0:	f1b9 0f00 	cmp.w	r9, #0
 80061f4:	dd01      	ble.n	80061fa <_dtoa_r+0xa72>
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	3331      	adds	r3, #49	; 0x31
 80061fa:	9a02      	ldr	r2, [sp, #8]
 80061fc:	7013      	strb	r3, [r2, #0]
 80061fe:	e774      	b.n	80060ea <_dtoa_r+0x962>
 8006200:	4638      	mov	r0, r7
 8006202:	e7b9      	b.n	8006178 <_dtoa_r+0x9f0>
 8006204:	2201      	movs	r2, #1
 8006206:	e7e2      	b.n	80061ce <_dtoa_r+0xa46>
 8006208:	f1b9 0f00 	cmp.w	r9, #0
 800620c:	db06      	blt.n	800621c <_dtoa_r+0xa94>
 800620e:	9905      	ldr	r1, [sp, #20]
 8006210:	ea41 0909 	orr.w	r9, r1, r9
 8006214:	9906      	ldr	r1, [sp, #24]
 8006216:	ea59 0101 	orrs.w	r1, r9, r1
 800621a:	d120      	bne.n	800625e <_dtoa_r+0xad6>
 800621c:	2a00      	cmp	r2, #0
 800621e:	ddec      	ble.n	80061fa <_dtoa_r+0xa72>
 8006220:	4659      	mov	r1, fp
 8006222:	2201      	movs	r2, #1
 8006224:	4620      	mov	r0, r4
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	f000 fac6 	bl	80067b8 <__lshift>
 800622c:	4631      	mov	r1, r6
 800622e:	4683      	mov	fp, r0
 8006230:	f000 fb2e 	bl	8006890 <__mcmp>
 8006234:	2800      	cmp	r0, #0
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	dc02      	bgt.n	8006240 <_dtoa_r+0xab8>
 800623a:	d1de      	bne.n	80061fa <_dtoa_r+0xa72>
 800623c:	07da      	lsls	r2, r3, #31
 800623e:	d5dc      	bpl.n	80061fa <_dtoa_r+0xa72>
 8006240:	2b39      	cmp	r3, #57	; 0x39
 8006242:	d1d8      	bne.n	80061f6 <_dtoa_r+0xa6e>
 8006244:	9a02      	ldr	r2, [sp, #8]
 8006246:	2339      	movs	r3, #57	; 0x39
 8006248:	7013      	strb	r3, [r2, #0]
 800624a:	462b      	mov	r3, r5
 800624c:	461d      	mov	r5, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006254:	2a39      	cmp	r2, #57	; 0x39
 8006256:	d050      	beq.n	80062fa <_dtoa_r+0xb72>
 8006258:	3201      	adds	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e745      	b.n	80060ea <_dtoa_r+0x962>
 800625e:	2a00      	cmp	r2, #0
 8006260:	dd03      	ble.n	800626a <_dtoa_r+0xae2>
 8006262:	2b39      	cmp	r3, #57	; 0x39
 8006264:	d0ee      	beq.n	8006244 <_dtoa_r+0xabc>
 8006266:	3301      	adds	r3, #1
 8006268:	e7c7      	b.n	80061fa <_dtoa_r+0xa72>
 800626a:	9a01      	ldr	r2, [sp, #4]
 800626c:	9907      	ldr	r1, [sp, #28]
 800626e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006272:	428a      	cmp	r2, r1
 8006274:	d02a      	beq.n	80062cc <_dtoa_r+0xb44>
 8006276:	4659      	mov	r1, fp
 8006278:	2300      	movs	r3, #0
 800627a:	220a      	movs	r2, #10
 800627c:	4620      	mov	r0, r4
 800627e:	f000 f8eb 	bl	8006458 <__multadd>
 8006282:	45b8      	cmp	r8, r7
 8006284:	4683      	mov	fp, r0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	f04f 020a 	mov.w	r2, #10
 800628e:	4641      	mov	r1, r8
 8006290:	4620      	mov	r0, r4
 8006292:	d107      	bne.n	80062a4 <_dtoa_r+0xb1c>
 8006294:	f000 f8e0 	bl	8006458 <__multadd>
 8006298:	4680      	mov	r8, r0
 800629a:	4607      	mov	r7, r0
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	3301      	adds	r3, #1
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	e775      	b.n	8006190 <_dtoa_r+0xa08>
 80062a4:	f000 f8d8 	bl	8006458 <__multadd>
 80062a8:	4639      	mov	r1, r7
 80062aa:	4680      	mov	r8, r0
 80062ac:	2300      	movs	r3, #0
 80062ae:	220a      	movs	r2, #10
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 f8d1 	bl	8006458 <__multadd>
 80062b6:	4607      	mov	r7, r0
 80062b8:	e7f0      	b.n	800629c <_dtoa_r+0xb14>
 80062ba:	f1b9 0f00 	cmp.w	r9, #0
 80062be:	9a00      	ldr	r2, [sp, #0]
 80062c0:	bfcc      	ite	gt
 80062c2:	464d      	movgt	r5, r9
 80062c4:	2501      	movle	r5, #1
 80062c6:	4415      	add	r5, r2
 80062c8:	f04f 0800 	mov.w	r8, #0
 80062cc:	4659      	mov	r1, fp
 80062ce:	2201      	movs	r2, #1
 80062d0:	4620      	mov	r0, r4
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	f000 fa70 	bl	80067b8 <__lshift>
 80062d8:	4631      	mov	r1, r6
 80062da:	4683      	mov	fp, r0
 80062dc:	f000 fad8 	bl	8006890 <__mcmp>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	dcb2      	bgt.n	800624a <_dtoa_r+0xac2>
 80062e4:	d102      	bne.n	80062ec <_dtoa_r+0xb64>
 80062e6:	9b01      	ldr	r3, [sp, #4]
 80062e8:	07db      	lsls	r3, r3, #31
 80062ea:	d4ae      	bmi.n	800624a <_dtoa_r+0xac2>
 80062ec:	462b      	mov	r3, r5
 80062ee:	461d      	mov	r5, r3
 80062f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f4:	2a30      	cmp	r2, #48	; 0x30
 80062f6:	d0fa      	beq.n	80062ee <_dtoa_r+0xb66>
 80062f8:	e6f7      	b.n	80060ea <_dtoa_r+0x962>
 80062fa:	9a00      	ldr	r2, [sp, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d1a5      	bne.n	800624c <_dtoa_r+0xac4>
 8006300:	f10a 0a01 	add.w	sl, sl, #1
 8006304:	2331      	movs	r3, #49	; 0x31
 8006306:	e779      	b.n	80061fc <_dtoa_r+0xa74>
 8006308:	4b13      	ldr	r3, [pc, #76]	; (8006358 <_dtoa_r+0xbd0>)
 800630a:	f7ff baaf 	b.w	800586c <_dtoa_r+0xe4>
 800630e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006310:	2b00      	cmp	r3, #0
 8006312:	f47f aa86 	bne.w	8005822 <_dtoa_r+0x9a>
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <_dtoa_r+0xbd4>)
 8006318:	f7ff baa8 	b.w	800586c <_dtoa_r+0xe4>
 800631c:	f1b9 0f00 	cmp.w	r9, #0
 8006320:	dc03      	bgt.n	800632a <_dtoa_r+0xba2>
 8006322:	9b05      	ldr	r3, [sp, #20]
 8006324:	2b02      	cmp	r3, #2
 8006326:	f73f aec9 	bgt.w	80060bc <_dtoa_r+0x934>
 800632a:	9d00      	ldr	r5, [sp, #0]
 800632c:	4631      	mov	r1, r6
 800632e:	4658      	mov	r0, fp
 8006330:	f7ff f99c 	bl	800566c <quorem>
 8006334:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006338:	f805 3b01 	strb.w	r3, [r5], #1
 800633c:	9a00      	ldr	r2, [sp, #0]
 800633e:	1aaa      	subs	r2, r5, r2
 8006340:	4591      	cmp	r9, r2
 8006342:	ddba      	ble.n	80062ba <_dtoa_r+0xb32>
 8006344:	4659      	mov	r1, fp
 8006346:	2300      	movs	r3, #0
 8006348:	220a      	movs	r2, #10
 800634a:	4620      	mov	r0, r4
 800634c:	f000 f884 	bl	8006458 <__multadd>
 8006350:	4683      	mov	fp, r0
 8006352:	e7eb      	b.n	800632c <_dtoa_r+0xba4>
 8006354:	08007bb7 	.word	0x08007bb7
 8006358:	08007b10 	.word	0x08007b10
 800635c:	08007b34 	.word	0x08007b34

08006360 <_localeconv_r>:
 8006360:	4800      	ldr	r0, [pc, #0]	; (8006364 <_localeconv_r+0x4>)
 8006362:	4770      	bx	lr
 8006364:	20000160 	.word	0x20000160

08006368 <malloc>:
 8006368:	4b02      	ldr	r3, [pc, #8]	; (8006374 <malloc+0xc>)
 800636a:	4601      	mov	r1, r0
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f000 bbef 	b.w	8006b50 <_malloc_r>
 8006372:	bf00      	nop
 8006374:	2000000c 	.word	0x2000000c

08006378 <memcpy>:
 8006378:	440a      	add	r2, r1
 800637a:	4291      	cmp	r1, r2
 800637c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006380:	d100      	bne.n	8006384 <memcpy+0xc>
 8006382:	4770      	bx	lr
 8006384:	b510      	push	{r4, lr}
 8006386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800638e:	4291      	cmp	r1, r2
 8006390:	d1f9      	bne.n	8006386 <memcpy+0xe>
 8006392:	bd10      	pop	{r4, pc}

08006394 <_Balloc>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006398:	4604      	mov	r4, r0
 800639a:	460d      	mov	r5, r1
 800639c:	b976      	cbnz	r6, 80063bc <_Balloc+0x28>
 800639e:	2010      	movs	r0, #16
 80063a0:	f7ff ffe2 	bl	8006368 <malloc>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6260      	str	r0, [r4, #36]	; 0x24
 80063a8:	b920      	cbnz	r0, 80063b4 <_Balloc+0x20>
 80063aa:	4b18      	ldr	r3, [pc, #96]	; (800640c <_Balloc+0x78>)
 80063ac:	4818      	ldr	r0, [pc, #96]	; (8006410 <_Balloc+0x7c>)
 80063ae:	2166      	movs	r1, #102	; 0x66
 80063b0:	f000 fd94 	bl	8006edc <__assert_func>
 80063b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063b8:	6006      	str	r6, [r0, #0]
 80063ba:	60c6      	str	r6, [r0, #12]
 80063bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063be:	68f3      	ldr	r3, [r6, #12]
 80063c0:	b183      	cbz	r3, 80063e4 <_Balloc+0x50>
 80063c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ca:	b9b8      	cbnz	r0, 80063fc <_Balloc+0x68>
 80063cc:	2101      	movs	r1, #1
 80063ce:	fa01 f605 	lsl.w	r6, r1, r5
 80063d2:	1d72      	adds	r2, r6, #5
 80063d4:	0092      	lsls	r2, r2, #2
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fb5a 	bl	8006a90 <_calloc_r>
 80063dc:	b160      	cbz	r0, 80063f8 <_Balloc+0x64>
 80063de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063e2:	e00e      	b.n	8006402 <_Balloc+0x6e>
 80063e4:	2221      	movs	r2, #33	; 0x21
 80063e6:	2104      	movs	r1, #4
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 fb51 	bl	8006a90 <_calloc_r>
 80063ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f0:	60f0      	str	r0, [r6, #12]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e4      	bne.n	80063c2 <_Balloc+0x2e>
 80063f8:	2000      	movs	r0, #0
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	6802      	ldr	r2, [r0, #0]
 80063fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006402:	2300      	movs	r3, #0
 8006404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006408:	e7f7      	b.n	80063fa <_Balloc+0x66>
 800640a:	bf00      	nop
 800640c:	08007b41 	.word	0x08007b41
 8006410:	08007bc8 	.word	0x08007bc8

08006414 <_Bfree>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006418:	4605      	mov	r5, r0
 800641a:	460c      	mov	r4, r1
 800641c:	b976      	cbnz	r6, 800643c <_Bfree+0x28>
 800641e:	2010      	movs	r0, #16
 8006420:	f7ff ffa2 	bl	8006368 <malloc>
 8006424:	4602      	mov	r2, r0
 8006426:	6268      	str	r0, [r5, #36]	; 0x24
 8006428:	b920      	cbnz	r0, 8006434 <_Bfree+0x20>
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <_Bfree+0x3c>)
 800642c:	4809      	ldr	r0, [pc, #36]	; (8006454 <_Bfree+0x40>)
 800642e:	218a      	movs	r1, #138	; 0x8a
 8006430:	f000 fd54 	bl	8006edc <__assert_func>
 8006434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006438:	6006      	str	r6, [r0, #0]
 800643a:	60c6      	str	r6, [r0, #12]
 800643c:	b13c      	cbz	r4, 800644e <_Bfree+0x3a>
 800643e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006440:	6862      	ldr	r2, [r4, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006448:	6021      	str	r1, [r4, #0]
 800644a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	08007b41 	.word	0x08007b41
 8006454:	08007bc8 	.word	0x08007bc8

08006458 <__multadd>:
 8006458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645c:	690e      	ldr	r6, [r1, #16]
 800645e:	4607      	mov	r7, r0
 8006460:	4698      	mov	r8, r3
 8006462:	460c      	mov	r4, r1
 8006464:	f101 0014 	add.w	r0, r1, #20
 8006468:	2300      	movs	r3, #0
 800646a:	6805      	ldr	r5, [r0, #0]
 800646c:	b2a9      	uxth	r1, r5
 800646e:	fb02 8101 	mla	r1, r2, r1, r8
 8006472:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006476:	0c2d      	lsrs	r5, r5, #16
 8006478:	fb02 c505 	mla	r5, r2, r5, ip
 800647c:	b289      	uxth	r1, r1
 800647e:	3301      	adds	r3, #1
 8006480:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006484:	429e      	cmp	r6, r3
 8006486:	f840 1b04 	str.w	r1, [r0], #4
 800648a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800648e:	dcec      	bgt.n	800646a <__multadd+0x12>
 8006490:	f1b8 0f00 	cmp.w	r8, #0
 8006494:	d022      	beq.n	80064dc <__multadd+0x84>
 8006496:	68a3      	ldr	r3, [r4, #8]
 8006498:	42b3      	cmp	r3, r6
 800649a:	dc19      	bgt.n	80064d0 <__multadd+0x78>
 800649c:	6861      	ldr	r1, [r4, #4]
 800649e:	4638      	mov	r0, r7
 80064a0:	3101      	adds	r1, #1
 80064a2:	f7ff ff77 	bl	8006394 <_Balloc>
 80064a6:	4605      	mov	r5, r0
 80064a8:	b928      	cbnz	r0, 80064b6 <__multadd+0x5e>
 80064aa:	4602      	mov	r2, r0
 80064ac:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <__multadd+0x8c>)
 80064ae:	480e      	ldr	r0, [pc, #56]	; (80064e8 <__multadd+0x90>)
 80064b0:	21b5      	movs	r1, #181	; 0xb5
 80064b2:	f000 fd13 	bl	8006edc <__assert_func>
 80064b6:	6922      	ldr	r2, [r4, #16]
 80064b8:	3202      	adds	r2, #2
 80064ba:	f104 010c 	add.w	r1, r4, #12
 80064be:	0092      	lsls	r2, r2, #2
 80064c0:	300c      	adds	r0, #12
 80064c2:	f7ff ff59 	bl	8006378 <memcpy>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff ffa3 	bl	8006414 <_Bfree>
 80064ce:	462c      	mov	r4, r5
 80064d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80064d4:	3601      	adds	r6, #1
 80064d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80064da:	6126      	str	r6, [r4, #16]
 80064dc:	4620      	mov	r0, r4
 80064de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e2:	bf00      	nop
 80064e4:	08007bb7 	.word	0x08007bb7
 80064e8:	08007bc8 	.word	0x08007bc8

080064ec <__hi0bits>:
 80064ec:	0c03      	lsrs	r3, r0, #16
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	b9d3      	cbnz	r3, 8006528 <__hi0bits+0x3c>
 80064f2:	0400      	lsls	r0, r0, #16
 80064f4:	2310      	movs	r3, #16
 80064f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064fa:	bf04      	itt	eq
 80064fc:	0200      	lsleq	r0, r0, #8
 80064fe:	3308      	addeq	r3, #8
 8006500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006504:	bf04      	itt	eq
 8006506:	0100      	lsleq	r0, r0, #4
 8006508:	3304      	addeq	r3, #4
 800650a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800650e:	bf04      	itt	eq
 8006510:	0080      	lsleq	r0, r0, #2
 8006512:	3302      	addeq	r3, #2
 8006514:	2800      	cmp	r0, #0
 8006516:	db05      	blt.n	8006524 <__hi0bits+0x38>
 8006518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800651c:	f103 0301 	add.w	r3, r3, #1
 8006520:	bf08      	it	eq
 8006522:	2320      	moveq	r3, #32
 8006524:	4618      	mov	r0, r3
 8006526:	4770      	bx	lr
 8006528:	2300      	movs	r3, #0
 800652a:	e7e4      	b.n	80064f6 <__hi0bits+0xa>

0800652c <__lo0bits>:
 800652c:	6803      	ldr	r3, [r0, #0]
 800652e:	f013 0207 	ands.w	r2, r3, #7
 8006532:	4601      	mov	r1, r0
 8006534:	d00b      	beq.n	800654e <__lo0bits+0x22>
 8006536:	07da      	lsls	r2, r3, #31
 8006538:	d424      	bmi.n	8006584 <__lo0bits+0x58>
 800653a:	0798      	lsls	r0, r3, #30
 800653c:	bf49      	itett	mi
 800653e:	085b      	lsrmi	r3, r3, #1
 8006540:	089b      	lsrpl	r3, r3, #2
 8006542:	2001      	movmi	r0, #1
 8006544:	600b      	strmi	r3, [r1, #0]
 8006546:	bf5c      	itt	pl
 8006548:	600b      	strpl	r3, [r1, #0]
 800654a:	2002      	movpl	r0, #2
 800654c:	4770      	bx	lr
 800654e:	b298      	uxth	r0, r3
 8006550:	b9b0      	cbnz	r0, 8006580 <__lo0bits+0x54>
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	2010      	movs	r0, #16
 8006556:	f013 0fff 	tst.w	r3, #255	; 0xff
 800655a:	bf04      	itt	eq
 800655c:	0a1b      	lsreq	r3, r3, #8
 800655e:	3008      	addeq	r0, #8
 8006560:	071a      	lsls	r2, r3, #28
 8006562:	bf04      	itt	eq
 8006564:	091b      	lsreq	r3, r3, #4
 8006566:	3004      	addeq	r0, #4
 8006568:	079a      	lsls	r2, r3, #30
 800656a:	bf04      	itt	eq
 800656c:	089b      	lsreq	r3, r3, #2
 800656e:	3002      	addeq	r0, #2
 8006570:	07da      	lsls	r2, r3, #31
 8006572:	d403      	bmi.n	800657c <__lo0bits+0x50>
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	f100 0001 	add.w	r0, r0, #1
 800657a:	d005      	beq.n	8006588 <__lo0bits+0x5c>
 800657c:	600b      	str	r3, [r1, #0]
 800657e:	4770      	bx	lr
 8006580:	4610      	mov	r0, r2
 8006582:	e7e8      	b.n	8006556 <__lo0bits+0x2a>
 8006584:	2000      	movs	r0, #0
 8006586:	4770      	bx	lr
 8006588:	2020      	movs	r0, #32
 800658a:	4770      	bx	lr

0800658c <__i2b>:
 800658c:	b510      	push	{r4, lr}
 800658e:	460c      	mov	r4, r1
 8006590:	2101      	movs	r1, #1
 8006592:	f7ff feff 	bl	8006394 <_Balloc>
 8006596:	4602      	mov	r2, r0
 8006598:	b928      	cbnz	r0, 80065a6 <__i2b+0x1a>
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <__i2b+0x24>)
 800659c:	4805      	ldr	r0, [pc, #20]	; (80065b4 <__i2b+0x28>)
 800659e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065a2:	f000 fc9b 	bl	8006edc <__assert_func>
 80065a6:	2301      	movs	r3, #1
 80065a8:	6144      	str	r4, [r0, #20]
 80065aa:	6103      	str	r3, [r0, #16]
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	bf00      	nop
 80065b0:	08007bb7 	.word	0x08007bb7
 80065b4:	08007bc8 	.word	0x08007bc8

080065b8 <__multiply>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	4614      	mov	r4, r2
 80065be:	690a      	ldr	r2, [r1, #16]
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	bfb8      	it	lt
 80065c6:	460b      	movlt	r3, r1
 80065c8:	460d      	mov	r5, r1
 80065ca:	bfbc      	itt	lt
 80065cc:	4625      	movlt	r5, r4
 80065ce:	461c      	movlt	r4, r3
 80065d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80065d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065d8:	68ab      	ldr	r3, [r5, #8]
 80065da:	6869      	ldr	r1, [r5, #4]
 80065dc:	eb0a 0709 	add.w	r7, sl, r9
 80065e0:	42bb      	cmp	r3, r7
 80065e2:	b085      	sub	sp, #20
 80065e4:	bfb8      	it	lt
 80065e6:	3101      	addlt	r1, #1
 80065e8:	f7ff fed4 	bl	8006394 <_Balloc>
 80065ec:	b930      	cbnz	r0, 80065fc <__multiply+0x44>
 80065ee:	4602      	mov	r2, r0
 80065f0:	4b42      	ldr	r3, [pc, #264]	; (80066fc <__multiply+0x144>)
 80065f2:	4843      	ldr	r0, [pc, #268]	; (8006700 <__multiply+0x148>)
 80065f4:	f240 115d 	movw	r1, #349	; 0x15d
 80065f8:	f000 fc70 	bl	8006edc <__assert_func>
 80065fc:	f100 0614 	add.w	r6, r0, #20
 8006600:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006604:	4633      	mov	r3, r6
 8006606:	2200      	movs	r2, #0
 8006608:	4543      	cmp	r3, r8
 800660a:	d31e      	bcc.n	800664a <__multiply+0x92>
 800660c:	f105 0c14 	add.w	ip, r5, #20
 8006610:	f104 0314 	add.w	r3, r4, #20
 8006614:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006618:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800661c:	9202      	str	r2, [sp, #8]
 800661e:	ebac 0205 	sub.w	r2, ip, r5
 8006622:	3a15      	subs	r2, #21
 8006624:	f022 0203 	bic.w	r2, r2, #3
 8006628:	3204      	adds	r2, #4
 800662a:	f105 0115 	add.w	r1, r5, #21
 800662e:	458c      	cmp	ip, r1
 8006630:	bf38      	it	cc
 8006632:	2204      	movcc	r2, #4
 8006634:	9201      	str	r2, [sp, #4]
 8006636:	9a02      	ldr	r2, [sp, #8]
 8006638:	9303      	str	r3, [sp, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d808      	bhi.n	8006650 <__multiply+0x98>
 800663e:	2f00      	cmp	r7, #0
 8006640:	dc55      	bgt.n	80066ee <__multiply+0x136>
 8006642:	6107      	str	r7, [r0, #16]
 8006644:	b005      	add	sp, #20
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	f843 2b04 	str.w	r2, [r3], #4
 800664e:	e7db      	b.n	8006608 <__multiply+0x50>
 8006650:	f8b3 a000 	ldrh.w	sl, [r3]
 8006654:	f1ba 0f00 	cmp.w	sl, #0
 8006658:	d020      	beq.n	800669c <__multiply+0xe4>
 800665a:	f105 0e14 	add.w	lr, r5, #20
 800665e:	46b1      	mov	r9, r6
 8006660:	2200      	movs	r2, #0
 8006662:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006666:	f8d9 b000 	ldr.w	fp, [r9]
 800666a:	b2a1      	uxth	r1, r4
 800666c:	fa1f fb8b 	uxth.w	fp, fp
 8006670:	fb0a b101 	mla	r1, sl, r1, fp
 8006674:	4411      	add	r1, r2
 8006676:	f8d9 2000 	ldr.w	r2, [r9]
 800667a:	0c24      	lsrs	r4, r4, #16
 800667c:	0c12      	lsrs	r2, r2, #16
 800667e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006682:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006686:	b289      	uxth	r1, r1
 8006688:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800668c:	45f4      	cmp	ip, lr
 800668e:	f849 1b04 	str.w	r1, [r9], #4
 8006692:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006696:	d8e4      	bhi.n	8006662 <__multiply+0xaa>
 8006698:	9901      	ldr	r1, [sp, #4]
 800669a:	5072      	str	r2, [r6, r1]
 800669c:	9a03      	ldr	r2, [sp, #12]
 800669e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066a2:	3304      	adds	r3, #4
 80066a4:	f1b9 0f00 	cmp.w	r9, #0
 80066a8:	d01f      	beq.n	80066ea <__multiply+0x132>
 80066aa:	6834      	ldr	r4, [r6, #0]
 80066ac:	f105 0114 	add.w	r1, r5, #20
 80066b0:	46b6      	mov	lr, r6
 80066b2:	f04f 0a00 	mov.w	sl, #0
 80066b6:	880a      	ldrh	r2, [r1, #0]
 80066b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80066bc:	fb09 b202 	mla	r2, r9, r2, fp
 80066c0:	4492      	add	sl, r2
 80066c2:	b2a4      	uxth	r4, r4
 80066c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80066c8:	f84e 4b04 	str.w	r4, [lr], #4
 80066cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80066d0:	f8be 2000 	ldrh.w	r2, [lr]
 80066d4:	0c24      	lsrs	r4, r4, #16
 80066d6:	fb09 2404 	mla	r4, r9, r4, r2
 80066da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066de:	458c      	cmp	ip, r1
 80066e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066e4:	d8e7      	bhi.n	80066b6 <__multiply+0xfe>
 80066e6:	9a01      	ldr	r2, [sp, #4]
 80066e8:	50b4      	str	r4, [r6, r2]
 80066ea:	3604      	adds	r6, #4
 80066ec:	e7a3      	b.n	8006636 <__multiply+0x7e>
 80066ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1a5      	bne.n	8006642 <__multiply+0x8a>
 80066f6:	3f01      	subs	r7, #1
 80066f8:	e7a1      	b.n	800663e <__multiply+0x86>
 80066fa:	bf00      	nop
 80066fc:	08007bb7 	.word	0x08007bb7
 8006700:	08007bc8 	.word	0x08007bc8

08006704 <__pow5mult>:
 8006704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006708:	4615      	mov	r5, r2
 800670a:	f012 0203 	ands.w	r2, r2, #3
 800670e:	4606      	mov	r6, r0
 8006710:	460f      	mov	r7, r1
 8006712:	d007      	beq.n	8006724 <__pow5mult+0x20>
 8006714:	4c25      	ldr	r4, [pc, #148]	; (80067ac <__pow5mult+0xa8>)
 8006716:	3a01      	subs	r2, #1
 8006718:	2300      	movs	r3, #0
 800671a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800671e:	f7ff fe9b 	bl	8006458 <__multadd>
 8006722:	4607      	mov	r7, r0
 8006724:	10ad      	asrs	r5, r5, #2
 8006726:	d03d      	beq.n	80067a4 <__pow5mult+0xa0>
 8006728:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800672a:	b97c      	cbnz	r4, 800674c <__pow5mult+0x48>
 800672c:	2010      	movs	r0, #16
 800672e:	f7ff fe1b 	bl	8006368 <malloc>
 8006732:	4602      	mov	r2, r0
 8006734:	6270      	str	r0, [r6, #36]	; 0x24
 8006736:	b928      	cbnz	r0, 8006744 <__pow5mult+0x40>
 8006738:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <__pow5mult+0xac>)
 800673a:	481e      	ldr	r0, [pc, #120]	; (80067b4 <__pow5mult+0xb0>)
 800673c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006740:	f000 fbcc 	bl	8006edc <__assert_func>
 8006744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006748:	6004      	str	r4, [r0, #0]
 800674a:	60c4      	str	r4, [r0, #12]
 800674c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006754:	b94c      	cbnz	r4, 800676a <__pow5mult+0x66>
 8006756:	f240 2171 	movw	r1, #625	; 0x271
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff ff16 	bl	800658c <__i2b>
 8006760:	2300      	movs	r3, #0
 8006762:	f8c8 0008 	str.w	r0, [r8, #8]
 8006766:	4604      	mov	r4, r0
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	07eb      	lsls	r3, r5, #31
 8006770:	d50a      	bpl.n	8006788 <__pow5mult+0x84>
 8006772:	4639      	mov	r1, r7
 8006774:	4622      	mov	r2, r4
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ff1e 	bl	80065b8 <__multiply>
 800677c:	4639      	mov	r1, r7
 800677e:	4680      	mov	r8, r0
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff fe47 	bl	8006414 <_Bfree>
 8006786:	4647      	mov	r7, r8
 8006788:	106d      	asrs	r5, r5, #1
 800678a:	d00b      	beq.n	80067a4 <__pow5mult+0xa0>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	b938      	cbnz	r0, 80067a0 <__pow5mult+0x9c>
 8006790:	4622      	mov	r2, r4
 8006792:	4621      	mov	r1, r4
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ff0f 	bl	80065b8 <__multiply>
 800679a:	6020      	str	r0, [r4, #0]
 800679c:	f8c0 9000 	str.w	r9, [r0]
 80067a0:	4604      	mov	r4, r0
 80067a2:	e7e4      	b.n	800676e <__pow5mult+0x6a>
 80067a4:	4638      	mov	r0, r7
 80067a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067aa:	bf00      	nop
 80067ac:	08007d18 	.word	0x08007d18
 80067b0:	08007b41 	.word	0x08007b41
 80067b4:	08007bc8 	.word	0x08007bc8

080067b8 <__lshift>:
 80067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	460c      	mov	r4, r1
 80067be:	6849      	ldr	r1, [r1, #4]
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	4607      	mov	r7, r0
 80067ca:	4691      	mov	r9, r2
 80067cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067d0:	f108 0601 	add.w	r6, r8, #1
 80067d4:	42b3      	cmp	r3, r6
 80067d6:	db0b      	blt.n	80067f0 <__lshift+0x38>
 80067d8:	4638      	mov	r0, r7
 80067da:	f7ff fddb 	bl	8006394 <_Balloc>
 80067de:	4605      	mov	r5, r0
 80067e0:	b948      	cbnz	r0, 80067f6 <__lshift+0x3e>
 80067e2:	4602      	mov	r2, r0
 80067e4:	4b28      	ldr	r3, [pc, #160]	; (8006888 <__lshift+0xd0>)
 80067e6:	4829      	ldr	r0, [pc, #164]	; (800688c <__lshift+0xd4>)
 80067e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067ec:	f000 fb76 	bl	8006edc <__assert_func>
 80067f0:	3101      	adds	r1, #1
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	e7ee      	b.n	80067d4 <__lshift+0x1c>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f100 0114 	add.w	r1, r0, #20
 80067fc:	f100 0210 	add.w	r2, r0, #16
 8006800:	4618      	mov	r0, r3
 8006802:	4553      	cmp	r3, sl
 8006804:	db33      	blt.n	800686e <__lshift+0xb6>
 8006806:	6920      	ldr	r0, [r4, #16]
 8006808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800680c:	f104 0314 	add.w	r3, r4, #20
 8006810:	f019 091f 	ands.w	r9, r9, #31
 8006814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800681c:	d02b      	beq.n	8006876 <__lshift+0xbe>
 800681e:	f1c9 0e20 	rsb	lr, r9, #32
 8006822:	468a      	mov	sl, r1
 8006824:	2200      	movs	r2, #0
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	fa00 f009 	lsl.w	r0, r0, r9
 800682c:	4302      	orrs	r2, r0
 800682e:	f84a 2b04 	str.w	r2, [sl], #4
 8006832:	f853 2b04 	ldr.w	r2, [r3], #4
 8006836:	459c      	cmp	ip, r3
 8006838:	fa22 f20e 	lsr.w	r2, r2, lr
 800683c:	d8f3      	bhi.n	8006826 <__lshift+0x6e>
 800683e:	ebac 0304 	sub.w	r3, ip, r4
 8006842:	3b15      	subs	r3, #21
 8006844:	f023 0303 	bic.w	r3, r3, #3
 8006848:	3304      	adds	r3, #4
 800684a:	f104 0015 	add.w	r0, r4, #21
 800684e:	4584      	cmp	ip, r0
 8006850:	bf38      	it	cc
 8006852:	2304      	movcc	r3, #4
 8006854:	50ca      	str	r2, [r1, r3]
 8006856:	b10a      	cbz	r2, 800685c <__lshift+0xa4>
 8006858:	f108 0602 	add.w	r6, r8, #2
 800685c:	3e01      	subs	r6, #1
 800685e:	4638      	mov	r0, r7
 8006860:	612e      	str	r6, [r5, #16]
 8006862:	4621      	mov	r1, r4
 8006864:	f7ff fdd6 	bl	8006414 <_Bfree>
 8006868:	4628      	mov	r0, r5
 800686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006872:	3301      	adds	r3, #1
 8006874:	e7c5      	b.n	8006802 <__lshift+0x4a>
 8006876:	3904      	subs	r1, #4
 8006878:	f853 2b04 	ldr.w	r2, [r3], #4
 800687c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006880:	459c      	cmp	ip, r3
 8006882:	d8f9      	bhi.n	8006878 <__lshift+0xc0>
 8006884:	e7ea      	b.n	800685c <__lshift+0xa4>
 8006886:	bf00      	nop
 8006888:	08007bb7 	.word	0x08007bb7
 800688c:	08007bc8 	.word	0x08007bc8

08006890 <__mcmp>:
 8006890:	b530      	push	{r4, r5, lr}
 8006892:	6902      	ldr	r2, [r0, #16]
 8006894:	690c      	ldr	r4, [r1, #16]
 8006896:	1b12      	subs	r2, r2, r4
 8006898:	d10e      	bne.n	80068b8 <__mcmp+0x28>
 800689a:	f100 0314 	add.w	r3, r0, #20
 800689e:	3114      	adds	r1, #20
 80068a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80068a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80068a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80068ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80068b0:	42a5      	cmp	r5, r4
 80068b2:	d003      	beq.n	80068bc <__mcmp+0x2c>
 80068b4:	d305      	bcc.n	80068c2 <__mcmp+0x32>
 80068b6:	2201      	movs	r2, #1
 80068b8:	4610      	mov	r0, r2
 80068ba:	bd30      	pop	{r4, r5, pc}
 80068bc:	4283      	cmp	r3, r0
 80068be:	d3f3      	bcc.n	80068a8 <__mcmp+0x18>
 80068c0:	e7fa      	b.n	80068b8 <__mcmp+0x28>
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	e7f7      	b.n	80068b8 <__mcmp+0x28>

080068c8 <__mdiff>:
 80068c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	4606      	mov	r6, r0
 80068d0:	4611      	mov	r1, r2
 80068d2:	4620      	mov	r0, r4
 80068d4:	4617      	mov	r7, r2
 80068d6:	f7ff ffdb 	bl	8006890 <__mcmp>
 80068da:	1e05      	subs	r5, r0, #0
 80068dc:	d110      	bne.n	8006900 <__mdiff+0x38>
 80068de:	4629      	mov	r1, r5
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7ff fd57 	bl	8006394 <_Balloc>
 80068e6:	b930      	cbnz	r0, 80068f6 <__mdiff+0x2e>
 80068e8:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <__mdiff+0x108>)
 80068ea:	4602      	mov	r2, r0
 80068ec:	f240 2132 	movw	r1, #562	; 0x232
 80068f0:	4838      	ldr	r0, [pc, #224]	; (80069d4 <__mdiff+0x10c>)
 80068f2:	f000 faf3 	bl	8006edc <__assert_func>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006900:	bfa4      	itt	ge
 8006902:	463b      	movge	r3, r7
 8006904:	4627      	movge	r7, r4
 8006906:	4630      	mov	r0, r6
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	bfa6      	itte	ge
 800690c:	461c      	movge	r4, r3
 800690e:	2500      	movge	r5, #0
 8006910:	2501      	movlt	r5, #1
 8006912:	f7ff fd3f 	bl	8006394 <_Balloc>
 8006916:	b920      	cbnz	r0, 8006922 <__mdiff+0x5a>
 8006918:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <__mdiff+0x108>)
 800691a:	4602      	mov	r2, r0
 800691c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006920:	e7e6      	b.n	80068f0 <__mdiff+0x28>
 8006922:	693e      	ldr	r6, [r7, #16]
 8006924:	60c5      	str	r5, [r0, #12]
 8006926:	6925      	ldr	r5, [r4, #16]
 8006928:	f107 0114 	add.w	r1, r7, #20
 800692c:	f104 0914 	add.w	r9, r4, #20
 8006930:	f100 0e14 	add.w	lr, r0, #20
 8006934:	f107 0210 	add.w	r2, r7, #16
 8006938:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800693c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006940:	46f2      	mov	sl, lr
 8006942:	2700      	movs	r7, #0
 8006944:	f859 3b04 	ldr.w	r3, [r9], #4
 8006948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800694c:	fa1f f883 	uxth.w	r8, r3
 8006950:	fa17 f78b 	uxtah	r7, r7, fp
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	eba7 0808 	sub.w	r8, r7, r8
 800695a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800695e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006962:	fa1f f888 	uxth.w	r8, r8
 8006966:	141f      	asrs	r7, r3, #16
 8006968:	454d      	cmp	r5, r9
 800696a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800696e:	f84a 3b04 	str.w	r3, [sl], #4
 8006972:	d8e7      	bhi.n	8006944 <__mdiff+0x7c>
 8006974:	1b2b      	subs	r3, r5, r4
 8006976:	3b15      	subs	r3, #21
 8006978:	f023 0303 	bic.w	r3, r3, #3
 800697c:	3304      	adds	r3, #4
 800697e:	3415      	adds	r4, #21
 8006980:	42a5      	cmp	r5, r4
 8006982:	bf38      	it	cc
 8006984:	2304      	movcc	r3, #4
 8006986:	4419      	add	r1, r3
 8006988:	4473      	add	r3, lr
 800698a:	469e      	mov	lr, r3
 800698c:	460d      	mov	r5, r1
 800698e:	4565      	cmp	r5, ip
 8006990:	d30e      	bcc.n	80069b0 <__mdiff+0xe8>
 8006992:	f10c 0203 	add.w	r2, ip, #3
 8006996:	1a52      	subs	r2, r2, r1
 8006998:	f022 0203 	bic.w	r2, r2, #3
 800699c:	3903      	subs	r1, #3
 800699e:	458c      	cmp	ip, r1
 80069a0:	bf38      	it	cc
 80069a2:	2200      	movcc	r2, #0
 80069a4:	441a      	add	r2, r3
 80069a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80069aa:	b17b      	cbz	r3, 80069cc <__mdiff+0x104>
 80069ac:	6106      	str	r6, [r0, #16]
 80069ae:	e7a5      	b.n	80068fc <__mdiff+0x34>
 80069b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80069b4:	fa17 f488 	uxtah	r4, r7, r8
 80069b8:	1422      	asrs	r2, r4, #16
 80069ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80069be:	b2a4      	uxth	r4, r4
 80069c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80069c4:	f84e 4b04 	str.w	r4, [lr], #4
 80069c8:	1417      	asrs	r7, r2, #16
 80069ca:	e7e0      	b.n	800698e <__mdiff+0xc6>
 80069cc:	3e01      	subs	r6, #1
 80069ce:	e7ea      	b.n	80069a6 <__mdiff+0xde>
 80069d0:	08007bb7 	.word	0x08007bb7
 80069d4:	08007bc8 	.word	0x08007bc8

080069d8 <__d2b>:
 80069d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069dc:	4689      	mov	r9, r1
 80069de:	2101      	movs	r1, #1
 80069e0:	ec57 6b10 	vmov	r6, r7, d0
 80069e4:	4690      	mov	r8, r2
 80069e6:	f7ff fcd5 	bl	8006394 <_Balloc>
 80069ea:	4604      	mov	r4, r0
 80069ec:	b930      	cbnz	r0, 80069fc <__d2b+0x24>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b25      	ldr	r3, [pc, #148]	; (8006a88 <__d2b+0xb0>)
 80069f2:	4826      	ldr	r0, [pc, #152]	; (8006a8c <__d2b+0xb4>)
 80069f4:	f240 310a 	movw	r1, #778	; 0x30a
 80069f8:	f000 fa70 	bl	8006edc <__assert_func>
 80069fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a04:	bb35      	cbnz	r5, 8006a54 <__d2b+0x7c>
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	d028      	beq.n	8006a5e <__d2b+0x86>
 8006a0c:	4668      	mov	r0, sp
 8006a0e:	9600      	str	r6, [sp, #0]
 8006a10:	f7ff fd8c 	bl	800652c <__lo0bits>
 8006a14:	9900      	ldr	r1, [sp, #0]
 8006a16:	b300      	cbz	r0, 8006a5a <__d2b+0x82>
 8006a18:	9a01      	ldr	r2, [sp, #4]
 8006a1a:	f1c0 0320 	rsb	r3, r0, #32
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	430b      	orrs	r3, r1
 8006a24:	40c2      	lsrs	r2, r0
 8006a26:	6163      	str	r3, [r4, #20]
 8006a28:	9201      	str	r2, [sp, #4]
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	61a3      	str	r3, [r4, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf14      	ite	ne
 8006a32:	2202      	movne	r2, #2
 8006a34:	2201      	moveq	r2, #1
 8006a36:	6122      	str	r2, [r4, #16]
 8006a38:	b1d5      	cbz	r5, 8006a70 <__d2b+0x98>
 8006a3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a3e:	4405      	add	r5, r0
 8006a40:	f8c9 5000 	str.w	r5, [r9]
 8006a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a48:	f8c8 0000 	str.w	r0, [r8]
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	b003      	add	sp, #12
 8006a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a58:	e7d5      	b.n	8006a06 <__d2b+0x2e>
 8006a5a:	6161      	str	r1, [r4, #20]
 8006a5c:	e7e5      	b.n	8006a2a <__d2b+0x52>
 8006a5e:	a801      	add	r0, sp, #4
 8006a60:	f7ff fd64 	bl	800652c <__lo0bits>
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	6163      	str	r3, [r4, #20]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	6122      	str	r2, [r4, #16]
 8006a6c:	3020      	adds	r0, #32
 8006a6e:	e7e3      	b.n	8006a38 <__d2b+0x60>
 8006a70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a78:	f8c9 0000 	str.w	r0, [r9]
 8006a7c:	6918      	ldr	r0, [r3, #16]
 8006a7e:	f7ff fd35 	bl	80064ec <__hi0bits>
 8006a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a86:	e7df      	b.n	8006a48 <__d2b+0x70>
 8006a88:	08007bb7 	.word	0x08007bb7
 8006a8c:	08007bc8 	.word	0x08007bc8

08006a90 <_calloc_r>:
 8006a90:	b513      	push	{r0, r1, r4, lr}
 8006a92:	434a      	muls	r2, r1
 8006a94:	4611      	mov	r1, r2
 8006a96:	9201      	str	r2, [sp, #4]
 8006a98:	f000 f85a 	bl	8006b50 <_malloc_r>
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	b118      	cbz	r0, 8006aa8 <_calloc_r+0x18>
 8006aa0:	9a01      	ldr	r2, [sp, #4]
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	f7fe f950 	bl	8004d48 <memset>
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	b002      	add	sp, #8
 8006aac:	bd10      	pop	{r4, pc}
	...

08006ab0 <_free_r>:
 8006ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ab2:	2900      	cmp	r1, #0
 8006ab4:	d048      	beq.n	8006b48 <_free_r+0x98>
 8006ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aba:	9001      	str	r0, [sp, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f1a1 0404 	sub.w	r4, r1, #4
 8006ac2:	bfb8      	it	lt
 8006ac4:	18e4      	addlt	r4, r4, r3
 8006ac6:	f000 fa65 	bl	8006f94 <__malloc_lock>
 8006aca:	4a20      	ldr	r2, [pc, #128]	; (8006b4c <_free_r+0x9c>)
 8006acc:	9801      	ldr	r0, [sp, #4]
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	4615      	mov	r5, r2
 8006ad2:	b933      	cbnz	r3, 8006ae2 <_free_r+0x32>
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	6014      	str	r4, [r2, #0]
 8006ad8:	b003      	add	sp, #12
 8006ada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ade:	f000 ba5f 	b.w	8006fa0 <__malloc_unlock>
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	d90b      	bls.n	8006afe <_free_r+0x4e>
 8006ae6:	6821      	ldr	r1, [r4, #0]
 8006ae8:	1862      	adds	r2, r4, r1
 8006aea:	4293      	cmp	r3, r2
 8006aec:	bf04      	itt	eq
 8006aee:	681a      	ldreq	r2, [r3, #0]
 8006af0:	685b      	ldreq	r3, [r3, #4]
 8006af2:	6063      	str	r3, [r4, #4]
 8006af4:	bf04      	itt	eq
 8006af6:	1852      	addeq	r2, r2, r1
 8006af8:	6022      	streq	r2, [r4, #0]
 8006afa:	602c      	str	r4, [r5, #0]
 8006afc:	e7ec      	b.n	8006ad8 <_free_r+0x28>
 8006afe:	461a      	mov	r2, r3
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b10b      	cbz	r3, 8006b08 <_free_r+0x58>
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	d9fa      	bls.n	8006afe <_free_r+0x4e>
 8006b08:	6811      	ldr	r1, [r2, #0]
 8006b0a:	1855      	adds	r5, r2, r1
 8006b0c:	42a5      	cmp	r5, r4
 8006b0e:	d10b      	bne.n	8006b28 <_free_r+0x78>
 8006b10:	6824      	ldr	r4, [r4, #0]
 8006b12:	4421      	add	r1, r4
 8006b14:	1854      	adds	r4, r2, r1
 8006b16:	42a3      	cmp	r3, r4
 8006b18:	6011      	str	r1, [r2, #0]
 8006b1a:	d1dd      	bne.n	8006ad8 <_free_r+0x28>
 8006b1c:	681c      	ldr	r4, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	6053      	str	r3, [r2, #4]
 8006b22:	4421      	add	r1, r4
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	e7d7      	b.n	8006ad8 <_free_r+0x28>
 8006b28:	d902      	bls.n	8006b30 <_free_r+0x80>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	6003      	str	r3, [r0, #0]
 8006b2e:	e7d3      	b.n	8006ad8 <_free_r+0x28>
 8006b30:	6825      	ldr	r5, [r4, #0]
 8006b32:	1961      	adds	r1, r4, r5
 8006b34:	428b      	cmp	r3, r1
 8006b36:	bf04      	itt	eq
 8006b38:	6819      	ldreq	r1, [r3, #0]
 8006b3a:	685b      	ldreq	r3, [r3, #4]
 8006b3c:	6063      	str	r3, [r4, #4]
 8006b3e:	bf04      	itt	eq
 8006b40:	1949      	addeq	r1, r1, r5
 8006b42:	6021      	streq	r1, [r4, #0]
 8006b44:	6054      	str	r4, [r2, #4]
 8006b46:	e7c7      	b.n	8006ad8 <_free_r+0x28>
 8006b48:	b003      	add	sp, #12
 8006b4a:	bd30      	pop	{r4, r5, pc}
 8006b4c:	2000020c 	.word	0x2000020c

08006b50 <_malloc_r>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	1ccd      	adds	r5, r1, #3
 8006b54:	f025 0503 	bic.w	r5, r5, #3
 8006b58:	3508      	adds	r5, #8
 8006b5a:	2d0c      	cmp	r5, #12
 8006b5c:	bf38      	it	cc
 8006b5e:	250c      	movcc	r5, #12
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	4606      	mov	r6, r0
 8006b64:	db01      	blt.n	8006b6a <_malloc_r+0x1a>
 8006b66:	42a9      	cmp	r1, r5
 8006b68:	d903      	bls.n	8006b72 <_malloc_r+0x22>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	2000      	movs	r0, #0
 8006b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b72:	f000 fa0f 	bl	8006f94 <__malloc_lock>
 8006b76:	4921      	ldr	r1, [pc, #132]	; (8006bfc <_malloc_r+0xac>)
 8006b78:	680a      	ldr	r2, [r1, #0]
 8006b7a:	4614      	mov	r4, r2
 8006b7c:	b99c      	cbnz	r4, 8006ba6 <_malloc_r+0x56>
 8006b7e:	4f20      	ldr	r7, [pc, #128]	; (8006c00 <_malloc_r+0xb0>)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	b923      	cbnz	r3, 8006b8e <_malloc_r+0x3e>
 8006b84:	4621      	mov	r1, r4
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 f998 	bl	8006ebc <_sbrk_r>
 8006b8c:	6038      	str	r0, [r7, #0]
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4630      	mov	r0, r6
 8006b92:	f000 f993 	bl	8006ebc <_sbrk_r>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d123      	bne.n	8006be2 <_malloc_r+0x92>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	6033      	str	r3, [r6, #0]
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f000 f9fe 	bl	8006fa0 <__malloc_unlock>
 8006ba4:	e7e3      	b.n	8006b6e <_malloc_r+0x1e>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	1b5b      	subs	r3, r3, r5
 8006baa:	d417      	bmi.n	8006bdc <_malloc_r+0x8c>
 8006bac:	2b0b      	cmp	r3, #11
 8006bae:	d903      	bls.n	8006bb8 <_malloc_r+0x68>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	441c      	add	r4, r3
 8006bb4:	6025      	str	r5, [r4, #0]
 8006bb6:	e004      	b.n	8006bc2 <_malloc_r+0x72>
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	42a2      	cmp	r2, r4
 8006bbc:	bf0c      	ite	eq
 8006bbe:	600b      	streq	r3, [r1, #0]
 8006bc0:	6053      	strne	r3, [r2, #4]
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f000 f9ec 	bl	8006fa0 <__malloc_unlock>
 8006bc8:	f104 000b 	add.w	r0, r4, #11
 8006bcc:	1d23      	adds	r3, r4, #4
 8006bce:	f020 0007 	bic.w	r0, r0, #7
 8006bd2:	1ac2      	subs	r2, r0, r3
 8006bd4:	d0cc      	beq.n	8006b70 <_malloc_r+0x20>
 8006bd6:	1a1b      	subs	r3, r3, r0
 8006bd8:	50a3      	str	r3, [r4, r2]
 8006bda:	e7c9      	b.n	8006b70 <_malloc_r+0x20>
 8006bdc:	4622      	mov	r2, r4
 8006bde:	6864      	ldr	r4, [r4, #4]
 8006be0:	e7cc      	b.n	8006b7c <_malloc_r+0x2c>
 8006be2:	1cc4      	adds	r4, r0, #3
 8006be4:	f024 0403 	bic.w	r4, r4, #3
 8006be8:	42a0      	cmp	r0, r4
 8006bea:	d0e3      	beq.n	8006bb4 <_malloc_r+0x64>
 8006bec:	1a21      	subs	r1, r4, r0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f000 f964 	bl	8006ebc <_sbrk_r>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d1dd      	bne.n	8006bb4 <_malloc_r+0x64>
 8006bf8:	e7cf      	b.n	8006b9a <_malloc_r+0x4a>
 8006bfa:	bf00      	nop
 8006bfc:	2000020c 	.word	0x2000020c
 8006c00:	20000210 	.word	0x20000210

08006c04 <__ssputs_r>:
 8006c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	688e      	ldr	r6, [r1, #8]
 8006c0a:	429e      	cmp	r6, r3
 8006c0c:	4682      	mov	sl, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	4690      	mov	r8, r2
 8006c12:	461f      	mov	r7, r3
 8006c14:	d838      	bhi.n	8006c88 <__ssputs_r+0x84>
 8006c16:	898a      	ldrh	r2, [r1, #12]
 8006c18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c1c:	d032      	beq.n	8006c84 <__ssputs_r+0x80>
 8006c1e:	6825      	ldr	r5, [r4, #0]
 8006c20:	6909      	ldr	r1, [r1, #16]
 8006c22:	eba5 0901 	sub.w	r9, r5, r1
 8006c26:	6965      	ldr	r5, [r4, #20]
 8006c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c30:	3301      	adds	r3, #1
 8006c32:	444b      	add	r3, r9
 8006c34:	106d      	asrs	r5, r5, #1
 8006c36:	429d      	cmp	r5, r3
 8006c38:	bf38      	it	cc
 8006c3a:	461d      	movcc	r5, r3
 8006c3c:	0553      	lsls	r3, r2, #21
 8006c3e:	d531      	bpl.n	8006ca4 <__ssputs_r+0xa0>
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7ff ff85 	bl	8006b50 <_malloc_r>
 8006c46:	4606      	mov	r6, r0
 8006c48:	b950      	cbnz	r0, 8006c60 <__ssputs_r+0x5c>
 8006c4a:	230c      	movs	r3, #12
 8006c4c:	f8ca 3000 	str.w	r3, [sl]
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c60:	6921      	ldr	r1, [r4, #16]
 8006c62:	464a      	mov	r2, r9
 8006c64:	f7ff fb88 	bl	8006378 <memcpy>
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c72:	81a3      	strh	r3, [r4, #12]
 8006c74:	6126      	str	r6, [r4, #16]
 8006c76:	6165      	str	r5, [r4, #20]
 8006c78:	444e      	add	r6, r9
 8006c7a:	eba5 0509 	sub.w	r5, r5, r9
 8006c7e:	6026      	str	r6, [r4, #0]
 8006c80:	60a5      	str	r5, [r4, #8]
 8006c82:	463e      	mov	r6, r7
 8006c84:	42be      	cmp	r6, r7
 8006c86:	d900      	bls.n	8006c8a <__ssputs_r+0x86>
 8006c88:	463e      	mov	r6, r7
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	4641      	mov	r1, r8
 8006c90:	f000 f966 	bl	8006f60 <memmove>
 8006c94:	68a3      	ldr	r3, [r4, #8]
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	4432      	add	r2, r6
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	6022      	str	r2, [r4, #0]
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e7db      	b.n	8006c5c <__ssputs_r+0x58>
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	f000 f981 	bl	8006fac <_realloc_r>
 8006caa:	4606      	mov	r6, r0
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d1e1      	bne.n	8006c74 <__ssputs_r+0x70>
 8006cb0:	6921      	ldr	r1, [r4, #16]
 8006cb2:	4650      	mov	r0, sl
 8006cb4:	f7ff fefc 	bl	8006ab0 <_free_r>
 8006cb8:	e7c7      	b.n	8006c4a <__ssputs_r+0x46>
	...

08006cbc <_svfiprintf_r>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	898b      	ldrh	r3, [r1, #12]
 8006cc4:	061b      	lsls	r3, r3, #24
 8006cc6:	b09d      	sub	sp, #116	; 0x74
 8006cc8:	4607      	mov	r7, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	4614      	mov	r4, r2
 8006cce:	d50e      	bpl.n	8006cee <_svfiprintf_r+0x32>
 8006cd0:	690b      	ldr	r3, [r1, #16]
 8006cd2:	b963      	cbnz	r3, 8006cee <_svfiprintf_r+0x32>
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	f7ff ff3b 	bl	8006b50 <_malloc_r>
 8006cda:	6028      	str	r0, [r5, #0]
 8006cdc:	6128      	str	r0, [r5, #16]
 8006cde:	b920      	cbnz	r0, 8006cea <_svfiprintf_r+0x2e>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e0d1      	b.n	8006e8e <_svfiprintf_r+0x1d2>
 8006cea:	2340      	movs	r3, #64	; 0x40
 8006cec:	616b      	str	r3, [r5, #20]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfc:	2330      	movs	r3, #48	; 0x30
 8006cfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ea8 <_svfiprintf_r+0x1ec>
 8006d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d06:	f04f 0901 	mov.w	r9, #1
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	469a      	mov	sl, r3
 8006d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d12:	b10a      	cbz	r2, 8006d18 <_svfiprintf_r+0x5c>
 8006d14:	2a25      	cmp	r2, #37	; 0x25
 8006d16:	d1f9      	bne.n	8006d0c <_svfiprintf_r+0x50>
 8006d18:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1c:	d00b      	beq.n	8006d36 <_svfiprintf_r+0x7a>
 8006d1e:	465b      	mov	r3, fp
 8006d20:	4622      	mov	r2, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff ff6d 	bl	8006c04 <__ssputs_r>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f000 80aa 	beq.w	8006e84 <_svfiprintf_r+0x1c8>
 8006d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d32:	445a      	add	r2, fp
 8006d34:	9209      	str	r2, [sp, #36]	; 0x24
 8006d36:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80a2 	beq.w	8006e84 <_svfiprintf_r+0x1c8>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4a:	f10a 0a01 	add.w	sl, sl, #1
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	9307      	str	r3, [sp, #28]
 8006d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d56:	931a      	str	r3, [sp, #104]	; 0x68
 8006d58:	4654      	mov	r4, sl
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	4851      	ldr	r0, [pc, #324]	; (8006ea8 <_svfiprintf_r+0x1ec>)
 8006d62:	f7f9 fa3d 	bl	80001e0 <memchr>
 8006d66:	9a04      	ldr	r2, [sp, #16]
 8006d68:	b9d8      	cbnz	r0, 8006da2 <_svfiprintf_r+0xe6>
 8006d6a:	06d0      	lsls	r0, r2, #27
 8006d6c:	bf44      	itt	mi
 8006d6e:	2320      	movmi	r3, #32
 8006d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d74:	0711      	lsls	r1, r2, #28
 8006d76:	bf44      	itt	mi
 8006d78:	232b      	movmi	r3, #43	; 0x2b
 8006d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d82:	2b2a      	cmp	r3, #42	; 0x2a
 8006d84:	d015      	beq.n	8006db2 <_svfiprintf_r+0xf6>
 8006d86:	9a07      	ldr	r2, [sp, #28]
 8006d88:	4654      	mov	r4, sl
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f04f 0c0a 	mov.w	ip, #10
 8006d90:	4621      	mov	r1, r4
 8006d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d96:	3b30      	subs	r3, #48	; 0x30
 8006d98:	2b09      	cmp	r3, #9
 8006d9a:	d94e      	bls.n	8006e3a <_svfiprintf_r+0x17e>
 8006d9c:	b1b0      	cbz	r0, 8006dcc <_svfiprintf_r+0x110>
 8006d9e:	9207      	str	r2, [sp, #28]
 8006da0:	e014      	b.n	8006dcc <_svfiprintf_r+0x110>
 8006da2:	eba0 0308 	sub.w	r3, r0, r8
 8006da6:	fa09 f303 	lsl.w	r3, r9, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	46a2      	mov	sl, r4
 8006db0:	e7d2      	b.n	8006d58 <_svfiprintf_r+0x9c>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	1d19      	adds	r1, r3, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	9103      	str	r1, [sp, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfbb      	ittet	lt
 8006dbe:	425b      	neglt	r3, r3
 8006dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc4:	9307      	strge	r3, [sp, #28]
 8006dc6:	9307      	strlt	r3, [sp, #28]
 8006dc8:	bfb8      	it	lt
 8006dca:	9204      	strlt	r2, [sp, #16]
 8006dcc:	7823      	ldrb	r3, [r4, #0]
 8006dce:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd0:	d10c      	bne.n	8006dec <_svfiprintf_r+0x130>
 8006dd2:	7863      	ldrb	r3, [r4, #1]
 8006dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd6:	d135      	bne.n	8006e44 <_svfiprintf_r+0x188>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	9203      	str	r2, [sp, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfb8      	it	lt
 8006de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006de8:	3402      	adds	r4, #2
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006eb8 <_svfiprintf_r+0x1fc>
 8006df0:	7821      	ldrb	r1, [r4, #0]
 8006df2:	2203      	movs	r2, #3
 8006df4:	4650      	mov	r0, sl
 8006df6:	f7f9 f9f3 	bl	80001e0 <memchr>
 8006dfa:	b140      	cbz	r0, 8006e0e <_svfiprintf_r+0x152>
 8006dfc:	2340      	movs	r3, #64	; 0x40
 8006dfe:	eba0 000a 	sub.w	r0, r0, sl
 8006e02:	fa03 f000 	lsl.w	r0, r3, r0
 8006e06:	9b04      	ldr	r3, [sp, #16]
 8006e08:	4303      	orrs	r3, r0
 8006e0a:	3401      	adds	r4, #1
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e12:	4826      	ldr	r0, [pc, #152]	; (8006eac <_svfiprintf_r+0x1f0>)
 8006e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e18:	2206      	movs	r2, #6
 8006e1a:	f7f9 f9e1 	bl	80001e0 <memchr>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d038      	beq.n	8006e94 <_svfiprintf_r+0x1d8>
 8006e22:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <_svfiprintf_r+0x1f4>)
 8006e24:	bb1b      	cbnz	r3, 8006e6e <_svfiprintf_r+0x1b2>
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	3307      	adds	r3, #7
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	3308      	adds	r3, #8
 8006e30:	9303      	str	r3, [sp, #12]
 8006e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e34:	4433      	add	r3, r6
 8006e36:	9309      	str	r3, [sp, #36]	; 0x24
 8006e38:	e767      	b.n	8006d0a <_svfiprintf_r+0x4e>
 8006e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e3e:	460c      	mov	r4, r1
 8006e40:	2001      	movs	r0, #1
 8006e42:	e7a5      	b.n	8006d90 <_svfiprintf_r+0xd4>
 8006e44:	2300      	movs	r3, #0
 8006e46:	3401      	adds	r4, #1
 8006e48:	9305      	str	r3, [sp, #20]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	4620      	mov	r0, r4
 8006e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e56:	3a30      	subs	r2, #48	; 0x30
 8006e58:	2a09      	cmp	r2, #9
 8006e5a:	d903      	bls.n	8006e64 <_svfiprintf_r+0x1a8>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0c5      	beq.n	8006dec <_svfiprintf_r+0x130>
 8006e60:	9105      	str	r1, [sp, #20]
 8006e62:	e7c3      	b.n	8006dec <_svfiprintf_r+0x130>
 8006e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e68:	4604      	mov	r4, r0
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e7f0      	b.n	8006e50 <_svfiprintf_r+0x194>
 8006e6e:	ab03      	add	r3, sp, #12
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	462a      	mov	r2, r5
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <_svfiprintf_r+0x1f8>)
 8006e76:	a904      	add	r1, sp, #16
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f7fe f80d 	bl	8004e98 <_printf_float>
 8006e7e:	1c42      	adds	r2, r0, #1
 8006e80:	4606      	mov	r6, r0
 8006e82:	d1d6      	bne.n	8006e32 <_svfiprintf_r+0x176>
 8006e84:	89ab      	ldrh	r3, [r5, #12]
 8006e86:	065b      	lsls	r3, r3, #25
 8006e88:	f53f af2c 	bmi.w	8006ce4 <_svfiprintf_r+0x28>
 8006e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e8e:	b01d      	add	sp, #116	; 0x74
 8006e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <_svfiprintf_r+0x1f8>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f7fe fa9e 	bl	80053e0 <_printf_i>
 8006ea4:	e7eb      	b.n	8006e7e <_svfiprintf_r+0x1c2>
 8006ea6:	bf00      	nop
 8006ea8:	08007d24 	.word	0x08007d24
 8006eac:	08007d2e 	.word	0x08007d2e
 8006eb0:	08004e99 	.word	0x08004e99
 8006eb4:	08006c05 	.word	0x08006c05
 8006eb8:	08007d2a 	.word	0x08007d2a

08006ebc <_sbrk_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d06      	ldr	r5, [pc, #24]	; (8006ed8 <_sbrk_r+0x1c>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	602b      	str	r3, [r5, #0]
 8006ec8:	f7fa fc46 	bl	8001758 <_sbrk>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_sbrk_r+0x1a>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_sbrk_r+0x1a>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	200003c4 	.word	0x200003c4

08006edc <__assert_func>:
 8006edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ede:	4614      	mov	r4, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <__assert_func+0x2c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	68d8      	ldr	r0, [r3, #12]
 8006eea:	b14c      	cbz	r4, 8006f00 <__assert_func+0x24>
 8006eec:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <__assert_func+0x30>)
 8006eee:	9100      	str	r1, [sp, #0]
 8006ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ef4:	4906      	ldr	r1, [pc, #24]	; (8006f10 <__assert_func+0x34>)
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	f000 f80e 	bl	8006f18 <fiprintf>
 8006efc:	f000 faa4 	bl	8007448 <abort>
 8006f00:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <__assert_func+0x38>)
 8006f02:	461c      	mov	r4, r3
 8006f04:	e7f3      	b.n	8006eee <__assert_func+0x12>
 8006f06:	bf00      	nop
 8006f08:	2000000c 	.word	0x2000000c
 8006f0c:	08007d35 	.word	0x08007d35
 8006f10:	08007d42 	.word	0x08007d42
 8006f14:	08007d70 	.word	0x08007d70

08006f18 <fiprintf>:
 8006f18:	b40e      	push	{r1, r2, r3}
 8006f1a:	b503      	push	{r0, r1, lr}
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	ab03      	add	r3, sp, #12
 8006f20:	4805      	ldr	r0, [pc, #20]	; (8006f38 <fiprintf+0x20>)
 8006f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f26:	6800      	ldr	r0, [r0, #0]
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	f000 f88f 	bl	800704c <_vfiprintf_r>
 8006f2e:	b002      	add	sp, #8
 8006f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f34:	b003      	add	sp, #12
 8006f36:	4770      	bx	lr
 8006f38:	2000000c 	.word	0x2000000c

08006f3c <__ascii_mbtowc>:
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	b901      	cbnz	r1, 8006f42 <__ascii_mbtowc+0x6>
 8006f40:	a901      	add	r1, sp, #4
 8006f42:	b142      	cbz	r2, 8006f56 <__ascii_mbtowc+0x1a>
 8006f44:	b14b      	cbz	r3, 8006f5a <__ascii_mbtowc+0x1e>
 8006f46:	7813      	ldrb	r3, [r2, #0]
 8006f48:	600b      	str	r3, [r1, #0]
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	1e10      	subs	r0, r2, #0
 8006f4e:	bf18      	it	ne
 8006f50:	2001      	movne	r0, #1
 8006f52:	b002      	add	sp, #8
 8006f54:	4770      	bx	lr
 8006f56:	4610      	mov	r0, r2
 8006f58:	e7fb      	b.n	8006f52 <__ascii_mbtowc+0x16>
 8006f5a:	f06f 0001 	mvn.w	r0, #1
 8006f5e:	e7f8      	b.n	8006f52 <__ascii_mbtowc+0x16>

08006f60 <memmove>:
 8006f60:	4288      	cmp	r0, r1
 8006f62:	b510      	push	{r4, lr}
 8006f64:	eb01 0402 	add.w	r4, r1, r2
 8006f68:	d902      	bls.n	8006f70 <memmove+0x10>
 8006f6a:	4284      	cmp	r4, r0
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	d807      	bhi.n	8006f80 <memmove+0x20>
 8006f70:	1e43      	subs	r3, r0, #1
 8006f72:	42a1      	cmp	r1, r4
 8006f74:	d008      	beq.n	8006f88 <memmove+0x28>
 8006f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f7e:	e7f8      	b.n	8006f72 <memmove+0x12>
 8006f80:	4402      	add	r2, r0
 8006f82:	4601      	mov	r1, r0
 8006f84:	428a      	cmp	r2, r1
 8006f86:	d100      	bne.n	8006f8a <memmove+0x2a>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f92:	e7f7      	b.n	8006f84 <memmove+0x24>

08006f94 <__malloc_lock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_lock+0x8>)
 8006f96:	f000 bc17 	b.w	80077c8 <__retarget_lock_acquire_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	200003cc 	.word	0x200003cc

08006fa0 <__malloc_unlock>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__malloc_unlock+0x8>)
 8006fa2:	f000 bc12 	b.w	80077ca <__retarget_lock_release_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	200003cc 	.word	0x200003cc

08006fac <_realloc_r>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	4607      	mov	r7, r0
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	460e      	mov	r6, r1
 8006fb4:	b921      	cbnz	r1, 8006fc0 <_realloc_r+0x14>
 8006fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fba:	4611      	mov	r1, r2
 8006fbc:	f7ff bdc8 	b.w	8006b50 <_malloc_r>
 8006fc0:	b922      	cbnz	r2, 8006fcc <_realloc_r+0x20>
 8006fc2:	f7ff fd75 	bl	8006ab0 <_free_r>
 8006fc6:	4625      	mov	r5, r4
 8006fc8:	4628      	mov	r0, r5
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fcc:	f000 fc62 	bl	8007894 <_malloc_usable_size_r>
 8006fd0:	42a0      	cmp	r0, r4
 8006fd2:	d20f      	bcs.n	8006ff4 <_realloc_r+0x48>
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	f7ff fdba 	bl	8006b50 <_malloc_r>
 8006fdc:	4605      	mov	r5, r0
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d0f2      	beq.n	8006fc8 <_realloc_r+0x1c>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	f7ff f9c7 	bl	8006378 <memcpy>
 8006fea:	4631      	mov	r1, r6
 8006fec:	4638      	mov	r0, r7
 8006fee:	f7ff fd5f 	bl	8006ab0 <_free_r>
 8006ff2:	e7e9      	b.n	8006fc8 <_realloc_r+0x1c>
 8006ff4:	4635      	mov	r5, r6
 8006ff6:	e7e7      	b.n	8006fc8 <_realloc_r+0x1c>

08006ff8 <__sfputc_r>:
 8006ff8:	6893      	ldr	r3, [r2, #8]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	b410      	push	{r4}
 8007000:	6093      	str	r3, [r2, #8]
 8007002:	da08      	bge.n	8007016 <__sfputc_r+0x1e>
 8007004:	6994      	ldr	r4, [r2, #24]
 8007006:	42a3      	cmp	r3, r4
 8007008:	db01      	blt.n	800700e <__sfputc_r+0x16>
 800700a:	290a      	cmp	r1, #10
 800700c:	d103      	bne.n	8007016 <__sfputc_r+0x1e>
 800700e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007012:	f000 b94b 	b.w	80072ac <__swbuf_r>
 8007016:	6813      	ldr	r3, [r2, #0]
 8007018:	1c58      	adds	r0, r3, #1
 800701a:	6010      	str	r0, [r2, #0]
 800701c:	7019      	strb	r1, [r3, #0]
 800701e:	4608      	mov	r0, r1
 8007020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007024:	4770      	bx	lr

08007026 <__sfputs_r>:
 8007026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007028:	4606      	mov	r6, r0
 800702a:	460f      	mov	r7, r1
 800702c:	4614      	mov	r4, r2
 800702e:	18d5      	adds	r5, r2, r3
 8007030:	42ac      	cmp	r4, r5
 8007032:	d101      	bne.n	8007038 <__sfputs_r+0x12>
 8007034:	2000      	movs	r0, #0
 8007036:	e007      	b.n	8007048 <__sfputs_r+0x22>
 8007038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703c:	463a      	mov	r2, r7
 800703e:	4630      	mov	r0, r6
 8007040:	f7ff ffda 	bl	8006ff8 <__sfputc_r>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d1f3      	bne.n	8007030 <__sfputs_r+0xa>
 8007048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800704c <_vfiprintf_r>:
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	460d      	mov	r5, r1
 8007052:	b09d      	sub	sp, #116	; 0x74
 8007054:	4614      	mov	r4, r2
 8007056:	4698      	mov	r8, r3
 8007058:	4606      	mov	r6, r0
 800705a:	b118      	cbz	r0, 8007064 <_vfiprintf_r+0x18>
 800705c:	6983      	ldr	r3, [r0, #24]
 800705e:	b90b      	cbnz	r3, 8007064 <_vfiprintf_r+0x18>
 8007060:	f000 fb14 	bl	800768c <__sinit>
 8007064:	4b89      	ldr	r3, [pc, #548]	; (800728c <_vfiprintf_r+0x240>)
 8007066:	429d      	cmp	r5, r3
 8007068:	d11b      	bne.n	80070a2 <_vfiprintf_r+0x56>
 800706a:	6875      	ldr	r5, [r6, #4]
 800706c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800706e:	07d9      	lsls	r1, r3, #31
 8007070:	d405      	bmi.n	800707e <_vfiprintf_r+0x32>
 8007072:	89ab      	ldrh	r3, [r5, #12]
 8007074:	059a      	lsls	r2, r3, #22
 8007076:	d402      	bmi.n	800707e <_vfiprintf_r+0x32>
 8007078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800707a:	f000 fba5 	bl	80077c8 <__retarget_lock_acquire_recursive>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	071b      	lsls	r3, r3, #28
 8007082:	d501      	bpl.n	8007088 <_vfiprintf_r+0x3c>
 8007084:	692b      	ldr	r3, [r5, #16]
 8007086:	b9eb      	cbnz	r3, 80070c4 <_vfiprintf_r+0x78>
 8007088:	4629      	mov	r1, r5
 800708a:	4630      	mov	r0, r6
 800708c:	f000 f96e 	bl	800736c <__swsetup_r>
 8007090:	b1c0      	cbz	r0, 80070c4 <_vfiprintf_r+0x78>
 8007092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007094:	07dc      	lsls	r4, r3, #31
 8007096:	d50e      	bpl.n	80070b6 <_vfiprintf_r+0x6a>
 8007098:	f04f 30ff 	mov.w	r0, #4294967295
 800709c:	b01d      	add	sp, #116	; 0x74
 800709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	4b7b      	ldr	r3, [pc, #492]	; (8007290 <_vfiprintf_r+0x244>)
 80070a4:	429d      	cmp	r5, r3
 80070a6:	d101      	bne.n	80070ac <_vfiprintf_r+0x60>
 80070a8:	68b5      	ldr	r5, [r6, #8]
 80070aa:	e7df      	b.n	800706c <_vfiprintf_r+0x20>
 80070ac:	4b79      	ldr	r3, [pc, #484]	; (8007294 <_vfiprintf_r+0x248>)
 80070ae:	429d      	cmp	r5, r3
 80070b0:	bf08      	it	eq
 80070b2:	68f5      	ldreq	r5, [r6, #12]
 80070b4:	e7da      	b.n	800706c <_vfiprintf_r+0x20>
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	0598      	lsls	r0, r3, #22
 80070ba:	d4ed      	bmi.n	8007098 <_vfiprintf_r+0x4c>
 80070bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070be:	f000 fb84 	bl	80077ca <__retarget_lock_release_recursive>
 80070c2:	e7e9      	b.n	8007098 <_vfiprintf_r+0x4c>
 80070c4:	2300      	movs	r3, #0
 80070c6:	9309      	str	r3, [sp, #36]	; 0x24
 80070c8:	2320      	movs	r3, #32
 80070ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80070d2:	2330      	movs	r3, #48	; 0x30
 80070d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007298 <_vfiprintf_r+0x24c>
 80070d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070dc:	f04f 0901 	mov.w	r9, #1
 80070e0:	4623      	mov	r3, r4
 80070e2:	469a      	mov	sl, r3
 80070e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070e8:	b10a      	cbz	r2, 80070ee <_vfiprintf_r+0xa2>
 80070ea:	2a25      	cmp	r2, #37	; 0x25
 80070ec:	d1f9      	bne.n	80070e2 <_vfiprintf_r+0x96>
 80070ee:	ebba 0b04 	subs.w	fp, sl, r4
 80070f2:	d00b      	beq.n	800710c <_vfiprintf_r+0xc0>
 80070f4:	465b      	mov	r3, fp
 80070f6:	4622      	mov	r2, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ff93 	bl	8007026 <__sfputs_r>
 8007100:	3001      	adds	r0, #1
 8007102:	f000 80aa 	beq.w	800725a <_vfiprintf_r+0x20e>
 8007106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007108:	445a      	add	r2, fp
 800710a:	9209      	str	r2, [sp, #36]	; 0x24
 800710c:	f89a 3000 	ldrb.w	r3, [sl]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80a2 	beq.w	800725a <_vfiprintf_r+0x20e>
 8007116:	2300      	movs	r3, #0
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007120:	f10a 0a01 	add.w	sl, sl, #1
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800712c:	931a      	str	r3, [sp, #104]	; 0x68
 800712e:	4654      	mov	r4, sl
 8007130:	2205      	movs	r2, #5
 8007132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007136:	4858      	ldr	r0, [pc, #352]	; (8007298 <_vfiprintf_r+0x24c>)
 8007138:	f7f9 f852 	bl	80001e0 <memchr>
 800713c:	9a04      	ldr	r2, [sp, #16]
 800713e:	b9d8      	cbnz	r0, 8007178 <_vfiprintf_r+0x12c>
 8007140:	06d1      	lsls	r1, r2, #27
 8007142:	bf44      	itt	mi
 8007144:	2320      	movmi	r3, #32
 8007146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800714a:	0713      	lsls	r3, r2, #28
 800714c:	bf44      	itt	mi
 800714e:	232b      	movmi	r3, #43	; 0x2b
 8007150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007154:	f89a 3000 	ldrb.w	r3, [sl]
 8007158:	2b2a      	cmp	r3, #42	; 0x2a
 800715a:	d015      	beq.n	8007188 <_vfiprintf_r+0x13c>
 800715c:	9a07      	ldr	r2, [sp, #28]
 800715e:	4654      	mov	r4, sl
 8007160:	2000      	movs	r0, #0
 8007162:	f04f 0c0a 	mov.w	ip, #10
 8007166:	4621      	mov	r1, r4
 8007168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800716c:	3b30      	subs	r3, #48	; 0x30
 800716e:	2b09      	cmp	r3, #9
 8007170:	d94e      	bls.n	8007210 <_vfiprintf_r+0x1c4>
 8007172:	b1b0      	cbz	r0, 80071a2 <_vfiprintf_r+0x156>
 8007174:	9207      	str	r2, [sp, #28]
 8007176:	e014      	b.n	80071a2 <_vfiprintf_r+0x156>
 8007178:	eba0 0308 	sub.w	r3, r0, r8
 800717c:	fa09 f303 	lsl.w	r3, r9, r3
 8007180:	4313      	orrs	r3, r2
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	46a2      	mov	sl, r4
 8007186:	e7d2      	b.n	800712e <_vfiprintf_r+0xe2>
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	1d19      	adds	r1, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	9103      	str	r1, [sp, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfbb      	ittet	lt
 8007194:	425b      	neglt	r3, r3
 8007196:	f042 0202 	orrlt.w	r2, r2, #2
 800719a:	9307      	strge	r3, [sp, #28]
 800719c:	9307      	strlt	r3, [sp, #28]
 800719e:	bfb8      	it	lt
 80071a0:	9204      	strlt	r2, [sp, #16]
 80071a2:	7823      	ldrb	r3, [r4, #0]
 80071a4:	2b2e      	cmp	r3, #46	; 0x2e
 80071a6:	d10c      	bne.n	80071c2 <_vfiprintf_r+0x176>
 80071a8:	7863      	ldrb	r3, [r4, #1]
 80071aa:	2b2a      	cmp	r3, #42	; 0x2a
 80071ac:	d135      	bne.n	800721a <_vfiprintf_r+0x1ce>
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	1d1a      	adds	r2, r3, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	9203      	str	r2, [sp, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfb8      	it	lt
 80071ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80071be:	3402      	adds	r4, #2
 80071c0:	9305      	str	r3, [sp, #20]
 80071c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072a8 <_vfiprintf_r+0x25c>
 80071c6:	7821      	ldrb	r1, [r4, #0]
 80071c8:	2203      	movs	r2, #3
 80071ca:	4650      	mov	r0, sl
 80071cc:	f7f9 f808 	bl	80001e0 <memchr>
 80071d0:	b140      	cbz	r0, 80071e4 <_vfiprintf_r+0x198>
 80071d2:	2340      	movs	r3, #64	; 0x40
 80071d4:	eba0 000a 	sub.w	r0, r0, sl
 80071d8:	fa03 f000 	lsl.w	r0, r3, r0
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	4303      	orrs	r3, r0
 80071e0:	3401      	adds	r4, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e8:	482c      	ldr	r0, [pc, #176]	; (800729c <_vfiprintf_r+0x250>)
 80071ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ee:	2206      	movs	r2, #6
 80071f0:	f7f8 fff6 	bl	80001e0 <memchr>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d03f      	beq.n	8007278 <_vfiprintf_r+0x22c>
 80071f8:	4b29      	ldr	r3, [pc, #164]	; (80072a0 <_vfiprintf_r+0x254>)
 80071fa:	bb1b      	cbnz	r3, 8007244 <_vfiprintf_r+0x1f8>
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	3307      	adds	r3, #7
 8007200:	f023 0307 	bic.w	r3, r3, #7
 8007204:	3308      	adds	r3, #8
 8007206:	9303      	str	r3, [sp, #12]
 8007208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720a:	443b      	add	r3, r7
 800720c:	9309      	str	r3, [sp, #36]	; 0x24
 800720e:	e767      	b.n	80070e0 <_vfiprintf_r+0x94>
 8007210:	fb0c 3202 	mla	r2, ip, r2, r3
 8007214:	460c      	mov	r4, r1
 8007216:	2001      	movs	r0, #1
 8007218:	e7a5      	b.n	8007166 <_vfiprintf_r+0x11a>
 800721a:	2300      	movs	r3, #0
 800721c:	3401      	adds	r4, #1
 800721e:	9305      	str	r3, [sp, #20]
 8007220:	4619      	mov	r1, r3
 8007222:	f04f 0c0a 	mov.w	ip, #10
 8007226:	4620      	mov	r0, r4
 8007228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800722c:	3a30      	subs	r2, #48	; 0x30
 800722e:	2a09      	cmp	r2, #9
 8007230:	d903      	bls.n	800723a <_vfiprintf_r+0x1ee>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0c5      	beq.n	80071c2 <_vfiprintf_r+0x176>
 8007236:	9105      	str	r1, [sp, #20]
 8007238:	e7c3      	b.n	80071c2 <_vfiprintf_r+0x176>
 800723a:	fb0c 2101 	mla	r1, ip, r1, r2
 800723e:	4604      	mov	r4, r0
 8007240:	2301      	movs	r3, #1
 8007242:	e7f0      	b.n	8007226 <_vfiprintf_r+0x1da>
 8007244:	ab03      	add	r3, sp, #12
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	462a      	mov	r2, r5
 800724a:	4b16      	ldr	r3, [pc, #88]	; (80072a4 <_vfiprintf_r+0x258>)
 800724c:	a904      	add	r1, sp, #16
 800724e:	4630      	mov	r0, r6
 8007250:	f7fd fe22 	bl	8004e98 <_printf_float>
 8007254:	4607      	mov	r7, r0
 8007256:	1c78      	adds	r0, r7, #1
 8007258:	d1d6      	bne.n	8007208 <_vfiprintf_r+0x1bc>
 800725a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725c:	07d9      	lsls	r1, r3, #31
 800725e:	d405      	bmi.n	800726c <_vfiprintf_r+0x220>
 8007260:	89ab      	ldrh	r3, [r5, #12]
 8007262:	059a      	lsls	r2, r3, #22
 8007264:	d402      	bmi.n	800726c <_vfiprintf_r+0x220>
 8007266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007268:	f000 faaf 	bl	80077ca <__retarget_lock_release_recursive>
 800726c:	89ab      	ldrh	r3, [r5, #12]
 800726e:	065b      	lsls	r3, r3, #25
 8007270:	f53f af12 	bmi.w	8007098 <_vfiprintf_r+0x4c>
 8007274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007276:	e711      	b.n	800709c <_vfiprintf_r+0x50>
 8007278:	ab03      	add	r3, sp, #12
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	462a      	mov	r2, r5
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <_vfiprintf_r+0x258>)
 8007280:	a904      	add	r1, sp, #16
 8007282:	4630      	mov	r0, r6
 8007284:	f7fe f8ac 	bl	80053e0 <_printf_i>
 8007288:	e7e4      	b.n	8007254 <_vfiprintf_r+0x208>
 800728a:	bf00      	nop
 800728c:	08007e9c 	.word	0x08007e9c
 8007290:	08007ebc 	.word	0x08007ebc
 8007294:	08007e7c 	.word	0x08007e7c
 8007298:	08007d24 	.word	0x08007d24
 800729c:	08007d2e 	.word	0x08007d2e
 80072a0:	08004e99 	.word	0x08004e99
 80072a4:	08007027 	.word	0x08007027
 80072a8:	08007d2a 	.word	0x08007d2a

080072ac <__swbuf_r>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	460e      	mov	r6, r1
 80072b0:	4614      	mov	r4, r2
 80072b2:	4605      	mov	r5, r0
 80072b4:	b118      	cbz	r0, 80072be <__swbuf_r+0x12>
 80072b6:	6983      	ldr	r3, [r0, #24]
 80072b8:	b90b      	cbnz	r3, 80072be <__swbuf_r+0x12>
 80072ba:	f000 f9e7 	bl	800768c <__sinit>
 80072be:	4b21      	ldr	r3, [pc, #132]	; (8007344 <__swbuf_r+0x98>)
 80072c0:	429c      	cmp	r4, r3
 80072c2:	d12b      	bne.n	800731c <__swbuf_r+0x70>
 80072c4:	686c      	ldr	r4, [r5, #4]
 80072c6:	69a3      	ldr	r3, [r4, #24]
 80072c8:	60a3      	str	r3, [r4, #8]
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	071a      	lsls	r2, r3, #28
 80072ce:	d52f      	bpl.n	8007330 <__swbuf_r+0x84>
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	b36b      	cbz	r3, 8007330 <__swbuf_r+0x84>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	6820      	ldr	r0, [r4, #0]
 80072d8:	1ac0      	subs	r0, r0, r3
 80072da:	6963      	ldr	r3, [r4, #20]
 80072dc:	b2f6      	uxtb	r6, r6
 80072de:	4283      	cmp	r3, r0
 80072e0:	4637      	mov	r7, r6
 80072e2:	dc04      	bgt.n	80072ee <__swbuf_r+0x42>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 f93c 	bl	8007564 <_fflush_r>
 80072ec:	bb30      	cbnz	r0, 800733c <__swbuf_r+0x90>
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	60a3      	str	r3, [r4, #8]
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	701e      	strb	r6, [r3, #0]
 80072fc:	6963      	ldr	r3, [r4, #20]
 80072fe:	3001      	adds	r0, #1
 8007300:	4283      	cmp	r3, r0
 8007302:	d004      	beq.n	800730e <__swbuf_r+0x62>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	07db      	lsls	r3, r3, #31
 8007308:	d506      	bpl.n	8007318 <__swbuf_r+0x6c>
 800730a:	2e0a      	cmp	r6, #10
 800730c:	d104      	bne.n	8007318 <__swbuf_r+0x6c>
 800730e:	4621      	mov	r1, r4
 8007310:	4628      	mov	r0, r5
 8007312:	f000 f927 	bl	8007564 <_fflush_r>
 8007316:	b988      	cbnz	r0, 800733c <__swbuf_r+0x90>
 8007318:	4638      	mov	r0, r7
 800731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <__swbuf_r+0x9c>)
 800731e:	429c      	cmp	r4, r3
 8007320:	d101      	bne.n	8007326 <__swbuf_r+0x7a>
 8007322:	68ac      	ldr	r4, [r5, #8]
 8007324:	e7cf      	b.n	80072c6 <__swbuf_r+0x1a>
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <__swbuf_r+0xa0>)
 8007328:	429c      	cmp	r4, r3
 800732a:	bf08      	it	eq
 800732c:	68ec      	ldreq	r4, [r5, #12]
 800732e:	e7ca      	b.n	80072c6 <__swbuf_r+0x1a>
 8007330:	4621      	mov	r1, r4
 8007332:	4628      	mov	r0, r5
 8007334:	f000 f81a 	bl	800736c <__swsetup_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	d0cb      	beq.n	80072d4 <__swbuf_r+0x28>
 800733c:	f04f 37ff 	mov.w	r7, #4294967295
 8007340:	e7ea      	b.n	8007318 <__swbuf_r+0x6c>
 8007342:	bf00      	nop
 8007344:	08007e9c 	.word	0x08007e9c
 8007348:	08007ebc 	.word	0x08007ebc
 800734c:	08007e7c 	.word	0x08007e7c

08007350 <__ascii_wctomb>:
 8007350:	b149      	cbz	r1, 8007366 <__ascii_wctomb+0x16>
 8007352:	2aff      	cmp	r2, #255	; 0xff
 8007354:	bf85      	ittet	hi
 8007356:	238a      	movhi	r3, #138	; 0x8a
 8007358:	6003      	strhi	r3, [r0, #0]
 800735a:	700a      	strbls	r2, [r1, #0]
 800735c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007360:	bf98      	it	ls
 8007362:	2001      	movls	r0, #1
 8007364:	4770      	bx	lr
 8007366:	4608      	mov	r0, r1
 8007368:	4770      	bx	lr
	...

0800736c <__swsetup_r>:
 800736c:	4b32      	ldr	r3, [pc, #200]	; (8007438 <__swsetup_r+0xcc>)
 800736e:	b570      	push	{r4, r5, r6, lr}
 8007370:	681d      	ldr	r5, [r3, #0]
 8007372:	4606      	mov	r6, r0
 8007374:	460c      	mov	r4, r1
 8007376:	b125      	cbz	r5, 8007382 <__swsetup_r+0x16>
 8007378:	69ab      	ldr	r3, [r5, #24]
 800737a:	b913      	cbnz	r3, 8007382 <__swsetup_r+0x16>
 800737c:	4628      	mov	r0, r5
 800737e:	f000 f985 	bl	800768c <__sinit>
 8007382:	4b2e      	ldr	r3, [pc, #184]	; (800743c <__swsetup_r+0xd0>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d10f      	bne.n	80073a8 <__swsetup_r+0x3c>
 8007388:	686c      	ldr	r4, [r5, #4]
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007390:	0719      	lsls	r1, r3, #28
 8007392:	d42c      	bmi.n	80073ee <__swsetup_r+0x82>
 8007394:	06dd      	lsls	r5, r3, #27
 8007396:	d411      	bmi.n	80073bc <__swsetup_r+0x50>
 8007398:	2309      	movs	r3, #9
 800739a:	6033      	str	r3, [r6, #0]
 800739c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	f04f 30ff 	mov.w	r0, #4294967295
 80073a6:	e03e      	b.n	8007426 <__swsetup_r+0xba>
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <__swsetup_r+0xd4>)
 80073aa:	429c      	cmp	r4, r3
 80073ac:	d101      	bne.n	80073b2 <__swsetup_r+0x46>
 80073ae:	68ac      	ldr	r4, [r5, #8]
 80073b0:	e7eb      	b.n	800738a <__swsetup_r+0x1e>
 80073b2:	4b24      	ldr	r3, [pc, #144]	; (8007444 <__swsetup_r+0xd8>)
 80073b4:	429c      	cmp	r4, r3
 80073b6:	bf08      	it	eq
 80073b8:	68ec      	ldreq	r4, [r5, #12]
 80073ba:	e7e6      	b.n	800738a <__swsetup_r+0x1e>
 80073bc:	0758      	lsls	r0, r3, #29
 80073be:	d512      	bpl.n	80073e6 <__swsetup_r+0x7a>
 80073c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073c2:	b141      	cbz	r1, 80073d6 <__swsetup_r+0x6a>
 80073c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073c8:	4299      	cmp	r1, r3
 80073ca:	d002      	beq.n	80073d2 <__swsetup_r+0x66>
 80073cc:	4630      	mov	r0, r6
 80073ce:	f7ff fb6f 	bl	8006ab0 <_free_r>
 80073d2:	2300      	movs	r3, #0
 80073d4:	6363      	str	r3, [r4, #52]	; 0x34
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	2300      	movs	r3, #0
 80073e0:	6063      	str	r3, [r4, #4]
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	f043 0308 	orr.w	r3, r3, #8
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	b94b      	cbnz	r3, 8007406 <__swsetup_r+0x9a>
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fc:	d003      	beq.n	8007406 <__swsetup_r+0x9a>
 80073fe:	4621      	mov	r1, r4
 8007400:	4630      	mov	r0, r6
 8007402:	f000 fa07 	bl	8007814 <__smakebuf_r>
 8007406:	89a0      	ldrh	r0, [r4, #12]
 8007408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800740c:	f010 0301 	ands.w	r3, r0, #1
 8007410:	d00a      	beq.n	8007428 <__swsetup_r+0xbc>
 8007412:	2300      	movs	r3, #0
 8007414:	60a3      	str	r3, [r4, #8]
 8007416:	6963      	ldr	r3, [r4, #20]
 8007418:	425b      	negs	r3, r3
 800741a:	61a3      	str	r3, [r4, #24]
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	b943      	cbnz	r3, 8007432 <__swsetup_r+0xc6>
 8007420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007424:	d1ba      	bne.n	800739c <__swsetup_r+0x30>
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	0781      	lsls	r1, r0, #30
 800742a:	bf58      	it	pl
 800742c:	6963      	ldrpl	r3, [r4, #20]
 800742e:	60a3      	str	r3, [r4, #8]
 8007430:	e7f4      	b.n	800741c <__swsetup_r+0xb0>
 8007432:	2000      	movs	r0, #0
 8007434:	e7f7      	b.n	8007426 <__swsetup_r+0xba>
 8007436:	bf00      	nop
 8007438:	2000000c 	.word	0x2000000c
 800743c:	08007e9c 	.word	0x08007e9c
 8007440:	08007ebc 	.word	0x08007ebc
 8007444:	08007e7c 	.word	0x08007e7c

08007448 <abort>:
 8007448:	b508      	push	{r3, lr}
 800744a:	2006      	movs	r0, #6
 800744c:	f000 fa52 	bl	80078f4 <raise>
 8007450:	2001      	movs	r0, #1
 8007452:	f7fa f909 	bl	8001668 <_exit>
	...

08007458 <__sflush_r>:
 8007458:	898a      	ldrh	r2, [r1, #12]
 800745a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745e:	4605      	mov	r5, r0
 8007460:	0710      	lsls	r0, r2, #28
 8007462:	460c      	mov	r4, r1
 8007464:	d458      	bmi.n	8007518 <__sflush_r+0xc0>
 8007466:	684b      	ldr	r3, [r1, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc05      	bgt.n	8007478 <__sflush_r+0x20>
 800746c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	dc02      	bgt.n	8007478 <__sflush_r+0x20>
 8007472:	2000      	movs	r0, #0
 8007474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747a:	2e00      	cmp	r6, #0
 800747c:	d0f9      	beq.n	8007472 <__sflush_r+0x1a>
 800747e:	2300      	movs	r3, #0
 8007480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007484:	682f      	ldr	r7, [r5, #0]
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	d032      	beq.n	80074f0 <__sflush_r+0x98>
 800748a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	075a      	lsls	r2, r3, #29
 8007490:	d505      	bpl.n	800749e <__sflush_r+0x46>
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	1ac0      	subs	r0, r0, r3
 8007496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007498:	b10b      	cbz	r3, 800749e <__sflush_r+0x46>
 800749a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800749c:	1ac0      	subs	r0, r0, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	4602      	mov	r2, r0
 80074a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074a4:	6a21      	ldr	r1, [r4, #32]
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b0      	blx	r6
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	d106      	bne.n	80074be <__sflush_r+0x66>
 80074b0:	6829      	ldr	r1, [r5, #0]
 80074b2:	291d      	cmp	r1, #29
 80074b4:	d82c      	bhi.n	8007510 <__sflush_r+0xb8>
 80074b6:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <__sflush_r+0x108>)
 80074b8:	40ca      	lsrs	r2, r1
 80074ba:	07d6      	lsls	r6, r2, #31
 80074bc:	d528      	bpl.n	8007510 <__sflush_r+0xb8>
 80074be:	2200      	movs	r2, #0
 80074c0:	6062      	str	r2, [r4, #4]
 80074c2:	04d9      	lsls	r1, r3, #19
 80074c4:	6922      	ldr	r2, [r4, #16]
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	d504      	bpl.n	80074d4 <__sflush_r+0x7c>
 80074ca:	1c42      	adds	r2, r0, #1
 80074cc:	d101      	bne.n	80074d2 <__sflush_r+0x7a>
 80074ce:	682b      	ldr	r3, [r5, #0]
 80074d0:	b903      	cbnz	r3, 80074d4 <__sflush_r+0x7c>
 80074d2:	6560      	str	r0, [r4, #84]	; 0x54
 80074d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d6:	602f      	str	r7, [r5, #0]
 80074d8:	2900      	cmp	r1, #0
 80074da:	d0ca      	beq.n	8007472 <__sflush_r+0x1a>
 80074dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e0:	4299      	cmp	r1, r3
 80074e2:	d002      	beq.n	80074ea <__sflush_r+0x92>
 80074e4:	4628      	mov	r0, r5
 80074e6:	f7ff fae3 	bl	8006ab0 <_free_r>
 80074ea:	2000      	movs	r0, #0
 80074ec:	6360      	str	r0, [r4, #52]	; 0x34
 80074ee:	e7c1      	b.n	8007474 <__sflush_r+0x1c>
 80074f0:	6a21      	ldr	r1, [r4, #32]
 80074f2:	2301      	movs	r3, #1
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b0      	blx	r6
 80074f8:	1c41      	adds	r1, r0, #1
 80074fa:	d1c7      	bne.n	800748c <__sflush_r+0x34>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0c4      	beq.n	800748c <__sflush_r+0x34>
 8007502:	2b1d      	cmp	r3, #29
 8007504:	d001      	beq.n	800750a <__sflush_r+0xb2>
 8007506:	2b16      	cmp	r3, #22
 8007508:	d101      	bne.n	800750e <__sflush_r+0xb6>
 800750a:	602f      	str	r7, [r5, #0]
 800750c:	e7b1      	b.n	8007472 <__sflush_r+0x1a>
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	e7ad      	b.n	8007474 <__sflush_r+0x1c>
 8007518:	690f      	ldr	r7, [r1, #16]
 800751a:	2f00      	cmp	r7, #0
 800751c:	d0a9      	beq.n	8007472 <__sflush_r+0x1a>
 800751e:	0793      	lsls	r3, r2, #30
 8007520:	680e      	ldr	r6, [r1, #0]
 8007522:	bf08      	it	eq
 8007524:	694b      	ldreq	r3, [r1, #20]
 8007526:	600f      	str	r7, [r1, #0]
 8007528:	bf18      	it	ne
 800752a:	2300      	movne	r3, #0
 800752c:	eba6 0807 	sub.w	r8, r6, r7
 8007530:	608b      	str	r3, [r1, #8]
 8007532:	f1b8 0f00 	cmp.w	r8, #0
 8007536:	dd9c      	ble.n	8007472 <__sflush_r+0x1a>
 8007538:	6a21      	ldr	r1, [r4, #32]
 800753a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800753c:	4643      	mov	r3, r8
 800753e:	463a      	mov	r2, r7
 8007540:	4628      	mov	r0, r5
 8007542:	47b0      	blx	r6
 8007544:	2800      	cmp	r0, #0
 8007546:	dc06      	bgt.n	8007556 <__sflush_r+0xfe>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754e:	81a3      	strh	r3, [r4, #12]
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	e78e      	b.n	8007474 <__sflush_r+0x1c>
 8007556:	4407      	add	r7, r0
 8007558:	eba8 0800 	sub.w	r8, r8, r0
 800755c:	e7e9      	b.n	8007532 <__sflush_r+0xda>
 800755e:	bf00      	nop
 8007560:	20400001 	.word	0x20400001

08007564 <_fflush_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	690b      	ldr	r3, [r1, #16]
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b913      	cbnz	r3, 8007574 <_fflush_r+0x10>
 800756e:	2500      	movs	r5, #0
 8007570:	4628      	mov	r0, r5
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	b118      	cbz	r0, 800757e <_fflush_r+0x1a>
 8007576:	6983      	ldr	r3, [r0, #24]
 8007578:	b90b      	cbnz	r3, 800757e <_fflush_r+0x1a>
 800757a:	f000 f887 	bl	800768c <__sinit>
 800757e:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <_fflush_r+0x6c>)
 8007580:	429c      	cmp	r4, r3
 8007582:	d11b      	bne.n	80075bc <_fflush_r+0x58>
 8007584:	686c      	ldr	r4, [r5, #4]
 8007586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0ef      	beq.n	800756e <_fflush_r+0xa>
 800758e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007590:	07d0      	lsls	r0, r2, #31
 8007592:	d404      	bmi.n	800759e <_fflush_r+0x3a>
 8007594:	0599      	lsls	r1, r3, #22
 8007596:	d402      	bmi.n	800759e <_fflush_r+0x3a>
 8007598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759a:	f000 f915 	bl	80077c8 <__retarget_lock_acquire_recursive>
 800759e:	4628      	mov	r0, r5
 80075a0:	4621      	mov	r1, r4
 80075a2:	f7ff ff59 	bl	8007458 <__sflush_r>
 80075a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075a8:	07da      	lsls	r2, r3, #31
 80075aa:	4605      	mov	r5, r0
 80075ac:	d4e0      	bmi.n	8007570 <_fflush_r+0xc>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	059b      	lsls	r3, r3, #22
 80075b2:	d4dd      	bmi.n	8007570 <_fflush_r+0xc>
 80075b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075b6:	f000 f908 	bl	80077ca <__retarget_lock_release_recursive>
 80075ba:	e7d9      	b.n	8007570 <_fflush_r+0xc>
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <_fflush_r+0x70>)
 80075be:	429c      	cmp	r4, r3
 80075c0:	d101      	bne.n	80075c6 <_fflush_r+0x62>
 80075c2:	68ac      	ldr	r4, [r5, #8]
 80075c4:	e7df      	b.n	8007586 <_fflush_r+0x22>
 80075c6:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <_fflush_r+0x74>)
 80075c8:	429c      	cmp	r4, r3
 80075ca:	bf08      	it	eq
 80075cc:	68ec      	ldreq	r4, [r5, #12]
 80075ce:	e7da      	b.n	8007586 <_fflush_r+0x22>
 80075d0:	08007e9c 	.word	0x08007e9c
 80075d4:	08007ebc 	.word	0x08007ebc
 80075d8:	08007e7c 	.word	0x08007e7c

080075dc <std>:
 80075dc:	2300      	movs	r3, #0
 80075de:	b510      	push	{r4, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	e9c0 3300 	strd	r3, r3, [r0]
 80075e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ea:	6083      	str	r3, [r0, #8]
 80075ec:	8181      	strh	r1, [r0, #12]
 80075ee:	6643      	str	r3, [r0, #100]	; 0x64
 80075f0:	81c2      	strh	r2, [r0, #14]
 80075f2:	6183      	str	r3, [r0, #24]
 80075f4:	4619      	mov	r1, r3
 80075f6:	2208      	movs	r2, #8
 80075f8:	305c      	adds	r0, #92	; 0x5c
 80075fa:	f7fd fba5 	bl	8004d48 <memset>
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <std+0x38>)
 8007600:	6263      	str	r3, [r4, #36]	; 0x24
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <std+0x3c>)
 8007604:	62a3      	str	r3, [r4, #40]	; 0x28
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <std+0x40>)
 8007608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <std+0x44>)
 800760c:	6224      	str	r4, [r4, #32]
 800760e:	6323      	str	r3, [r4, #48]	; 0x30
 8007610:	bd10      	pop	{r4, pc}
 8007612:	bf00      	nop
 8007614:	0800792d 	.word	0x0800792d
 8007618:	0800794f 	.word	0x0800794f
 800761c:	08007987 	.word	0x08007987
 8007620:	080079ab 	.word	0x080079ab

08007624 <_cleanup_r>:
 8007624:	4901      	ldr	r1, [pc, #4]	; (800762c <_cleanup_r+0x8>)
 8007626:	f000 b8af 	b.w	8007788 <_fwalk_reent>
 800762a:	bf00      	nop
 800762c:	08007565 	.word	0x08007565

08007630 <__sfmoreglue>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	1e4a      	subs	r2, r1, #1
 8007634:	2568      	movs	r5, #104	; 0x68
 8007636:	4355      	muls	r5, r2
 8007638:	460e      	mov	r6, r1
 800763a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800763e:	f7ff fa87 	bl	8006b50 <_malloc_r>
 8007642:	4604      	mov	r4, r0
 8007644:	b140      	cbz	r0, 8007658 <__sfmoreglue+0x28>
 8007646:	2100      	movs	r1, #0
 8007648:	e9c0 1600 	strd	r1, r6, [r0]
 800764c:	300c      	adds	r0, #12
 800764e:	60a0      	str	r0, [r4, #8]
 8007650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007654:	f7fd fb78 	bl	8004d48 <memset>
 8007658:	4620      	mov	r0, r4
 800765a:	bd70      	pop	{r4, r5, r6, pc}

0800765c <__sfp_lock_acquire>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sfp_lock_acquire+0x8>)
 800765e:	f000 b8b3 	b.w	80077c8 <__retarget_lock_acquire_recursive>
 8007662:	bf00      	nop
 8007664:	200003d0 	.word	0x200003d0

08007668 <__sfp_lock_release>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__sfp_lock_release+0x8>)
 800766a:	f000 b8ae 	b.w	80077ca <__retarget_lock_release_recursive>
 800766e:	bf00      	nop
 8007670:	200003d0 	.word	0x200003d0

08007674 <__sinit_lock_acquire>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__sinit_lock_acquire+0x8>)
 8007676:	f000 b8a7 	b.w	80077c8 <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	200003cb 	.word	0x200003cb

08007680 <__sinit_lock_release>:
 8007680:	4801      	ldr	r0, [pc, #4]	; (8007688 <__sinit_lock_release+0x8>)
 8007682:	f000 b8a2 	b.w	80077ca <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	200003cb 	.word	0x200003cb

0800768c <__sinit>:
 800768c:	b510      	push	{r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f7ff fff0 	bl	8007674 <__sinit_lock_acquire>
 8007694:	69a3      	ldr	r3, [r4, #24]
 8007696:	b11b      	cbz	r3, 80076a0 <__sinit+0x14>
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800769c:	f7ff bff0 	b.w	8007680 <__sinit_lock_release>
 80076a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076a4:	6523      	str	r3, [r4, #80]	; 0x50
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <__sinit+0x68>)
 80076a8:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <__sinit+0x6c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	bf04      	itt	eq
 80076b2:	2301      	moveq	r3, #1
 80076b4:	61a3      	streq	r3, [r4, #24]
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 f820 	bl	80076fc <__sfp>
 80076bc:	6060      	str	r0, [r4, #4]
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 f81c 	bl	80076fc <__sfp>
 80076c4:	60a0      	str	r0, [r4, #8]
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 f818 	bl	80076fc <__sfp>
 80076cc:	2200      	movs	r2, #0
 80076ce:	60e0      	str	r0, [r4, #12]
 80076d0:	2104      	movs	r1, #4
 80076d2:	6860      	ldr	r0, [r4, #4]
 80076d4:	f7ff ff82 	bl	80075dc <std>
 80076d8:	68a0      	ldr	r0, [r4, #8]
 80076da:	2201      	movs	r2, #1
 80076dc:	2109      	movs	r1, #9
 80076de:	f7ff ff7d 	bl	80075dc <std>
 80076e2:	68e0      	ldr	r0, [r4, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	2112      	movs	r1, #18
 80076e8:	f7ff ff78 	bl	80075dc <std>
 80076ec:	2301      	movs	r3, #1
 80076ee:	61a3      	str	r3, [r4, #24]
 80076f0:	e7d2      	b.n	8007698 <__sinit+0xc>
 80076f2:	bf00      	nop
 80076f4:	08007afc 	.word	0x08007afc
 80076f8:	08007625 	.word	0x08007625

080076fc <__sfp>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	4607      	mov	r7, r0
 8007700:	f7ff ffac 	bl	800765c <__sfp_lock_acquire>
 8007704:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <__sfp+0x84>)
 8007706:	681e      	ldr	r6, [r3, #0]
 8007708:	69b3      	ldr	r3, [r6, #24]
 800770a:	b913      	cbnz	r3, 8007712 <__sfp+0x16>
 800770c:	4630      	mov	r0, r6
 800770e:	f7ff ffbd 	bl	800768c <__sinit>
 8007712:	3648      	adds	r6, #72	; 0x48
 8007714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007718:	3b01      	subs	r3, #1
 800771a:	d503      	bpl.n	8007724 <__sfp+0x28>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	b30b      	cbz	r3, 8007764 <__sfp+0x68>
 8007720:	6836      	ldr	r6, [r6, #0]
 8007722:	e7f7      	b.n	8007714 <__sfp+0x18>
 8007724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007728:	b9d5      	cbnz	r5, 8007760 <__sfp+0x64>
 800772a:	4b16      	ldr	r3, [pc, #88]	; (8007784 <__sfp+0x88>)
 800772c:	60e3      	str	r3, [r4, #12]
 800772e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007732:	6665      	str	r5, [r4, #100]	; 0x64
 8007734:	f000 f847 	bl	80077c6 <__retarget_lock_init_recursive>
 8007738:	f7ff ff96 	bl	8007668 <__sfp_lock_release>
 800773c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007744:	6025      	str	r5, [r4, #0]
 8007746:	61a5      	str	r5, [r4, #24]
 8007748:	2208      	movs	r2, #8
 800774a:	4629      	mov	r1, r5
 800774c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007750:	f7fd fafa 	bl	8004d48 <memset>
 8007754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800775c:	4620      	mov	r0, r4
 800775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007760:	3468      	adds	r4, #104	; 0x68
 8007762:	e7d9      	b.n	8007718 <__sfp+0x1c>
 8007764:	2104      	movs	r1, #4
 8007766:	4638      	mov	r0, r7
 8007768:	f7ff ff62 	bl	8007630 <__sfmoreglue>
 800776c:	4604      	mov	r4, r0
 800776e:	6030      	str	r0, [r6, #0]
 8007770:	2800      	cmp	r0, #0
 8007772:	d1d5      	bne.n	8007720 <__sfp+0x24>
 8007774:	f7ff ff78 	bl	8007668 <__sfp_lock_release>
 8007778:	230c      	movs	r3, #12
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	e7ee      	b.n	800775c <__sfp+0x60>
 800777e:	bf00      	nop
 8007780:	08007afc 	.word	0x08007afc
 8007784:	ffff0001 	.word	0xffff0001

08007788 <_fwalk_reent>:
 8007788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800778c:	4606      	mov	r6, r0
 800778e:	4688      	mov	r8, r1
 8007790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007794:	2700      	movs	r7, #0
 8007796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800779a:	f1b9 0901 	subs.w	r9, r9, #1
 800779e:	d505      	bpl.n	80077ac <_fwalk_reent+0x24>
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	2c00      	cmp	r4, #0
 80077a4:	d1f7      	bne.n	8007796 <_fwalk_reent+0xe>
 80077a6:	4638      	mov	r0, r7
 80077a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ac:	89ab      	ldrh	r3, [r5, #12]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d907      	bls.n	80077c2 <_fwalk_reent+0x3a>
 80077b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077b6:	3301      	adds	r3, #1
 80077b8:	d003      	beq.n	80077c2 <_fwalk_reent+0x3a>
 80077ba:	4629      	mov	r1, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	47c0      	blx	r8
 80077c0:	4307      	orrs	r7, r0
 80077c2:	3568      	adds	r5, #104	; 0x68
 80077c4:	e7e9      	b.n	800779a <_fwalk_reent+0x12>

080077c6 <__retarget_lock_init_recursive>:
 80077c6:	4770      	bx	lr

080077c8 <__retarget_lock_acquire_recursive>:
 80077c8:	4770      	bx	lr

080077ca <__retarget_lock_release_recursive>:
 80077ca:	4770      	bx	lr

080077cc <__swhatbuf_r>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	460e      	mov	r6, r1
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	2900      	cmp	r1, #0
 80077d6:	b096      	sub	sp, #88	; 0x58
 80077d8:	4614      	mov	r4, r2
 80077da:	461d      	mov	r5, r3
 80077dc:	da07      	bge.n	80077ee <__swhatbuf_r+0x22>
 80077de:	2300      	movs	r3, #0
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	89b3      	ldrh	r3, [r6, #12]
 80077e4:	061a      	lsls	r2, r3, #24
 80077e6:	d410      	bmi.n	800780a <__swhatbuf_r+0x3e>
 80077e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ec:	e00e      	b.n	800780c <__swhatbuf_r+0x40>
 80077ee:	466a      	mov	r2, sp
 80077f0:	f000 f902 	bl	80079f8 <_fstat_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	dbf2      	blt.n	80077de <__swhatbuf_r+0x12>
 80077f8:	9a01      	ldr	r2, [sp, #4]
 80077fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007802:	425a      	negs	r2, r3
 8007804:	415a      	adcs	r2, r3
 8007806:	602a      	str	r2, [r5, #0]
 8007808:	e7ee      	b.n	80077e8 <__swhatbuf_r+0x1c>
 800780a:	2340      	movs	r3, #64	; 0x40
 800780c:	2000      	movs	r0, #0
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	b016      	add	sp, #88	; 0x58
 8007812:	bd70      	pop	{r4, r5, r6, pc}

08007814 <__smakebuf_r>:
 8007814:	898b      	ldrh	r3, [r1, #12]
 8007816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007818:	079d      	lsls	r5, r3, #30
 800781a:	4606      	mov	r6, r0
 800781c:	460c      	mov	r4, r1
 800781e:	d507      	bpl.n	8007830 <__smakebuf_r+0x1c>
 8007820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	2301      	movs	r3, #1
 800782a:	6163      	str	r3, [r4, #20]
 800782c:	b002      	add	sp, #8
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	ab01      	add	r3, sp, #4
 8007832:	466a      	mov	r2, sp
 8007834:	f7ff ffca 	bl	80077cc <__swhatbuf_r>
 8007838:	9900      	ldr	r1, [sp, #0]
 800783a:	4605      	mov	r5, r0
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff f987 	bl	8006b50 <_malloc_r>
 8007842:	b948      	cbnz	r0, 8007858 <__smakebuf_r+0x44>
 8007844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007848:	059a      	lsls	r2, r3, #22
 800784a:	d4ef      	bmi.n	800782c <__smakebuf_r+0x18>
 800784c:	f023 0303 	bic.w	r3, r3, #3
 8007850:	f043 0302 	orr.w	r3, r3, #2
 8007854:	81a3      	strh	r3, [r4, #12]
 8007856:	e7e3      	b.n	8007820 <__smakebuf_r+0xc>
 8007858:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <__smakebuf_r+0x7c>)
 800785a:	62b3      	str	r3, [r6, #40]	; 0x28
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	6020      	str	r0, [r4, #0]
 8007860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	6163      	str	r3, [r4, #20]
 800786a:	9b01      	ldr	r3, [sp, #4]
 800786c:	6120      	str	r0, [r4, #16]
 800786e:	b15b      	cbz	r3, 8007888 <__smakebuf_r+0x74>
 8007870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007874:	4630      	mov	r0, r6
 8007876:	f000 f8d1 	bl	8007a1c <_isatty_r>
 800787a:	b128      	cbz	r0, 8007888 <__smakebuf_r+0x74>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	89a0      	ldrh	r0, [r4, #12]
 800788a:	4305      	orrs	r5, r0
 800788c:	81a5      	strh	r5, [r4, #12]
 800788e:	e7cd      	b.n	800782c <__smakebuf_r+0x18>
 8007890:	08007625 	.word	0x08007625

08007894 <_malloc_usable_size_r>:
 8007894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007898:	1f18      	subs	r0, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfbc      	itt	lt
 800789e:	580b      	ldrlt	r3, [r1, r0]
 80078a0:	18c0      	addlt	r0, r0, r3
 80078a2:	4770      	bx	lr

080078a4 <_raise_r>:
 80078a4:	291f      	cmp	r1, #31
 80078a6:	b538      	push	{r3, r4, r5, lr}
 80078a8:	4604      	mov	r4, r0
 80078aa:	460d      	mov	r5, r1
 80078ac:	d904      	bls.n	80078b8 <_raise_r+0x14>
 80078ae:	2316      	movs	r3, #22
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078ba:	b112      	cbz	r2, 80078c2 <_raise_r+0x1e>
 80078bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078c0:	b94b      	cbnz	r3, 80078d6 <_raise_r+0x32>
 80078c2:	4620      	mov	r0, r4
 80078c4:	f000 f830 	bl	8007928 <_getpid_r>
 80078c8:	462a      	mov	r2, r5
 80078ca:	4601      	mov	r1, r0
 80078cc:	4620      	mov	r0, r4
 80078ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d2:	f000 b817 	b.w	8007904 <_kill_r>
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d00a      	beq.n	80078f0 <_raise_r+0x4c>
 80078da:	1c59      	adds	r1, r3, #1
 80078dc:	d103      	bne.n	80078e6 <_raise_r+0x42>
 80078de:	2316      	movs	r3, #22
 80078e0:	6003      	str	r3, [r0, #0]
 80078e2:	2001      	movs	r0, #1
 80078e4:	e7e7      	b.n	80078b6 <_raise_r+0x12>
 80078e6:	2400      	movs	r4, #0
 80078e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078ec:	4628      	mov	r0, r5
 80078ee:	4798      	blx	r3
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7e0      	b.n	80078b6 <_raise_r+0x12>

080078f4 <raise>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	; (8007900 <raise+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f7ff bfd3 	b.w	80078a4 <_raise_r>
 80078fe:	bf00      	nop
 8007900:	2000000c 	.word	0x2000000c

08007904 <_kill_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d07      	ldr	r5, [pc, #28]	; (8007924 <_kill_r+0x20>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f7f9 fe99 	bl	8001648 <_kill>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d102      	bne.n	8007920 <_kill_r+0x1c>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	b103      	cbz	r3, 8007920 <_kill_r+0x1c>
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	bf00      	nop
 8007924:	200003c4 	.word	0x200003c4

08007928 <_getpid_r>:
 8007928:	f7f9 be86 	b.w	8001638 <_getpid>

0800792c <__sread>:
 800792c:	b510      	push	{r4, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	f000 f894 	bl	8007a60 <_read_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	bfab      	itete	ge
 800793c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800793e:	89a3      	ldrhlt	r3, [r4, #12]
 8007940:	181b      	addge	r3, r3, r0
 8007942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007946:	bfac      	ite	ge
 8007948:	6563      	strge	r3, [r4, #84]	; 0x54
 800794a:	81a3      	strhlt	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__swrite>:
 800794e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007952:	461f      	mov	r7, r3
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	05db      	lsls	r3, r3, #23
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4616      	mov	r6, r2
 800795e:	d505      	bpl.n	800796c <__swrite+0x1e>
 8007960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007964:	2302      	movs	r3, #2
 8007966:	2200      	movs	r2, #0
 8007968:	f000 f868 	bl	8007a3c <_lseek_r>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	4628      	mov	r0, r5
 800797e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	f000 b817 	b.w	80079b4 <_write_r>

08007986 <__sseek>:
 8007986:	b510      	push	{r4, lr}
 8007988:	460c      	mov	r4, r1
 800798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798e:	f000 f855 	bl	8007a3c <_lseek_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	bf15      	itete	ne
 8007998:	6560      	strne	r0, [r4, #84]	; 0x54
 800799a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800799e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079a2:	81a3      	strheq	r3, [r4, #12]
 80079a4:	bf18      	it	ne
 80079a6:	81a3      	strhne	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__sclose>:
 80079aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ae:	f000 b813 	b.w	80079d8 <_close_r>
	...

080079b4 <_write_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d07      	ldr	r5, [pc, #28]	; (80079d4 <_write_r+0x20>)
 80079b8:	4604      	mov	r4, r0
 80079ba:	4608      	mov	r0, r1
 80079bc:	4611      	mov	r1, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f7f9 fe77 	bl	80016b6 <_write>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_write_r+0x1e>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_write_r+0x1e>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	200003c4 	.word	0x200003c4

080079d8 <_close_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d06      	ldr	r5, [pc, #24]	; (80079f4 <_close_r+0x1c>)
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7f9 fe83 	bl	80016ee <_close>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_close_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_close_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	200003c4 	.word	0x200003c4

080079f8 <_fstat_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	; (8007a18 <_fstat_r+0x20>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	f7f9 fe7e 	bl	8001706 <_fstat>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	d102      	bne.n	8007a14 <_fstat_r+0x1c>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	b103      	cbz	r3, 8007a14 <_fstat_r+0x1c>
 8007a12:	6023      	str	r3, [r4, #0]
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	bf00      	nop
 8007a18:	200003c4 	.word	0x200003c4

08007a1c <_isatty_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d06      	ldr	r5, [pc, #24]	; (8007a38 <_isatty_r+0x1c>)
 8007a20:	2300      	movs	r3, #0
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7f9 fe7d 	bl	8001726 <_isatty>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_isatty_r+0x1a>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_isatty_r+0x1a>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	200003c4 	.word	0x200003c4

08007a3c <_lseek_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	; (8007a5c <_lseek_r+0x20>)
 8007a40:	4604      	mov	r4, r0
 8007a42:	4608      	mov	r0, r1
 8007a44:	4611      	mov	r1, r2
 8007a46:	2200      	movs	r2, #0
 8007a48:	602a      	str	r2, [r5, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f7f9 fe76 	bl	800173c <_lseek>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_lseek_r+0x1e>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_lseek_r+0x1e>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200003c4 	.word	0x200003c4

08007a60 <_read_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d07      	ldr	r5, [pc, #28]	; (8007a80 <_read_r+0x20>)
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7f9 fe04 	bl	800167c <_read>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_read_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_read_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	200003c4 	.word	0x200003c4

08007a84 <_init>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr

08007a90 <_fini>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	bf00      	nop
 8007a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a96:	bc08      	pop	{r3}
 8007a98:	469e      	mov	lr, r3
 8007a9a:	4770      	bx	lr
